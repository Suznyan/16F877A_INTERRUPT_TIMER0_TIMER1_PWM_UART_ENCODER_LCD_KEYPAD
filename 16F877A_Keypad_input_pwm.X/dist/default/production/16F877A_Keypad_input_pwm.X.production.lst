

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Tue Jul 05 17:13:06 2022

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og9 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2,noexec
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    18                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    19                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2,group=3
    22                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2,group=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2,group=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2
    39                           	psect	text25,local,class=CODE,merge=1,delta=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2
    41                           	psect	text27,local,class=CODE,merge=1,delta=2
    42                           	psect	text28,local,class=CODE,merge=1,delta=2
    43                           	psect	text29,local,class=CODE,merge=1,delta=2
    44                           	psect	text30,local,class=CODE,merge=1,delta=2,group=2
    45                           	psect	text31,local,class=CODE,merge=1,delta=2,group=2
    46                           	psect	text32,local,class=CODE,merge=1,delta=2
    47                           	psect	text33,local,class=CODE,merge=1,delta=2
    48                           	psect	text34,local,class=CODE,merge=1,delta=2
    49                           	psect	text35,local,class=CODE,merge=1,delta=2
    50                           	psect	text36,local,class=CODE,merge=1,delta=2
    51                           	psect	text37,local,class=CODE,merge=1,delta=2
    52                           	psect	text38,local,class=CODE,merge=1,delta=2
    53                           	psect	text39,local,class=CODE,merge=1,delta=2
    54                           	psect	text40,local,class=CODE,merge=1,delta=2,group=2
    55                           	psect	text41,local,class=CODE,merge=1,delta=2,group=2
    56                           	psect	text42,local,class=CODE,merge=1,delta=2,group=2
    57                           	psect	text43,local,class=CODE,merge=1,delta=2,group=2
    58                           	psect	text44,local,class=CODE,merge=1,delta=2,group=2
    59                           	psect	text45,local,class=CODE,merge=1,delta=2,group=2
    60                           	psect	text46,local,class=CODE,merge=1,delta=2
    61                           	psect	text47,local,class=CODE,merge=1,delta=2,group=2
    62                           	psect	text48,local,class=CODE,merge=1,delta=2
    63                           	psect	text49,local,class=CODE,merge=1,delta=2
    64                           	psect	text50,local,class=CODE,merge=1,delta=2
    65                           	psect	text51,local,class=CODE,merge=1,delta=2
    66                           	psect	text52,local,class=CODE,merge=1,delta=2
    67                           	psect	intentry,global,class=CODE,delta=2
    68                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    69                           	dabs	1,0x7E,2
    70  0000                     
    71                           ; Version 2.20
    72                           ; Generated 09/04/2020 GMT
    73                           ; 
    74                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    75                           ; All rights reserved.
    76                           ; 
    77                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    78                           ; 
    79                           ; Redistribution and use in source and binary forms, with or without modification, are
    80                           ; permitted provided that the following conditions are met:
    81                           ; 
    82                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    83                           ;        conditions and the following disclaimer.
    84                           ; 
    85                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    86                           ;        of conditions and the following disclaimer in the documentation and/or other
    87                           ;        materials provided with the distribution.
    88                           ; 
    89                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    90                           ;        software without specific prior written permission.
    91                           ; 
    92                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    93                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    94                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    95                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    96                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    97                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    98                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    99                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   100                           ; 
   101                           ; 
   102                           ; Code-generator required, PIC16F877A Definitions
   103                           ; 
   104                           ; SFR Addresses
   105  0000                     	;# 
   106  0001                     	;# 
   107  0002                     	;# 
   108  0003                     	;# 
   109  0004                     	;# 
   110  0005                     	;# 
   111  0006                     	;# 
   112  0007                     	;# 
   113  0008                     	;# 
   114  0009                     	;# 
   115  000A                     	;# 
   116  000B                     	;# 
   117  000C                     	;# 
   118  000D                     	;# 
   119  000E                     	;# 
   120  000E                     	;# 
   121  000F                     	;# 
   122  0010                     	;# 
   123  0011                     	;# 
   124  0012                     	;# 
   125  0013                     	;# 
   126  0014                     	;# 
   127  0015                     	;# 
   128  0015                     	;# 
   129  0016                     	;# 
   130  0017                     	;# 
   131  0018                     	;# 
   132  0019                     	;# 
   133  001A                     	;# 
   134  001B                     	;# 
   135  001B                     	;# 
   136  001C                     	;# 
   137  001D                     	;# 
   138  001E                     	;# 
   139  001F                     	;# 
   140  0081                     	;# 
   141  0085                     	;# 
   142  0086                     	;# 
   143  0087                     	;# 
   144  0088                     	;# 
   145  0089                     	;# 
   146  008C                     	;# 
   147  008D                     	;# 
   148  008E                     	;# 
   149  0091                     	;# 
   150  0092                     	;# 
   151  0093                     	;# 
   152  0094                     	;# 
   153  0098                     	;# 
   154  0099                     	;# 
   155  009C                     	;# 
   156  009D                     	;# 
   157  009E                     	;# 
   158  009F                     	;# 
   159  010C                     	;# 
   160  010D                     	;# 
   161  010E                     	;# 
   162  010F                     	;# 
   163  018C                     	;# 
   164  018D                     	;# 
   165  0000                     	;# 
   166  0001                     	;# 
   167  0002                     	;# 
   168  0003                     	;# 
   169  0004                     	;# 
   170  0005                     	;# 
   171  0006                     	;# 
   172  0007                     	;# 
   173  0008                     	;# 
   174  0009                     	;# 
   175  000A                     	;# 
   176  000B                     	;# 
   177  000C                     	;# 
   178  000D                     	;# 
   179  000E                     	;# 
   180  000E                     	;# 
   181  000F                     	;# 
   182  0010                     	;# 
   183  0011                     	;# 
   184  0012                     	;# 
   185  0013                     	;# 
   186  0014                     	;# 
   187  0015                     	;# 
   188  0015                     	;# 
   189  0016                     	;# 
   190  0017                     	;# 
   191  0018                     	;# 
   192  0019                     	;# 
   193  001A                     	;# 
   194  001B                     	;# 
   195  001B                     	;# 
   196  001C                     	;# 
   197  001D                     	;# 
   198  001E                     	;# 
   199  001F                     	;# 
   200  0081                     	;# 
   201  0085                     	;# 
   202  0086                     	;# 
   203  0087                     	;# 
   204  0088                     	;# 
   205  0089                     	;# 
   206  008C                     	;# 
   207  008D                     	;# 
   208  008E                     	;# 
   209  0091                     	;# 
   210  0092                     	;# 
   211  0093                     	;# 
   212  0094                     	;# 
   213  0098                     	;# 
   214  0099                     	;# 
   215  009C                     	;# 
   216  009D                     	;# 
   217  009E                     	;# 
   218  009F                     	;# 
   219  010C                     	;# 
   220  010D                     	;# 
   221  010E                     	;# 
   222  010F                     	;# 
   223  018C                     	;# 
   224  018D                     	;# 
   225                           
   226                           	psect	idataCOMMON
   227  0003                     __pidataCOMMON:
   228                           
   229                           ;initializer for _k
   230  0003  346E               	retlw	110
   231                           
   232                           	psect	stringtext
   233  1000                     __pstringtext:
   234  1000                     stringtab:
   235  1000                     __stringtab:
   236                           
   237                           ;	String table - string pointers are 2 bytes each
   238  1000  1BFF               	btfsc	btemp+1,7
   239  1001  280A               	ljmp	stringcode
   240  1002  1383               	bcf	3,7
   241  1003  187F               	btfsc	btemp+1,0
   242  1004  1783               	bsf	3,7
   243  1005  0800               	movf	0,w
   244  1006  0A84               	incf	4,f
   245  1007  1903               	skipnz
   246  1008  0AFF               	incf	btemp+1,f
   247  1009  0008               	return
   248  100A                     stringcode:
   249  100A  087F               	movf	btemp+1,w
   250  100B  397F               	andlw	127
   251  100C  008A               	movwf	10
   252  100D  0804               	movf	4,w
   253  100E  0A84               	incf	4,f
   254  100F  1903               	skipnz
   255  1010  0AFF               	incf	btemp+1,f
   256  1011  0082               	movwf	2
   257  1012                     __stringbase:
   258  1012                     __end_of__stringtab:
   259  1012                     __powers_:
   260  1012  3400               	retlw	0
   261  1013  3480               	retlw	128
   262  1014  343F               	retlw	63
   263  1015  3400               	retlw	0
   264  1016  3420               	retlw	32
   265  1017  3441               	retlw	65
   266  1018  3400               	retlw	0
   267  1019  34C8               	retlw	200
   268  101A  3442               	retlw	66
   269  101B  3400               	retlw	0
   270  101C  347A               	retlw	122
   271  101D  3444               	retlw	68
   272  101E  3440               	retlw	64
   273  101F  341C               	retlw	28
   274  1020  3446               	retlw	70
   275  1021  3450               	retlw	80
   276  1022  34C3               	retlw	195
   277  1023  3447               	retlw	71
   278  1024  3424               	retlw	36
   279  1025  3474               	retlw	116
   280  1026  3449               	retlw	73
   281  1027  3497               	retlw	151
   282  1028  3418               	retlw	24
   283  1029  344B               	retlw	75
   284  102A  34BC               	retlw	188
   285  102B  34BE               	retlw	190
   286  102C  344C               	retlw	76
   287  102D  346B               	retlw	107
   288  102E  346E               	retlw	110
   289  102F  344E               	retlw	78
   290  1030  3403               	retlw	3
   291  1031  3415               	retlw	21
   292  1032  3450               	retlw	80
   293  1033  3479               	retlw	121
   294  1034  34AD               	retlw	173
   295  1035  3460               	retlw	96
   296  1036  34F3               	retlw	243
   297  1037  3449               	retlw	73
   298  1038  3471               	retlw	113
   299  1039                     __end_of__powers_:
   300  1039                     __npowers_:
   301  1039  3400               	retlw	0
   302  103A  3480               	retlw	128
   303  103B  343F               	retlw	63
   304  103C  34CD               	retlw	205
   305  103D  34CC               	retlw	204
   306  103E  343D               	retlw	61
   307  103F  34D7               	retlw	215
   308  1040  3423               	retlw	35
   309  1041  343C               	retlw	60
   310  1042  3412               	retlw	18
   311  1043  3483               	retlw	131
   312  1044  343A               	retlw	58
   313  1045  34B7               	retlw	183
   314  1046  34D1               	retlw	209
   315  1047  3438               	retlw	56
   316  1048  34C6               	retlw	198
   317  1049  3427               	retlw	39
   318  104A  3437               	retlw	55
   319  104B  3438               	retlw	56
   320  104C  3486               	retlw	134
   321  104D  3435               	retlw	53
   322  104E  34C0               	retlw	192
   323  104F  34D6               	retlw	214
   324  1050  3433               	retlw	51
   325  1051  34CC               	retlw	204
   326  1052  342B               	retlw	43
   327  1053  3432               	retlw	50
   328  1054  3470               	retlw	112
   329  1055  3489               	retlw	137
   330  1056  3430               	retlw	48
   331  1057  34E7               	retlw	231
   332  1058  34DB               	retlw	219
   333  1059  342E               	retlw	46
   334  105A  34E5               	retlw	229
   335  105B  343C               	retlw	60
   336  105C  341E               	retlw	30
   337  105D  3442               	retlw	66
   338  105E  34A2               	retlw	162
   339  105F  340D               	retlw	13
   340  1060                     __end_of__npowers_:
   341  1060                     _dpowers:
   342  1060  3401               	retlw	1
   343  1061  3400               	retlw	0
   344  1062  3400               	retlw	0
   345  1063  3400               	retlw	0
   346  1064  340A               	retlw	10
   347  1065  3400               	retlw	0
   348  1066  3400               	retlw	0
   349  1067  3400               	retlw	0
   350  1068  3464               	retlw	100
   351  1069  3400               	retlw	0
   352  106A  3400               	retlw	0
   353  106B  3400               	retlw	0
   354  106C  34E8               	retlw	232
   355  106D  3403               	retlw	3
   356  106E  3400               	retlw	0
   357  106F  3400               	retlw	0
   358  1070  3410               	retlw	16
   359  1071  3427               	retlw	39
   360  1072  3400               	retlw	0
   361  1073  3400               	retlw	0
   362  1074  34A0               	retlw	160
   363  1075  3486               	retlw	134
   364  1076  3401               	retlw	1
   365  1077  3400               	retlw	0
   366  1078  3440               	retlw	64
   367  1079  3442               	retlw	66
   368  107A  340F               	retlw	15
   369  107B  3400               	retlw	0
   370  107C  3480               	retlw	128
   371  107D  3496               	retlw	150
   372  107E  3498               	retlw	152
   373  107F  3400               	retlw	0
   374  1080  3400               	retlw	0
   375  1081  34E1               	retlw	225
   376  1082  34F5               	retlw	245
   377  1083  3405               	retlw	5
   378  1084  3400               	retlw	0
   379  1085  34CA               	retlw	202
   380  1086  349A               	retlw	154
   381  1087  343B               	retlw	59
   382  1088                     __end_of_dpowers:
   383  0007                     _PORTC	set	7
   384  000B                     _INTCONbits	set	11
   385  000C                     _PIR1bits	set	12
   386  000F                     _TMR1H	set	15
   387  000E                     _TMR1L	set	14
   388  0010                     _T1CONbits	set	16
   389  0006                     _PORTB	set	6
   390  0012                     _T2CONbits	set	18
   391  0015                     _CCPR1L	set	21
   392  0017                     _CCP1CONbits	set	23
   393  0019                     _TXREG	set	25
   394  003D                     _RC5	set	61
   395  003C                     _RC4	set	60
   396  0038                     _RC0	set	56
   397  005C                     _INTE	set	92
   398  005E                     _PEIE	set	94
   399  005F                     _GIE	set	95
   400  0043                     _RD3	set	67
   401  0042                     _RD2	set	66
   402  0047                     _RD7	set	71
   403  0046                     _RD6	set	70
   404  0045                     _RD5	set	69
   405  0044                     _RD4	set	68
   406  0037                     _RB7	set	55
   407  0036                     _RB6	set	54
   408  0035                     _RB5	set	53
   409  0034                     _RB4	set	52
   410  0033                     _RB3	set	51
   411  0032                     _RB2	set	50
   412  0031                     _RB1	set	49
   413  003B                     _RC3	set	59
   414  0064                     _TXIF	set	100
   415  00C6                     _RX9	set	198
   416  00C4                     _CREN	set	196
   417  00C7                     _SPEN	set	199
   418  0088                     _TRISD	set	136
   419  0087                     _TRISC	set	135
   420  0081                     _OPTION_REGbits	set	129
   421  008C                     _PIE1bits	set	140
   422  0081                     _OPTION_REG	set	129
   423  0092                     _PR2	set	146
   424  0099                     _SPBRG	set	153
   425  043D                     _TRISC5	set	1085
   426  0430                     _TRISB0	set	1072
   427  040E                     _INTEDG	set	1038
   428  0437                     _TRISB7	set	1079
   429  0436                     _TRISB6	set	1078
   430  0435                     _TRISB5	set	1077
   431  0434                     _TRISB4	set	1076
   432  043B                     _TRISC3	set	1083
   433  0433                     _TRISB3	set	1075
   434  0432                     _TRISB2	set	1074
   435  0431                     _TRISB1	set	1073
   436  043A                     _TRISC2	set	1082
   437  04C6                     _TX9	set	1222
   438  04C5                     _TXEN	set	1221
   439  04C4                     _SYNC	set	1220
   440  04C2                     _BRGH	set	1218
   441  043F                     _TRISC7	set	1087
   442  043E                     _TRISC6	set	1086
   443  1088                     STR_10:
   444  1088  3420               	retlw	32	;' '
   445  1089  3420               	retlw	32	;' '
   446  108A  3441               	retlw	65	;'A'
   447  108B  342E               	retlw	46	;'.'
   448  108C  3451               	retlw	81	;'Q'
   449  108D  3475               	retlw	117	;'u'
   450  108E  3461               	retlw	97	;'a'
   451  108F  3479               	retlw	121	;'y'
   452  1090  3420               	retlw	32	;' '
   453  1091  3474               	retlw	116	;'t'
   454  1092  3468               	retlw	104	;'h'
   455  1093  3475               	retlw	117	;'u'
   456  1094  3461               	retlw	97	;'a'
   457  1095  346E               	retlw	110	;'n'
   458  1096  3420               	retlw	32	;' '
   459  1097  347C               	retlw	124	;'|'
   460  1098  3420               	retlw	32	;' '
   461  1099  3442               	retlw	66	;'B'
   462  109A  342E               	retlw	46	;'.'
   463  109B  3451               	retlw	81	;'Q'
   464  109C  3475               	retlw	117	;'u'
   465  109D  3461               	retlw	97	;'a'
   466  109E  3479               	retlw	121	;'y'
   467  109F  3420               	retlw	32	;' '
   468  10A0  346E               	retlw	110	;'n'
   469  10A1  3467               	retlw	103	;'g'
   470  10A2  3468               	retlw	104	;'h'
   471  10A3  3469               	retlw	105	;'i'
   472  10A4  3463               	retlw	99	;'c'
   473  10A5  3468               	retlw	104	;'h'
   474  10A6  3420               	retlw	32	;' '
   475  10A7  347C               	retlw	124	;'|'
   476  10A8  3420               	retlw	32	;' '
   477  10A9  3443               	retlw	67	;'C'
   478  10AA  342E               	retlw	46	;'.'
   479  10AB  3443               	retlw	67	;'C'
   480  10AC  3468               	retlw	104	;'h'
   481  10AD  3461               	retlw	97	;'a'
   482  10AE  346E               	retlw	110	;'n'
   483  10AF  3467               	retlw	103	;'g'
   484  10B0  3465               	retlw	101	;'e'
   485  10B1  3420               	retlw	32	;' '
   486  10B2  3473               	retlw	115	;'s'
   487  10B3  3470               	retlw	112	;'p'
   488  10B4  3465               	retlw	101	;'e'
   489  10B5  3465               	retlw	101	;'e'
   490  10B6  3464               	retlw	100	;'d'
   491  10B7  3420               	retlw	32	;' '
   492  10B8  347C               	retlw	124	;'|'
   493  10B9  3420               	retlw	32	;' '
   494  10BA  3444               	retlw	68	;'D'
   495  10BB  342E               	retlw	46	;'.'
   496  10BC  3445               	retlw	69	;'E'
   497  10BD  346D               	retlw	109	;'m'
   498  10BE  3465               	retlw	101	;'e'
   499  10BF  3472               	retlw	114	;'r'
   500  10C0  3467               	retlw	103	;'g'
   501  10C1  3465               	retlw	101	;'e'
   502  10C2  346E               	retlw	110	;'n'
   503  10C3  3463               	retlw	99	;'c'
   504  10C4  3479               	retlw	121	;'y'
   505  10C5  3420               	retlw	32	;' '
   506  10C6  3453               	retlw	83	;'S'
   507  10C7  3474               	retlw	116	;'t'
   508  10C8  346F               	retlw	111	;'o'
   509  10C9  3470               	retlw	112	;'p'
   510  10CA  347C               	retlw	124	;'|'
   511  10CB  3400               	retlw	0
   512  10CC                     STR_11:
   513  10CC  3420               	retlw	32	;' '
   514  10CD  3454               	retlw	84	;'T'
   515  10CE  346F               	retlw	111	;'o'
   516  10CF  3463               	retlw	99	;'c'
   517  10D0  3420               	retlw	32	;' '
   518  10D1  3464               	retlw	100	;'d'
   519  10D2  346F               	retlw	111	;'o'
   520  10D3  3420               	retlw	32	;' '
   521  10D4  343D               	retlw	61	;'='
   522  10D5  3420               	retlw	32	;' '
   523  10D6  3425               	retlw	37	;'%'
   524  10D7  3430               	retlw	48	;'0'
   525  10D8  342E               	retlw	46	;'.'
   526  10D9  3430               	retlw	48	;'0'
   527  10DA  3466               	retlw	102	;'f'
   528  10DB  3420               	retlw	32	;' '
   529  10DC  3476               	retlw	118	;'v'
   530  10DD  342F               	retlw	47	;'/'
   531  10DE  3470               	retlw	112	;'p'
   532  10DF  3420               	retlw	32	;' '
   533  10E0  3400               	retlw	0
   534  10E1                     STR_7:
   535  10E1  3420               	retlw	32	;' '
   536  10E2  342D               	retlw	45	;'-'
   537  10E3  3441               	retlw	65	;'A'
   538  10E4  346E               	retlw	110	;'n'
   539  10E5  3474               	retlw	116	;'t'
   540  10E6  3469               	retlw	105	;'i'
   541  10E7  342D               	retlw	45	;'-'
   542  10E8  3463               	retlw	99	;'c'
   543  10E9  346C               	retlw	108	;'l'
   544  10EA  346F               	retlw	111	;'o'
   545  10EB  3463               	retlw	99	;'c'
   546  10EC  346B               	retlw	107	;'k'
   547  10ED  3477               	retlw	119	;'w'
   548  10EE  3469               	retlw	105	;'i'
   549  10EF  3473               	retlw	115	;'s'
   550  10F0  3465               	retlw	101	;'e'
   551  10F1  3420               	retlw	32	;' '
   552  10F2  3400               	retlw	0
   553  10F3                     STR_1:
   554  10F3  3445               	retlw	69	;'E'
   555  10F4  346E               	retlw	110	;'n'
   556  10F5  3474               	retlw	116	;'t'
   557  10F6  3465               	retlw	101	;'e'
   558  10F7  3472               	retlw	114	;'r'
   559  10F8  3420               	retlw	32	;' '
   560  10F9  3476               	retlw	118	;'v'
   561  10FA  3461               	retlw	97	;'a'
   562  10FB  346C               	retlw	108	;'l'
   563  10FC  3475               	retlw	117	;'u'
   564  10FD  3465               	retlw	101	;'e'
   565  10FE  3420               	retlw	32	;' '
   566  10FF  3466               	retlw	102	;'f'
   567  1100  3472               	retlw	114	;'r'
   568  1101  346F               	retlw	111	;'o'
   569  1102  346D               	retlw	109	;'m'
   570  1103  3400               	retlw	0
   571  1104                     STR_3:
   572  1104  3453               	retlw	83	;'S'
   573  1105  3470               	retlw	112	;'p'
   574  1106  3465               	retlw	101	;'e'
   575  1107  3465               	retlw	101	;'e'
   576  1108  3464               	retlw	100	;'d'
   577  1109  3420               	retlw	32	;' '
   578  110A  3475               	retlw	117	;'u'
   579  110B  3470               	retlw	112	;'p'
   580  110C  3464               	retlw	100	;'d'
   581  110D  3461               	retlw	97	;'a'
   582  110E  3474               	retlw	116	;'t'
   583  110F  3465               	retlw	101	;'e'
   584  1110  3464               	retlw	100	;'d'
   585  1111  3400               	retlw	0
   586  1112                     STR_4:
   587  1112  3449               	retlw	73	;'I'
   588  1113  346E               	retlw	110	;'n'
   589  1114  3476               	retlw	118	;'v'
   590  1115  3461               	retlw	97	;'a'
   591  1116  346C               	retlw	108	;'l'
   592  1117  3469               	retlw	105	;'i'
   593  1118  3464               	retlw	100	;'d'
   594  1119  3420               	retlw	32	;' '
   595  111A  3476               	retlw	118	;'v'
   596  111B  3461               	retlw	97	;'a'
   597  111C  346C               	retlw	108	;'l'
   598  111D  3475               	retlw	117	;'u'
   599  111E  3465               	retlw	101	;'e'
   600  111F  3400               	retlw	0
   601  1120                     STR_9:
   602  1120  3420               	retlw	32	;' '
   603  1121  3450               	retlw	80	;'P'
   604  1122  3472               	retlw	114	;'r'
   605  1123  3465               	retlw	101	;'e'
   606  1124  3473               	retlw	115	;'s'
   607  1125  3473               	retlw	115	;'s'
   608  1126  3420               	retlw	32	;' '
   609  1127  3461               	retlw	97	;'a'
   610  1128  3420               	retlw	32	;' '
   611  1129  3463               	retlw	99	;'c'
   612  112A  3468               	retlw	104	;'h'
   613  112B  3461               	retlw	97	;'a'
   614  112C  3472               	retlw	114	;'r'
   615  112D  3400               	retlw	0
   616  112E                     STR_5:
   617  112E  3420               	retlw	32	;' '
   618  112F  342D               	retlw	45	;'-'
   619  1130  3443               	retlw	67	;'C'
   620  1131  346C               	retlw	108	;'l'
   621  1132  346F               	retlw	111	;'o'
   622  1133  3463               	retlw	99	;'c'
   623  1134  346B               	retlw	107	;'k'
   624  1135  3477               	retlw	119	;'w'
   625  1136  3469               	retlw	105	;'i'
   626  1137  3473               	retlw	115	;'s'
   627  1138  3465               	retlw	101	;'e'
   628  1139  3420               	retlw	32	;' '
   629  113A  3400               	retlw	0
   630  113B                     STR_13:
   631  113B  3420               	retlw	32	;' '
   632  113C  3442               	retlw	66	;'B'
   633  113D  3461               	retlw	97	;'a'
   634  113E  346D               	retlw	109	;'m'
   635  113F  3420               	retlw	32	;' '
   636  1140  3431               	retlw	49	;'1'
   637  1141  3420               	retlw	32	;' '
   638  1142  346B               	retlw	107	;'k'
   639  1143  3479               	retlw	121	;'y'
   640  1144  3420               	retlw	32	;' '
   641  1145  3474               	retlw	116	;'t'
   642  1146  3475               	retlw	117	;'u'
   643  1147  3400               	retlw	0
   644  1148                     STR_8:
   645  1148  3420               	retlw	32	;' '
   646  1149  3451               	retlw	81	;'Q'
   647  114A  3475               	retlw	117	;'u'
   648  114B  3461               	retlw	97	;'a'
   649  114C  3479               	retlw	121	;'y'
   650  114D  3420               	retlw	32	;' '
   651  114E  346E               	retlw	110	;'n'
   652  114F  3467               	retlw	103	;'g'
   653  1150  3475               	retlw	117	;'u'
   654  1151  346F               	retlw	111	;'o'
   655  1152  3463               	retlw	99	;'c'
   656  1153  3400               	retlw	0
   657  1154                     STR_6:
   658  1154  3420               	retlw	32	;' '
   659  1155  3451               	retlw	81	;'Q'
   660  1156  3475               	retlw	117	;'u'
   661  1157  3461               	retlw	97	;'a'
   662  1158  3479               	retlw	121	;'y'
   663  1159  3420               	retlw	32	;' '
   664  115A  3474               	retlw	116	;'t'
   665  115B  3468               	retlw	104	;'h'
   666  115C  3475               	retlw	117	;'u'
   667  115D  3461               	retlw	97	;'a'
   668  115E  346E               	retlw	110	;'n'
   669  115F  3400               	retlw	0
   670  1160                     STR_2:
   671  1160  3430               	retlw	48	;'0'
   672  1161  342D               	retlw	45	;'-'
   673  1162  3431               	retlw	49	;'1'
   674  1163  3430               	retlw	48	;'0'
   675  1164  3430               	retlw	48	;'0'
   676  1165  343A               	retlw	58	;':'
   677  1166  3420               	retlw	32	;' '
   678  1167  3400               	retlw	0
   679  1088                     
   680                           	psect	cinit
   681  000F                     start_initialization:	
   682                           ; #config settings
   683                           
   684  000F                     __initialization:
   685                           
   686                           ; Initialize objects allocated to COMMON
   687  000F  120A  118A  2003  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
   688  0014  00FB               	movwf	__pdataCOMMON& (0+127)
   689                           
   690                           ; Clear objects allocated to BANK1
   691  0015  1383               	bcf	3,7	;select IRP bank0
   692  0016  30A0               	movlw	low __pbssBANK1
   693  0017  0084               	movwf	4
   694  0018  30BD               	movlw	low (__pbssBANK1+29)
   695  0019  120A  118A  27F8   	fcall	clear_ram0
   696                           
   697                           ; Clear objects allocated to BANK0
   698  001C  01EA               	clrf	__pbssBANK0& (0+127)
   699  001D  01EB               	clrf	(__pbssBANK0+1)& (0+127)
   700  001E  01EC               	clrf	(__pbssBANK0+2)& (0+127)
   701  001F  01ED               	clrf	(__pbssBANK0+3)& (0+127)
   702  0020  01EE               	clrf	(__pbssBANK0+4)& (0+127)
   703  0021  01EF               	clrf	(__pbssBANK0+5)& (0+127)
   704  0022                     end_of_initialization:	
   705                           ;End of C runtime variable initialization code
   706                           
   707  0022                     __end_of__initialization:
   708  0022  0183               	clrf	3
   709  0023  120A  118A  2EFE   	ljmp	_main	;jump to C main() function
   710                           
   711                           	psect	dataCOMMON
   712  007B                     __pdataCOMMON:
   713  007B                     _k:
   714  007B                     	ds	1
   715                           
   716                           	psect	bssBANK0
   717  006A                     __pbssBANK0:
   718  006A                     _input:
   719  006A                     	ds	2
   720  006C                     _xungdem:
   721  006C                     	ds	2
   722  006E                     _xungdo:
   723  006E                     	ds	2
   724                           
   725                           	psect	bssBANK1
   726  00A0                     __pbssBANK1:
   727  00A0                     _tocdo:
   728  00A0                     	ds	3
   729  00A3                     _enter:
   730  00A3                     	ds	2
   731  00A5                     _str:
   732  00A5                     	ds	20
   733  00B9                     _frequency:
   734  00B9                     	ds	4
   735                           
   736                           	psect	clrtext
   737  07F8                     clear_ram0:	
   738                           ;	Called with FSR containing the base address, and
   739                           ;	W with the last address+1
   740                           
   741  07F8  0064               	clrwdt	;clear the watchdog before getting into this loop
   742  07F9                     clrloop0:
   743  07F9  0180               	clrf	0	;clear RAM location pointed to by FSR
   744  07FA  0A84               	incf	4,f	;increment pointer
   745  07FB  0604               	xorwf	4,w	;XOR with final address
   746  07FC  1903               	btfsc	3,2	;have we reached the end yet?
   747  07FD  3400               	retlw	0	;all done for this memory range, return
   748  07FE  0604               	xorwf	4,w	;XOR again to restore value
   749  07FF  2FF9               	goto	clrloop0	;do the next byte
   750                           
   751                           	psect	cstackBANK1
   752  00BD                     __pcstackBANK1:
   753  00BD                     _sprintf$1157:
   754                           
   755                           ; 3 bytes @ 0x0
   756  00BD                     	ds	3
   757  00C0                     sprintf@ap:
   758                           
   759                           ; 1 bytes @ 0x3
   760  00C0                     	ds	1
   761  00C1                     sprintf@val:
   762                           
   763                           ; 4 bytes @ 0x4
   764  00C1                     	ds	4
   765  00C5                     sprintf@tmpval:
   766                           
   767                           ; 4 bytes @ 0x8
   768  00C5                     	ds	4
   769  00C9                     sprintf@eexp:
   770                           
   771                           ; 2 bytes @ 0xC
   772  00C9                     	ds	2
   773  00CB                     sprintf@flag:
   774                           
   775                           ; 2 bytes @ 0xE
   776  00CB                     	ds	2
   777  00CD                     sprintf@width:
   778                           
   779                           ; 2 bytes @ 0x10
   780  00CD                     	ds	2
   781  00CF                     sprintf@fval:
   782                           
   783                           ; 3 bytes @ 0x12
   784  00CF                     	ds	3
   785  00D2                     sprintf@prec:
   786                           
   787                           ; 2 bytes @ 0x15
   788  00D2                     	ds	2
   789  00D4                     sprintf@sp:
   790                           
   791                           ; 1 bytes @ 0x17
   792  00D4                     	ds	1
   793  00D5                     sprintf@c:
   794                           
   795                           ; 1 bytes @ 0x18
   796  00D5                     	ds	1
   797                           
   798                           	psect	cstackCOMMON
   799  0070                     __pcstackCOMMON:
   800  0070                     ?_isdigit:
   801  0070                     ?_UART_init:	
   802                           ; 1 bit 
   803                           
   804  0070                     ?_UART_send_char:	
   805                           ; 1 bytes @ 0x0
   806                           
   807  0070                     ?_PWM1_start:	
   808                           ; 1 bytes @ 0x0
   809                           
   810  0070                     ?_Keypad_init:	
   811                           ; 1 bytes @ 0x0
   812                           
   813  0070                     ?_keypad_scanner:	
   814                           ; 1 bytes @ 0x0
   815                           
   816  0070                     ?_switch_press_scan:	
   817                           ; 1 bytes @ 0x0
   818                           
   819  0070                     ?_Lcd_Port:	
   820                           ; 1 bytes @ 0x0
   821                           
   822  0070                     ?_Lcd_Cmd:	
   823                           ; 1 bytes @ 0x0
   824                           
   825  0070                     ?_Lcd_Init:	
   826                           ; 1 bytes @ 0x0
   827                           
   828  0070                     ?_Lcd_Write_Char:	
   829                           ; 1 bytes @ 0x0
   830                           
   831  0070                     ?_timer1:	
   832                           ; 1 bytes @ 0x0
   833                           
   834  0070                     ?_ngat_init:	
   835                           ; 1 bytes @ 0x0
   836                           
   837  0070                     ?_timer0_init:	
   838                           ; 1 bytes @ 0x0
   839                           
   840  0070                     ?_NGAT:	
   841                           ; 1 bytes @ 0x0
   842                           
   843  0070                     ??_NGAT:	
   844                           ; 1 bytes @ 0x0
   845                           
   846  0070                     ?_Speed:	
   847                           ; 1 bytes @ 0x0
   848                           
   849  0070                     ?_SwitchMode:	
   850                           ; 1 bytes @ 0x0
   851                           
   852  0070                     ?_main:	
   853                           ; 1 bytes @ 0x0
   854                           
   855  0070                     ?_Lcd_Clear:	
   856                           ; 1 bytes @ 0x0
   857                           
   858                           
   859                           ; 2 bytes @ 0x0
   860  0070                     	ds	2
   861  0072                     ?___ftge:
   862  0072                     ??_isdigit:	
   863                           ; 1 bit 
   864                           
   865  0072                     ??_UART_init:	
   866                           ; 1 bytes @ 0x2
   867                           
   868  0072                     ??_UART_send_char:	
   869                           ; 1 bytes @ 0x2
   870                           
   871  0072                     ??_PWM1_start:	
   872                           ; 1 bytes @ 0x2
   873                           
   874  0072                     ??_Keypad_init:	
   875                           ; 1 bytes @ 0x2
   876                           
   877  0072                     ??_keypad_scanner:	
   878                           ; 1 bytes @ 0x2
   879                           
   880  0072                     ??_Lcd_Port:	
   881                           ; 1 bytes @ 0x2
   882                           
   883  0072                     ??_timer1:	
   884                           ; 1 bytes @ 0x2
   885                           
   886  0072                     ??_ngat_init:	
   887                           ; 1 bytes @ 0x2
   888                           
   889  0072                     ??_timer0_init:	
   890                           ; 1 bytes @ 0x2
   891                           
   892  0072                     ?___lbmod:	
   893                           ; 1 bytes @ 0x2
   894                           
   895  0072                     ?___awmod:	
   896                           ; 1 bytes @ 0x2
   897                           
   898  0072                     ?___ftpack:	
   899                           ; 2 bytes @ 0x2
   900                           
   901  0072                     ?___ftneg:	
   902                           ; 3 bytes @ 0x2
   903                           
   904  0072                     ?__tdiv_to_l_:	
   905                           ; 3 bytes @ 0x2
   906                           
   907  0072                     ?__div_to_l_:	
   908                           ; 4 bytes @ 0x2
   909                           
   910  0072                     ?___lmul:	
   911                           ; 4 bytes @ 0x2
   912                           
   913  0072                     ?___lldiv:	
   914                           ; 4 bytes @ 0x2
   915                           
   916  0072                     ?___aldiv:	
   917                           ; 4 bytes @ 0x2
   918                           
   919  0072                     ?___llmod:	
   920                           ; 4 bytes @ 0x2
   921                           
   922  0072                     UART_send_char@bt:	
   923                           ; 4 bytes @ 0x2
   924                           
   925  0072                     Lcd_Port@a:	
   926                           ; 1 bytes @ 0x2
   927                           
   928  0072                     ___lbmod@divisor:	
   929                           ; 1 bytes @ 0x2
   930                           
   931  0072                     _isdigit$895:	
   932                           ; 1 bytes @ 0x2
   933                           
   934  0072                     ___awmod@divisor:	
   935                           ; 1 bytes @ 0x2
   936                           
   937  0072                     __div_to_l_@f1:	
   938                           ; 2 bytes @ 0x2
   939                           
   940  0072                     ___ftpack@arg:	
   941                           ; 3 bytes @ 0x2
   942                           
   943  0072                     __tdiv_to_l_@f1:	
   944                           ; 3 bytes @ 0x2
   945                           
   946  0072                     ___ftge@ff1:	
   947                           ; 3 bytes @ 0x2
   948                           
   949  0072                     ___ftneg@f1:	
   950                           ; 3 bytes @ 0x2
   951                           
   952  0072                     ___lmul@multiplier:	
   953                           ; 3 bytes @ 0x2
   954                           
   955  0072                     ___lldiv@divisor:	
   956                           ; 4 bytes @ 0x2
   957                           
   958  0072                     ___aldiv@divisor:	
   959                           ; 4 bytes @ 0x2
   960                           
   961  0072                     ___llmod@divisor:	
   962                           ; 4 bytes @ 0x2
   963                           
   964                           
   965                           ; 4 bytes @ 0x2
   966  0072                     	ds	1
   967  0073                     ?_UART_send_string:
   968  0073                     ??_Lcd_Cmd:	
   969                           ; 1 bytes @ 0x3
   970                           
   971  0073                     ??_Lcd_Write_Char:	
   972                           ; 1 bytes @ 0x3
   973                           
   974  0073                     ??___lbmod:	
   975                           ; 1 bytes @ 0x3
   976                           
   977  0073                     isdigit@c:	
   978                           ; 1 bytes @ 0x3
   979                           
   980  0073                     UART_send_string@st_pt:	
   981                           ; 1 bytes @ 0x3
   982                           
   983                           
   984                           ; 2 bytes @ 0x3
   985  0073                     	ds	1
   986  0074                     Lcd_Write_Char@temp:
   987  0074                     ___awmod@dividend:	
   988                           ; 1 bytes @ 0x4
   989                           
   990                           
   991                           ; 2 bytes @ 0x4
   992  0074                     	ds	1
   993  0075                     ??_UART_send_string:
   994  0075                     ??_switch_press_scan:	
   995                           ; 1 bytes @ 0x5
   996                           
   997  0075                     ??___ftneg:	
   998                           ; 1 bytes @ 0x5
   999                           
  1000  0075                     switch_press_scan@key:	
  1001                           ; 1 bytes @ 0x5
  1002                           
  1003  0075                     Lcd_Cmd@a:	
  1004                           ; 1 bytes @ 0x5
  1005                           
  1006  0075                     Lcd_Write_Char@y:	
  1007                           ; 1 bytes @ 0x5
  1008                           
  1009  0075                     ___ftpack@exp:	
  1010                           ; 1 bytes @ 0x5
  1011                           
  1012  0075                     ___lbmod@dividend:	
  1013                           ; 1 bytes @ 0x5
  1014                           
  1015  0075                     __div_to_l_@f2:	
  1016                           ; 1 bytes @ 0x5
  1017                           
  1018  0075                     __tdiv_to_l_@f2:	
  1019                           ; 3 bytes @ 0x5
  1020                           
  1021  0075                     ___ftge@ff2:	
  1022                           ; 3 bytes @ 0x5
  1023                           
  1024                           
  1025                           ; 3 bytes @ 0x5
  1026  0075                     	ds	1
  1027  0076                     ??_Lcd_Clear:
  1028  0076                     ?_Lcd_Set_Cursor:	
  1029                           ; 1 bytes @ 0x6
  1030                           
  1031  0076                     ??_Lcd_Init:	
  1032                           ; 1 bytes @ 0x6
  1033                           
  1034  0076                     ??___awmod:	
  1035                           ; 1 bytes @ 0x6
  1036                           
  1037  0076                     Lcd_Set_Cursor@b:	
  1038                           ; 1 bytes @ 0x6
  1039                           
  1040  0076                     Lcd_Write_Char@a:	
  1041                           ; 1 bytes @ 0x6
  1042                           
  1043  0076                     ___awmod@counter:	
  1044                           ; 1 bytes @ 0x6
  1045                           
  1046  0076                     ___ftpack@sign:	
  1047                           ; 1 bytes @ 0x6
  1048                           
  1049  0076                     ___lbmod@counter:	
  1050                           ; 1 bytes @ 0x6
  1051                           
  1052  0076                     ___lmul@multiplicand:	
  1053                           ; 1 bytes @ 0x6
  1054                           
  1055  0076                     ___lldiv@dividend:	
  1056                           ; 4 bytes @ 0x6
  1057                           
  1058  0076                     ___aldiv@dividend:	
  1059                           ; 4 bytes @ 0x6
  1060                           
  1061  0076                     ___llmod@dividend:	
  1062                           ; 4 bytes @ 0x6
  1063                           
  1064                           
  1065                           ; 4 bytes @ 0x6
  1066  0076                     	ds	1
  1067  0077                     ??___ftpack:
  1068  0077                     ??_Lcd_Set_Cursor:	
  1069                           ; 1 bytes @ 0x7
  1070                           
  1071  0077                     ?_Lcd_Write_String:	
  1072                           ; 1 bytes @ 0x7
  1073                           
  1074  0077                     ___awmod@sign:	
  1075                           ; 1 bytes @ 0x7
  1076                           
  1077  0077                     ___lbmod@rem:	
  1078                           ; 1 bytes @ 0x7
  1079                           
  1080  0077                     Lcd_Write_String@a:	
  1081                           ; 1 bytes @ 0x7
  1082                           
  1083                           
  1084                           ; 2 bytes @ 0x7
  1085  0077                     	ds	1
  1086  0078                     ??__tdiv_to_l_:
  1087  0078                     ??___awdiv:	
  1088                           ; 1 bytes @ 0x8
  1089                           
  1090  0078                     ??___ftge:	
  1091                           ; 1 bytes @ 0x8
  1092                           
  1093  0078                     ?___lbdiv:	
  1094                           ; 1 bytes @ 0x8
  1095                           
  1096  0078                     ___lbdiv@divisor:	
  1097                           ; 1 bytes @ 0x8
  1098                           
  1099                           
  1100                           ; 1 bytes @ 0x8
  1101  0078                     	ds	1
  1102  0079                     ??___bmul:
  1103  0079                     ??___lbdiv:	
  1104                           ; 1 bytes @ 0x9
  1105                           
  1106  0079                     ___bmul@product:	
  1107                           ; 1 bytes @ 0x9
  1108                           
  1109  0079                     Lcd_Write_String@i:	
  1110                           ; 1 bytes @ 0x9
  1111                           
  1112                           
  1113                           ; 2 bytes @ 0x9
  1114  0079                     	ds	1
  1115  007A                     ??___lmul:
  1116  007A                     ??___lldiv:	
  1117                           ; 1 bytes @ 0xA
  1118                           
  1119  007A                     ??___aldiv:	
  1120                           ; 1 bytes @ 0xA
  1121                           
  1122  007A                     ??___llmod:	
  1123                           ; 1 bytes @ 0xA
  1124                           
  1125  007A                     ??___lltoft:	
  1126                           ; 1 bytes @ 0xA
  1127                           
  1128  007A                     ??___lwtoft:	
  1129                           ; 1 bytes @ 0xA
  1130                           
  1131  007A                     ___bmul@multiplier:	
  1132                           ; 1 bytes @ 0xA
  1133                           
  1134  007A                     ___lltoft@exp:	
  1135                           ; 1 bytes @ 0xA
  1136                           
  1137                           
  1138                           ; 1 bytes @ 0xA
  1139  007A                     	ds	1
  1140  007B                     ??_SwitchMode:
  1141  007B                     ??_fround:	
  1142                           ; 1 bytes @ 0xB
  1143                           
  1144  007B                     ??_scale:	
  1145                           ; 1 bytes @ 0xB
  1146                           
  1147  007B                     ??___wmul:	
  1148                           ; 1 bytes @ 0xB
  1149                           
  1150  007B                     ??___awtoft:	
  1151                           ; 1 bytes @ 0xB
  1152                           
  1153  007B                     ??___ftsub:	
  1154                           ; 1 bytes @ 0xB
  1155                           
  1156                           
  1157                           	psect	cstackBANK0
  1158  0020                     __pcstackBANK0:	
  1159                           ; 1 bytes @ 0xB
  1160                           
  1161  0020                     ??__div_to_l_:
  1162  0020                     ??_Lcd_Write_String:	
  1163                           ; 1 bytes @ 0x0
  1164                           
  1165  0020                     ?___awdiv:	
  1166                           ; 1 bytes @ 0x0
  1167                           
  1168  0020                     ?___lltoft:	
  1169                           ; 2 bytes @ 0x0
  1170                           
  1171  0020                     ?___lwtoft:	
  1172                           ; 3 bytes @ 0x0
  1173                           
  1174  0020                     Lcd_Set_Cursor@a:	
  1175                           ; 3 bytes @ 0x0
  1176                           
  1177  0020                     ___aldiv@counter:	
  1178                           ; 1 bytes @ 0x0
  1179                           
  1180  0020                     ___lbdiv@dividend:	
  1181                           ; 1 bytes @ 0x0
  1182                           
  1183  0020                     ___llmod@counter:	
  1184                           ; 1 bytes @ 0x0
  1185                           
  1186  0020                     ___awdiv@divisor:	
  1187                           ; 1 bytes @ 0x0
  1188                           
  1189  0020                     ___lwtoft@c:	
  1190                           ; 2 bytes @ 0x0
  1191                           
  1192  0020                     ___lmul@product:	
  1193                           ; 2 bytes @ 0x0
  1194                           
  1195  0020                     ___lldiv@quotient:	
  1196                           ; 4 bytes @ 0x0
  1197                           
  1198  0020                     __tdiv_to_l_@quot:	
  1199                           ; 4 bytes @ 0x0
  1200                           
  1201  0020                     ___lltoft@c:	
  1202                           ; 4 bytes @ 0x0
  1203                           
  1204                           
  1205                           ; 4 bytes @ 0x0
  1206  0020                     	ds	1
  1207  0021                     Lcd_Set_Cursor@z:
  1208  0021                     ___aldiv@sign:	
  1209                           ; 1 bytes @ 0x1
  1210                           
  1211  0021                     ___lbdiv@counter:	
  1212                           ; 1 bytes @ 0x1
  1213                           
  1214                           
  1215                           ; 1 bytes @ 0x1
  1216  0021                     	ds	1
  1217  0022                     Lcd_Set_Cursor@y:
  1218  0022                     ___lbdiv@quotient:	
  1219                           ; 1 bytes @ 0x2
  1220                           
  1221  0022                     ___awdiv@dividend:	
  1222                           ; 1 bytes @ 0x2
  1223                           
  1224  0022                     ___aldiv@quotient:	
  1225                           ; 2 bytes @ 0x2
  1226                           
  1227                           
  1228                           ; 4 bytes @ 0x2
  1229  0022                     	ds	1
  1230  0023                     Lcd_Set_Cursor@temp:
  1231                           
  1232                           ; 1 bytes @ 0x3
  1233  0023                     	ds	1
  1234  0024                     ?_convert:
  1235  0024                     ___lldiv@counter:	
  1236                           ; 4 bytes @ 0x4
  1237                           
  1238  0024                     ___awdiv@counter:	
  1239                           ; 1 bytes @ 0x4
  1240                           
  1241  0024                     __tdiv_to_l_@cntr:	
  1242                           ; 1 bytes @ 0x4
  1243                           
  1244  0024                     convert@b:	
  1245                           ; 1 bytes @ 0x4
  1246                           
  1247                           
  1248                           ; 4 bytes @ 0x4
  1249  0024                     	ds	1
  1250  0025                     ___awdiv@sign:
  1251  0025                     __tdiv_to_l_@exp1:	
  1252                           ; 1 bytes @ 0x5
  1253                           
  1254                           
  1255                           ; 1 bytes @ 0x5
  1256  0025                     	ds	1
  1257  0026                     ?_PWM1_init:
  1258  0026                     ?_PWM_Max_Duty:	
  1259                           ; 1 bytes @ 0x6
  1260                           
  1261  0026                     ___awdiv@quotient:	
  1262                           ; 2 bytes @ 0x6
  1263                           
  1264  0026                     PWM1_init@freq:	
  1265                           ; 2 bytes @ 0x6
  1266                           
  1267                           
  1268                           ; 4 bytes @ 0x6
  1269  0026                     	ds	2
  1270  0028                     ??_PWM_Max_Duty:
  1271  0028                     ??_convert:	
  1272                           ; 1 bytes @ 0x8
  1273                           
  1274  0028                     ?___bmul:	
  1275                           ; 1 bytes @ 0x8
  1276                           
  1277  0028                     ___bmul@multiplicand:	
  1278                           ; 1 bytes @ 0x8
  1279                           
  1280  0028                     __div_to_l_@quot:	
  1281                           ; 1 bytes @ 0x8
  1282                           
  1283                           
  1284                           ; 4 bytes @ 0x8
  1285  0028                     	ds	2
  1286  002A                     ??_PWM1_init:
  1287                           
  1288                           ; 1 bytes @ 0xA
  1289  002A                     	ds	2
  1290  002C                     ?___awtoft:
  1291  002C                     __div_to_l_@cntr:	
  1292                           ; 3 bytes @ 0xC
  1293                           
  1294  002C                     convert@i:	
  1295                           ; 1 bytes @ 0xC
  1296                           
  1297  002C                     ___awtoft@c:	
  1298                           ; 2 bytes @ 0xC
  1299                           
  1300                           
  1301                           ; 2 bytes @ 0xC
  1302  002C                     	ds	1
  1303  002D                     __div_to_l_@exp1:
  1304                           
  1305                           ; 1 bytes @ 0xD
  1306  002D                     	ds	1
  1307  002E                     convert@a:
  1308                           
  1309                           ; 4 bytes @ 0xE
  1310  002E                     	ds	1
  1311  002F                     ___awtoft@sign:
  1312                           
  1313                           ; 1 bytes @ 0xF
  1314  002F                     	ds	1
  1315  0030                     ?___ftmul:
  1316  0030                     ___ftmul@f1:	
  1317                           ; 3 bytes @ 0x10
  1318                           
  1319                           
  1320                           ; 3 bytes @ 0x10
  1321  0030                     	ds	2
  1322  0032                     ?___wmul:
  1323  0032                     ___wmul@multiplier:	
  1324                           ; 2 bytes @ 0x12
  1325                           
  1326                           
  1327                           ; 2 bytes @ 0x12
  1328  0032                     	ds	1
  1329  0033                     ___ftmul@f2:
  1330                           
  1331                           ; 3 bytes @ 0x13
  1332  0033                     	ds	1
  1333  0034                     ___wmul@multiplicand:
  1334                           
  1335                           ; 2 bytes @ 0x14
  1336  0034                     	ds	2
  1337  0036                     ??___ftmul:
  1338  0036                     ___wmul@product:	
  1339                           ; 1 bytes @ 0x16
  1340                           
  1341                           
  1342                           ; 2 bytes @ 0x16
  1343  0036                     	ds	2
  1344  0038                     ?_inputValue:
  1345                           
  1346                           ; 2 bytes @ 0x18
  1347  0038                     	ds	1
  1348  0039                     ___ftmul@exp:
  1349                           
  1350                           ; 1 bytes @ 0x19
  1351  0039                     	ds	1
  1352  003A                     ??_inputValue:
  1353  003A                     ___ftmul@f3_as_product:	
  1354                           ; 1 bytes @ 0x1A
  1355                           
  1356                           
  1357                           ; 3 bytes @ 0x1A
  1358  003A                     	ds	3
  1359  003D                     ___ftmul@cntr:
  1360  003D                     inputValue@arr:	
  1361                           ; 1 bytes @ 0x1D
  1362                           
  1363                           
  1364                           ; 20 bytes @ 0x1D
  1365  003D                     	ds	1
  1366  003E                     ___ftmul@sign:
  1367                           
  1368                           ; 1 bytes @ 0x1E
  1369  003E                     	ds	1
  1370  003F                     ?_fround:
  1371  003F                     ?_scale:	
  1372                           ; 3 bytes @ 0x1F
  1373                           
  1374  003F                     ?___ftdiv:	
  1375                           ; 3 bytes @ 0x1F
  1376                           
  1377  003F                     ___ftdiv@f2:	
  1378                           ; 3 bytes @ 0x1F
  1379                           
  1380                           
  1381                           ; 3 bytes @ 0x1F
  1382  003F                     	ds	3
  1383  0042                     ___ftdiv@f1:
  1384                           
  1385                           ; 3 bytes @ 0x22
  1386  0042                     	ds	1
  1387  0043                     _fround$1155:
  1388  0043                     _scale$1156:	
  1389                           ; 3 bytes @ 0x23
  1390                           
  1391                           
  1392                           ; 3 bytes @ 0x23
  1393  0043                     	ds	2
  1394  0045                     ??___ftdiv:
  1395                           
  1396                           ; 1 bytes @ 0x25
  1397  0045                     	ds	1
  1398  0046                     scale@scl:
  1399  0046                     _fround$1154:	
  1400                           ; 1 bytes @ 0x26
  1401                           
  1402                           
  1403                           ; 3 bytes @ 0x26
  1404  0046                     	ds	2
  1405  0048                     ___ftdiv@cntr:
  1406                           
  1407                           ; 1 bytes @ 0x28
  1408  0048                     	ds	1
  1409  0049                     fround@prec:
  1410  0049                     ___ftdiv@f3:	
  1411                           ; 1 bytes @ 0x29
  1412                           
  1413                           
  1414                           ; 3 bytes @ 0x29
  1415  0049                     	ds	1
  1416  004A                     ?___ftadd:
  1417  004A                     ___ftadd@f1:	
  1418                           ; 3 bytes @ 0x2A
  1419                           
  1420                           
  1421                           ; 3 bytes @ 0x2A
  1422  004A                     	ds	2
  1423  004C                     ___ftdiv@exp:
  1424                           
  1425                           ; 1 bytes @ 0x2C
  1426  004C                     	ds	1
  1427  004D                     ___ftdiv@sign:
  1428  004D                     ___ftadd@f2:	
  1429                           ; 1 bytes @ 0x2D
  1430                           
  1431                           
  1432                           ; 3 bytes @ 0x2D
  1433  004D                     	ds	1
  1434  004E                     ?___fttol:
  1435  004E                     ___fttol@f1:	
  1436                           ; 4 bytes @ 0x2E
  1437                           
  1438                           
  1439                           ; 3 bytes @ 0x2E
  1440  004E                     	ds	2
  1441  0050                     ??___ftadd:
  1442                           
  1443                           ; 1 bytes @ 0x30
  1444  0050                     	ds	1
  1445  0051                     inputValue@inputInt:
  1446                           
  1447                           ; 2 bytes @ 0x31
  1448  0051                     	ds	1
  1449  0052                     ??___fttol:
  1450                           
  1451                           ; 1 bytes @ 0x32
  1452  0052                     	ds	1
  1453  0053                     ___ftadd@sign:
  1454  0053                     inputValue@i:	
  1455                           ; 1 bytes @ 0x33
  1456                           
  1457                           
  1458                           ; 2 bytes @ 0x33
  1459  0053                     	ds	1
  1460  0054                     ___ftadd@exp2:
  1461                           
  1462                           ; 1 bytes @ 0x34
  1463  0054                     	ds	1
  1464  0055                     ___ftadd@exp1:
  1465  0055                     ___fttol@sign1:	
  1466                           ; 1 bytes @ 0x35
  1467                           
  1468  0055                     inputValue@dem:	
  1469                           ; 1 bytes @ 0x35
  1470                           
  1471                           
  1472                           ; 2 bytes @ 0x35
  1473  0055                     	ds	1
  1474  0056                     ?___ftsub:
  1475  0056                     ___ftsub@f2:	
  1476                           ; 3 bytes @ 0x36
  1477                           
  1478  0056                     ___fttol@lval:	
  1479                           ; 3 bytes @ 0x36
  1480                           
  1481                           
  1482                           ; 4 bytes @ 0x36
  1483  0056                     	ds	1
  1484  0057                     inputValue@k:
  1485                           
  1486                           ; 1 bytes @ 0x37
  1487  0057                     	ds	1
  1488  0058                     ??_Speed:
  1489                           
  1490                           ; 1 bytes @ 0x38
  1491  0058                     	ds	1
  1492  0059                     ___ftsub@f1:
  1493                           
  1494                           ; 3 bytes @ 0x39
  1495  0059                     	ds	1
  1496  005A                     ___fttol@exp1:
  1497                           
  1498                           ; 1 bytes @ 0x3A
  1499  005A                     	ds	1
  1500  005B                     ?_PWM1_Set_duty:
  1501  005B                     PWM1_Set_duty@duty:	
  1502                           ; 1 bytes @ 0x3B
  1503                           
  1504                           
  1505                           ; 2 bytes @ 0x3B
  1506  005B                     	ds	1
  1507  005C                     ?_sprintf:
  1508  005C                     sprintf@f:	
  1509                           ; 2 bytes @ 0x3C
  1510                           
  1511                           
  1512                           ; 2 bytes @ 0x3C
  1513  005C                     	ds	1
  1514  005D                     ??_PWM1_Set_duty:
  1515                           
  1516                           ; 1 bytes @ 0x3D
  1517  005D                     	ds	4
  1518  0061                     ??_sprintf:
  1519                           
  1520                           ; 1 bytes @ 0x41
  1521  0061                     	ds	6
  1522  0067                     ??_main:
  1523                           
  1524                           ; 1 bytes @ 0x47
  1525  0067                     	ds	3
  1526                           
  1527                           	psect	maintext
  1528  06FE                     __pmaintext:	
  1529 ;;
  1530 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1531 ;;
  1532 ;; *************** function _main *****************
  1533 ;; Defined at:
  1534 ;;		line 273 in file "main.c"
  1535 ;; Parameters:    Size  Location     Type
  1536 ;;		None
  1537 ;; Auto vars:     Size  Location     Type
  1538 ;;		None
  1539 ;; Return value:  Size  Location     Type
  1540 ;;                  1    wreg      void 
  1541 ;; Registers used:
  1542 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1543 ;; Tracked objects:
  1544 ;;		On entry : B00/0
  1545 ;;		On exit  : 0/0
  1546 ;;		Unchanged: 0/0
  1547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1548 ;;      Params:         0       0       0       0       0
  1549 ;;      Locals:         0       0       0       0       0
  1550 ;;      Temps:          0       3       0       0       0
  1551 ;;      Totals:         0       3       0       0       0
  1552 ;;Total ram usage:        3 bytes
  1553 ;; Hardware stack levels required when called:    6
  1554 ;; This function calls:
  1555 ;;		_Keypad_init
  1556 ;;		_Lcd_Clear
  1557 ;;		_Lcd_Init
  1558 ;;		_Lcd_Set_Cursor
  1559 ;;		_Lcd_Write_String
  1560 ;;		_PWM1_Set_duty
  1561 ;;		_PWM1_init
  1562 ;;		_PWM1_start
  1563 ;;		_Speed
  1564 ;;		_SwitchMode
  1565 ;;		_UART_init
  1566 ;;		_UART_send_string
  1567 ;;		___ftdiv
  1568 ;;		___ftmul
  1569 ;;		___lwtoft
  1570 ;;		_ngat_init
  1571 ;;		_sprintf
  1572 ;;		_timer0_init
  1573 ;;		_timer1
  1574 ;; This function is called by:
  1575 ;;		Startup code after reset
  1576 ;; This function uses a non-reentrant model
  1577 ;;
  1578                           
  1579                           
  1580                           ;psect for function _main
  1581  06FE                     _main:
  1582                           
  1583                           ;main.c: 275: TRISC = 0x00;
  1584                           
  1585                           ;incstack = 0
  1586                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1587  06FE  1683               	bsf	3,5	;RP0=1, select bank1
  1588  06FF  0187               	clrf	7	;volatile
  1589                           
  1590                           ;main.c: 276: TRISD = 0x00;
  1591  0700  0188               	clrf	8	;volatile
  1592                           
  1593                           ;main.c: 277: TRISB0 = 1;
  1594  0701  1406               	bsf	6,0	;volatile
  1595                           
  1596                           ;main.c: 278: TRISC5 = 1;
  1597  0702  1687               	bsf	7,5	;volatile
  1598                           
  1599                           ;main.c: 279: PORTC = 0;
  1600  0703  1283               	bcf	3,5	;RP0=0, select bank0
  1601  0704  0187               	clrf	7	;volatile
  1602                           
  1603                           ;main.c: 281: Keypad_init();
  1604  0705  160A  158A  23E9  120A  118A  	fcall	_Keypad_init
  1605                           
  1606                           ;main.c: 282: Lcd_Init();
  1607  070A  160A  158A  2745  120A  118A  	fcall	_Lcd_Init
  1608                           
  1609                           ;main.c: 283: PWM1_init(5000);
  1610  070F  3000               	movlw	0
  1611  0710  00A9               	movwf	PWM1_init@freq+3
  1612  0711  3000               	movlw	0
  1613  0712  00A8               	movwf	PWM1_init@freq+2
  1614  0713  3013               	movlw	19
  1615  0714  00A7               	movwf	PWM1_init@freq+1
  1616  0715  3088               	movlw	136
  1617  0716  00A6               	movwf	PWM1_init@freq
  1618  0717  160A  158A  2574  120A  118A  	fcall	_PWM1_init
  1619                           
  1620                           ;main.c: 284: PWM1_start();
  1621  071C  160A  158A  22B4  120A  118A  	fcall	_PWM1_start
  1622                           
  1623                           ;main.c: 285: Lcd_Clear();
  1624  0721  160A  158A  22C3  120A  118A  	fcall	_Lcd_Clear
  1625                           
  1626                           ;main.c: 286: UART_init();
  1627  0726  160A  158A  230D  120A  118A  	fcall	_UART_init
  1628                           
  1629                           ;main.c: 287: Speed();
  1630  072B  160A  118A  22EC  120A  118A  	fcall	_Speed
  1631                           
  1632                           ;main.c: 288: timer1();
  1633  0730  160A  158A  22EC  120A  118A  	fcall	_timer1
  1634                           
  1635                           ;main.c: 289: ngat_init();
  1636  0735  160A  158A  22A8  120A  118A  	fcall	_ngat_init
  1637                           
  1638                           ;main.c: 290: timer0_init();
  1639  073A  160A  158A  22AE  120A  118A  	fcall	_timer0_init
  1640                           
  1641                           ;main.c: 292: Lcd_Write_String(" Press a char");
  1642  073F  3020               	movlw	low (STR_9| (0+32768))
  1643  0740  00F7               	movwf	Lcd_Write_String@a
  1644  0741  3091               	movlw	high (STR_9| (0+32768))
  1645  0742  00F8               	movwf	Lcd_Write_String@a+1
  1646  0743  160A  158A  24F7  120A  118A  	fcall	_Lcd_Write_String
  1647                           
  1648                           ;main.c: 293: UART_send_string("  A.Quay thuan | B.Quay nghich | C.Change speed | D.Emer
      +                          gency Stop|");
  1649  0748  3088               	movlw	low (STR_10| (0+32768))
  1650  0749  00F3               	movwf	UART_send_string@st_pt
  1651  074A  3090               	movlw	high (STR_10| (0+32768))
  1652  074B  00F4               	movwf	UART_send_string@st_pt+1
  1653  074C  160A  158A  23A5  120A  118A  	fcall	_UART_send_string
  1654                           
  1655                           ;main.c: 294: SwitchMode();
  1656  0751  160A  118A  226F  120A  118A  	fcall	_SwitchMode
  1657  0756                     l5395:
  1658                           
  1659                           ;main.c: 297: {;main.c: 298: tocdo = (1000.0f*xungdo*60)/(360*50);
  1660  0756  30A0               	movlw	160
  1661  0757  1283               	bcf	3,5	;RP0=0, select bank0
  1662  0758  1303               	bcf	3,6	;RP1=0, select bank0
  1663  0759  00BF               	movwf	___ftdiv@f2
  1664  075A  308C               	movlw	140
  1665  075B  00C0               	movwf	___ftdiv@f2+1
  1666  075C  3046               	movlw	70
  1667  075D  00C1               	movwf	___ftdiv@f2+2
  1668  075E  3060               	movlw	96
  1669  075F  00B0               	movwf	___ftmul@f1
  1670  0760  306A               	movlw	106
  1671  0761  00B1               	movwf	___ftmul@f1+1
  1672  0762  3047               	movlw	71
  1673  0763  00B2               	movwf	___ftmul@f1+2
  1674  0764  086F               	movf	_xungdo+1,w
  1675  0765  00A1               	movwf	___lwtoft@c+1
  1676  0766  086E               	movf	_xungdo,w
  1677  0767  00A0               	movwf	___lwtoft@c
  1678  0768  160A  158A  231F  120A  118A  	fcall	___lwtoft
  1679  076D  0820               	movf	?___lwtoft,w
  1680  076E  00B3               	movwf	___ftmul@f2
  1681  076F  0821               	movf	?___lwtoft+1,w
  1682  0770  00B4               	movwf	___ftmul@f2+1
  1683  0771  0822               	movf	?___lwtoft+2,w
  1684  0772  00B5               	movwf	___ftmul@f2+2
  1685  0773  120A  158A  2022  120A  118A  	fcall	___ftmul
  1686  0778  0830               	movf	?___ftmul,w
  1687  0779  00C2               	movwf	___ftdiv@f1
  1688  077A  0831               	movf	?___ftmul+1,w
  1689  077B  00C3               	movwf	___ftdiv@f1+1
  1690  077C  0832               	movf	?___ftmul+2,w
  1691  077D  00C4               	movwf	___ftdiv@f1+2
  1692  077E  160A  118A  23FC  120A  118A  	fcall	___ftdiv
  1693  0783  083F               	movf	?___ftdiv,w
  1694  0784  1683               	bsf	3,5	;RP0=1, select bank1
  1695  0785  00A0               	movwf	_tocdo^(0+128)
  1696  0786  1283               	bcf	3,5	;RP0=0, select bank0
  1697  0787  0840               	movf	?___ftdiv+1,w
  1698  0788  1683               	bsf	3,5	;RP0=1, select bank1
  1699  0789  00A1               	movwf	(_tocdo+1)^(0+128)
  1700  078A  1283               	bcf	3,5	;RP0=0, select bank0
  1701  078B  0841               	movf	?___ftdiv+2,w
  1702  078C  1683               	bsf	3,5	;RP0=1, select bank1
  1703  078D  00A2               	movwf	(_tocdo+2)^(0+128)
  1704                           
  1705                           ;main.c: 299: sprintf(str," Toc do = %0.0f v/p " ,tocdo);
  1706  078E  30CC               	movlw	low (STR_11| (0+32768))
  1707  078F  1283               	bcf	3,5	;RP0=0, select bank0
  1708  0790  00DC               	movwf	sprintf@f
  1709  0791  3090               	movlw	high (STR_11| (0+32768))
  1710  0792  00DD               	movwf	sprintf@f+1
  1711  0793  1683               	bsf	3,5	;RP0=1, select bank1
  1712  0794  0820               	movf	_tocdo^(0+128),w
  1713  0795  1283               	bcf	3,5	;RP0=0, select bank0
  1714  0796  00DE               	movwf	?_sprintf+2
  1715  0797  1683               	bsf	3,5	;RP0=1, select bank1
  1716  0798  0821               	movf	(_tocdo+1)^(0+128),w
  1717  0799  1283               	bcf	3,5	;RP0=0, select bank0
  1718  079A  00DF               	movwf	?_sprintf+3
  1719  079B  1683               	bsf	3,5	;RP0=1, select bank1
  1720  079C  0822               	movf	(_tocdo+2)^(0+128),w
  1721  079D  1283               	bcf	3,5	;RP0=0, select bank0
  1722  079E  00E0               	movwf	?_sprintf+4
  1723  079F  30A5               	movlw	(low (_str| 0))& (0+255)
  1724  07A0  120A  118A  2026  120A  118A  	fcall	_sprintf
  1725                           
  1726                           ;main.c: 300: if(RC5==1)
  1727  07A5  1283               	bcf	3,5	;RP0=0, select bank0
  1728  07A6  1E87               	btfss	7,5	;volatile
  1729  07A7  2FC4               	goto	l5409
  1730                           
  1731                           ;main.c: 301: {;main.c: 302: UART_send_string("  A.Quay thuan | B.Quay nghich | C.Change
      +                           speed | D.Emergency Stop|");
  1732  07A8  3088               	movlw	low (STR_10| (0+32768))
  1733  07A9  00F3               	movwf	UART_send_string@st_pt
  1734  07AA  3090               	movlw	high (STR_10| (0+32768))
  1735  07AB  00F4               	movwf	UART_send_string@st_pt+1
  1736  07AC  160A  158A  23A5  120A  118A  	fcall	_UART_send_string
  1737                           
  1738                           ;main.c: 303: Lcd_Clear();
  1739  07B1  160A  158A  22C3  120A  118A  	fcall	_Lcd_Clear
  1740                           
  1741                           ;main.c: 304: Lcd_Write_String(" Bam 1 ky tu");
  1742  07B6  303B               	movlw	low (STR_13| (0+32768))
  1743  07B7  00F7               	movwf	Lcd_Write_String@a
  1744  07B8  3091               	movlw	high (STR_13| (0+32768))
  1745  07B9  00F8               	movwf	Lcd_Write_String@a+1
  1746  07BA  160A  158A  24F7  120A  118A  	fcall	_Lcd_Write_String
  1747                           
  1748                           ;main.c: 305: SwitchMode();
  1749  07BF  160A  118A  226F  120A  118A  	fcall	_SwitchMode
  1750  07C4                     l5409:
  1751                           
  1752                           ;main.c: 306: };main.c: 308: PWM1_Set_duty(input);
  1753  07C4  1283               	bcf	3,5	;RP0=0, select bank0
  1754  07C5  1303               	bcf	3,6	;RP1=0, select bank0
  1755  07C6  086B               	movf	_input+1,w
  1756  07C7  00DC               	movwf	PWM1_Set_duty@duty+1
  1757  07C8  086A               	movf	_input,w
  1758  07C9  00DB               	movwf	PWM1_Set_duty@duty
  1759  07CA  160A  118A  2494  120A  118A  	fcall	_PWM1_Set_duty
  1760                           
  1761                           ;main.c: 309: Lcd_Set_Cursor(2,1);
  1762  07CF  01F6               	clrf	Lcd_Set_Cursor@b
  1763  07D0  0AF6               	incf	Lcd_Set_Cursor@b,f
  1764  07D1  3002               	movlw	2
  1765  07D2  160A  158A  25B6  120A  118A  	fcall	_Lcd_Set_Cursor
  1766                           
  1767                           ;main.c: 310: Lcd_Write_String(str);
  1768  07D7  30A5               	movlw	(low (_str| 0))& (0+255)
  1769  07D8  00F7               	movwf	Lcd_Write_String@a
  1770  07D9  3000               	movlw	0
  1771  07DA  00F8               	movwf	Lcd_Write_String@a+1
  1772  07DB  160A  158A  24F7  120A  118A  	fcall	_Lcd_Write_String
  1773                           
  1774                           ;main.c: 311: UART_send_string(str);
  1775  07E0  30A5               	movlw	(low (_str| 0))& (0+255)
  1776  07E1  00F3               	movwf	UART_send_string@st_pt
  1777  07E2  3000               	movlw	0
  1778  07E3  00F4               	movwf	UART_send_string@st_pt+1
  1779  07E4  160A  158A  23A5  120A  118A  	fcall	_UART_send_string
  1780                           
  1781                           ;main.c: 312: _delay((unsigned long)((200)*(20000000/4000.0)));
  1782  07E9  3006               	movlw	6
  1783  07EA  1283               	bcf	3,5	;RP0=0, select bank0
  1784  07EB  1303               	bcf	3,6	;RP1=0, select bank0
  1785  07EC  00E9               	movwf	??_main+2
  1786  07ED  3013               	movlw	19
  1787  07EE  00E8               	movwf	??_main+1
  1788  07EF  30AD               	movlw	173
  1789  07F0  00E7               	movwf	??_main
  1790  07F1                     u7687:
  1791  07F1  0BE7               	decfsz	??_main,f
  1792  07F2  2FF1               	goto	u7687
  1793  07F3  0BE8               	decfsz	??_main+1,f
  1794  07F4  2FF1               	goto	u7687
  1795  07F5  0BE9               	decfsz	??_main+2,f
  1796  07F6  2FF1               	goto	u7687
  1797  07F7  2F56               	goto	l5395
  1798  07F8                     __end_of_main:
  1799                           
  1800                           	psect	text1
  1801  1AEC                     __ptext1:	
  1802 ;; *************** function _timer1 *****************
  1803 ;; Defined at:
  1804 ;;		line 53 in file "main.c"
  1805 ;; Parameters:    Size  Location     Type
  1806 ;;		None
  1807 ;; Auto vars:     Size  Location     Type
  1808 ;;		None
  1809 ;; Return value:  Size  Location     Type
  1810 ;;                  1    wreg      void 
  1811 ;; Registers used:
  1812 ;;		wreg
  1813 ;; Tracked objects:
  1814 ;;		On entry : 0/0
  1815 ;;		On exit  : 300/100
  1816 ;;		Unchanged: 0/0
  1817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1818 ;;      Params:         0       0       0       0       0
  1819 ;;      Locals:         0       0       0       0       0
  1820 ;;      Temps:          0       0       0       0       0
  1821 ;;      Totals:         0       0       0       0       0
  1822 ;;Total ram usage:        0 bytes
  1823 ;; Hardware stack levels used:    1
  1824 ;; Hardware stack levels required when called:    1
  1825 ;; This function calls:
  1826 ;;		Nothing
  1827 ;; This function is called by:
  1828 ;;		_main
  1829 ;; This function uses a non-reentrant model
  1830 ;;
  1831                           
  1832                           
  1833                           ;psect for function _timer1
  1834  1AEC                     _timer1:
  1835                           
  1836                           ;main.c: 55: T1CONbits.TMR1CS=0;
  1837                           
  1838                           ;incstack = 0
  1839                           ; Regs used in _timer1: [wreg]
  1840  1AEC  1283               	bcf	3,5	;RP0=0, select bank0
  1841  1AED  1303               	bcf	3,6	;RP1=0, select bank0
  1842  1AEE  1090               	bcf	16,1	;volatile
  1843                           
  1844                           ;main.c: 57: T1CONbits.T1CKPS1=1;
  1845  1AEF  1690               	bsf	16,5	;volatile
  1846                           
  1847                           ;main.c: 58: T1CONbits.T1CKPS0=1;
  1848  1AF0  1610               	bsf	16,4	;volatile
  1849                           
  1850                           ;main.c: 59: TMR1L=34286&0X00FF;
  1851  1AF1  30EE               	movlw	238
  1852  1AF2  008E               	movwf	14	;volatile
  1853                           
  1854                           ;main.c: 60: TMR1H=34286>>8;
  1855  1AF3  3085               	movlw	133
  1856  1AF4  008F               	movwf	15	;volatile
  1857                           
  1858                           ;main.c: 61: T1CONbits.TMR1ON=1;
  1859  1AF5  1410               	bsf	16,0	;volatile
  1860                           
  1861                           ;main.c: 62: PIR1bits.TMR1IF = 0;
  1862  1AF6  100C               	bcf	12,0	;volatile
  1863                           
  1864                           ;main.c: 63: PIE1bits.TMR1IE = 1;
  1865  1AF7  1683               	bsf	3,5	;RP0=1, select bank1
  1866  1AF8  140C               	bsf	12,0	;volatile
  1867                           
  1868                           ;main.c: 64: INTCONbits.PEIE = 1;
  1869  1AF9  170B               	bsf	11,6	;volatile
  1870                           
  1871                           ;main.c: 65: INTCONbits.GIE = 1;
  1872  1AFA  178B               	bsf	11,7	;volatile
  1873  1AFB  0008               	return
  1874  1AFC                     __end_of_timer1:
  1875                           
  1876                           	psect	text2
  1877  1AAE                     __ptext2:	
  1878 ;; *************** function _timer0_init *****************
  1879 ;; Defined at:
  1880 ;;		line 88 in file "main.c"
  1881 ;; Parameters:    Size  Location     Type
  1882 ;;		None
  1883 ;; Auto vars:     Size  Location     Type
  1884 ;;		None
  1885 ;; Return value:  Size  Location     Type
  1886 ;;                  1    wreg      void 
  1887 ;; Registers used:
  1888 ;;		None
  1889 ;; Tracked objects:
  1890 ;;		On entry : 300/100
  1891 ;;		On exit  : 300/100
  1892 ;;		Unchanged: 0/0
  1893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1894 ;;      Params:         0       0       0       0       0
  1895 ;;      Locals:         0       0       0       0       0
  1896 ;;      Temps:          0       0       0       0       0
  1897 ;;      Totals:         0       0       0       0       0
  1898 ;;Total ram usage:        0 bytes
  1899 ;; Hardware stack levels used:    1
  1900 ;; Hardware stack levels required when called:    1
  1901 ;; This function calls:
  1902 ;;		Nothing
  1903 ;; This function is called by:
  1904 ;;		_main
  1905 ;; This function uses a non-reentrant model
  1906 ;;
  1907                           
  1908                           
  1909                           ;psect for function _timer0_init
  1910  1AAE                     _timer0_init:
  1911                           
  1912                           ;main.c: 91: OPTION_REGbits.T0CS=0;
  1913                           
  1914                           ;incstack = 0
  1915                           ; Regs used in _timer0_init: []
  1916  1AAE  1281               	bcf	1,5	;volatile
  1917                           
  1918                           ;main.c: 92: OPTION_REGbits.PSA=0;
  1919  1AAF  1181               	bcf	1,3	;volatile
  1920                           
  1921                           ;main.c: 94: OPTION_REGbits.PS2=1;
  1922  1AB0  1501               	bsf	1,2	;volatile
  1923                           
  1924                           ;main.c: 95: OPTION_REGbits.PS1=0;
  1925  1AB1  1081               	bcf	1,1	;volatile
  1926                           
  1927                           ;main.c: 96: OPTION_REGbits.PS0=0;
  1928  1AB2  1001               	bcf	1,0	;volatile
  1929  1AB3  0008               	return
  1930  1AB4                     __end_of_timer0_init:
  1931                           
  1932                           	psect	text3
  1933  0026                     __ptext3:	
  1934 ;; *************** function _sprintf *****************
  1935 ;; Defined at:
  1936 ;;		line 505 in file "D:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c"
  1937 ;; Parameters:    Size  Location     Type
  1938 ;;  sp              1    wreg     PTR unsigned char 
  1939 ;;		 -> str(20), 
  1940 ;;  f               2   60[BANK0 ] PTR const unsigned char 
  1941 ;;		 -> STR_11(21), 
  1942 ;; Auto vars:     Size  Location     Type
  1943 ;;  sp              1   23[BANK1 ] PTR unsigned char 
  1944 ;;		 -> str(20), 
  1945 ;;  tmpval          4    8[BANK1 ] struct .
  1946 ;;  val             4    4[BANK1 ] unsigned long 
  1947 ;;  fval            3   18[BANK1 ] unsigned long 
  1948 ;;  prec            2   21[BANK1 ] int 
  1949 ;;  width           2   16[BANK1 ] int 
  1950 ;;  flag            2   14[BANK1 ] unsigned short 
  1951 ;;  eexp            2   12[BANK1 ] int 
  1952 ;;  cp              2    0        PTR const unsigned char 
  1953 ;;  len             2    0        unsigned int 
  1954 ;;  c               1   24[BANK1 ] unsigned char 
  1955 ;;  ap              1    3[BANK1 ] PTR void [1]
  1956 ;;		 -> ?_sprintf(2), 
  1957 ;;  d               1    0        unsigned char 
  1958 ;; Return value:  Size  Location     Type
  1959 ;;                  2   60[BANK0 ] int 
  1960 ;; Registers used:
  1961 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1962 ;; Tracked objects:
  1963 ;;		On entry : 300/0
  1964 ;;		On exit  : B00/100
  1965 ;;		Unchanged: 0/0
  1966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1967 ;;      Params:         0       5       0       0       0
  1968 ;;      Locals:         0       0      25       0       0
  1969 ;;      Temps:          0       6       0       0       0
  1970 ;;      Totals:         0      11      25       0       0
  1971 ;;Total ram usage:       36 bytes
  1972 ;; Hardware stack levels used:    1
  1973 ;; Hardware stack levels required when called:    4
  1974 ;; This function calls:
  1975 ;;		___awdiv
  1976 ;;		___ftadd
  1977 ;;		___ftge
  1978 ;;		___ftmul
  1979 ;;		___ftneg
  1980 ;;		___ftsub
  1981 ;;		___fttol
  1982 ;;		___lldiv
  1983 ;;		___llmod
  1984 ;;		___lltoft
  1985 ;;		___wmul
  1986 ;;		__div_to_l_
  1987 ;;		__tdiv_to_l_
  1988 ;;		_fround
  1989 ;;		_isdigit
  1990 ;;		_scale
  1991 ;; This function is called by:
  1992 ;;		_main
  1993 ;; This function uses a non-reentrant model
  1994 ;;
  1995                           
  1996                           
  1997                           ;psect for function _sprintf
  1998  0026                     _sprintf:
  1999                           
  2000                           ;incstack = 0
  2001                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2002                           ;sprintf@sp stored from wreg
  2003  0026  1683               	bsf	3,5	;RP0=1, select bank1
  2004  0027  00D4               	movwf	sprintf@sp^(0+128)
  2005                           
  2006                           ;doprnt.c: 507: va_list ap;;doprnt.c: 512: char c;;doprnt.c: 514: int width;;doprnt.c: 5
      +                          17: int prec;;doprnt.c: 525: unsigned short flag;;doprnt.c: 532: char d;;doprnt.c: 533: 
      +                          double fval;;doprnt.c: 534: int eexp;;doprnt.c: 540: union {;doprnt.c: 541: unsigned lon
      +                          g vd;;doprnt.c: 542: double integ;;doprnt.c: 543: } tmpval;;doprnt.c: 545: unsigned long
      +                           val;;doprnt.c: 546: unsigned len;;doprnt.c: 547: const char * cp;;doprnt.c: 550: *ap = 
      +                          __va_start();
  2007  0028  305E               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  2008  0029  00FF               	movwf	127
  2009  002A  087F               	movf	127,w
  2010  002B  00C0               	movwf	sprintf@ap^(0+128)
  2011  002C                     l5357:	
  2012                           ;doprnt.c: 553: while((c = *f++)) {
  2013                           
  2014  002C  1283               	bcf	3,5	;RP0=0, select bank0
  2015  002D  085D               	movf	sprintf@f+1,w
  2016  002E  00E2               	movwf	??_sprintf+1
  2017  002F  085C               	movf	sprintf@f,w
  2018  0030  00E1               	movwf	??_sprintf
  2019  0031  0ADC               	incf	sprintf@f,f
  2020  0032  1903               	skipnz
  2021  0033  0ADD               	incf	sprintf@f+1,f
  2022  0034  0862               	movf	??_sprintf+1,w
  2023  0035  00FF               	movwf	127
  2024  0036  0861               	movf	??_sprintf,w
  2025  0037  0084               	movwf	4
  2026  0038  160A  118A  2000  120A  118A  	fcall	stringtab
  2027  003D  00FF               	movwf	127
  2028  003E  087F               	movf	127,w
  2029  003F  1683               	bsf	3,5	;RP0=1, select bank1
  2030  0040  00D5               	movwf	sprintf@c^(0+128)
  2031  0041  0855               	movf	sprintf@c^(0+128),w
  2032  0042  1903               	btfsc	3,2
  2033  0043  2EF9               	goto	l5359
  2034                           
  2035                           ;doprnt.c: 555: if(c != '%')
  2036  0044  3025               	movlw	37
  2037  0045  0655               	xorwf	sprintf@c^(0+128),w
  2038  0046  1903               	btfsc	3,2
  2039  0047  284A               	goto	l5073
  2040                           
  2041                           ;doprnt.c: 557: {;doprnt.c: 558: ((*sp++ = (c)));
  2042  0048  0855               	movf	sprintf@c^(0+128),w
  2043  0049  2EEE               	goto	L6
  2044  004A                     l5073:	
  2045                           ;doprnt.c: 559: continue;
  2046                           
  2047                           
  2048                           ;doprnt.c: 560: };doprnt.c: 563: width = 0;
  2049  004A  01CD               	clrf	sprintf@width^(0+128)
  2050  004B  01CE               	clrf	(sprintf@width+1)^(0+128)
  2051                           
  2052                           ;doprnt.c: 565: flag = 0;
  2053  004C  01CB               	clrf	sprintf@flag^(0+128)
  2054  004D  01CC               	clrf	(sprintf@flag+1)^(0+128)
  2055  004E  2858               	goto	l5079
  2056  004F                     l519:	
  2057                           ;doprnt.c: 596: case '0':
  2058                           
  2059                           
  2060                           ;doprnt.c: 597: flag |= 0x04;
  2061  004F  1683               	bsf	3,5	;RP0=1, select bank1
  2062  0050  154B               	bsf	sprintf@flag^(0+128),2
  2063                           
  2064                           ;doprnt.c: 598: f++;
  2065  0051  3001               	movlw	1
  2066  0052  1283               	bcf	3,5	;RP0=0, select bank0
  2067  0053  07DC               	addwf	sprintf@f,f
  2068  0054  1803               	skipnc
  2069  0055  0ADD               	incf	sprintf@f+1,f
  2070  0056  3000               	movlw	0
  2071  0057  07DD               	addwf	sprintf@f+1,f
  2072  0058                     l5079:	
  2073                           ;doprnt.c: 599: continue;
  2074                           
  2075  0058  1283               	bcf	3,5	;RP0=0, select bank0
  2076  0059  085D               	movf	sprintf@f+1,w
  2077  005A  00FF               	movwf	127
  2078  005B  085C               	movf	sprintf@f,w
  2079  005C  0084               	movwf	4
  2080  005D  160A  118A  2000  120A  118A  	fcall	stringtab
  2081                           
  2082                           ; Switch size 1, requested type "simple"
  2083                           ; Number of cases is 1, Range of values is 48 to 48
  2084                           ; switch strategies available:
  2085                           ; Name         Instructions Cycles
  2086                           ; simple_byte            4     3 (average)
  2087                           ; direct_byte           14    11 (fixed)
  2088                           ; jumptable            263     9 (fixed)
  2089                           ;	Chosen strategy is simple_byte
  2090  0062  3A30               	xorlw	48	; case 48
  2091  0063  1903               	skipnz
  2092  0064  284F               	goto	l519
  2093  0065  2866               	goto	l5081
  2094  0066                     l5081:
  2095                           
  2096                           ;doprnt.c: 614: if(isdigit((unsigned)*f)) {
  2097  0066  085D               	movf	sprintf@f+1,w
  2098  0067  00FF               	movwf	127
  2099  0068  085C               	movf	sprintf@f,w
  2100  0069  0084               	movwf	4
  2101  006A  160A  118A  2000  120A  118A  	fcall	stringtab
  2102  006F  160A  158A  22CE  120A  118A  	fcall	_isdigit
  2103  0074  1C03               	btfss	3,0
  2104  0075  28C2               	goto	l5093
  2105                           
  2106                           ;doprnt.c: 615: width = 0;
  2107  0076  1683               	bsf	3,5	;RP0=1, select bank1
  2108  0077  01CD               	clrf	sprintf@width^(0+128)
  2109  0078  01CE               	clrf	(sprintf@width+1)^(0+128)
  2110  0079                     l5085:
  2111                           
  2112                           ;doprnt.c: 617: width *= 10;
  2113  0079  300A               	movlw	10
  2114  007A  1283               	bcf	3,5	;RP0=0, select bank0
  2115  007B  00B2               	movwf	___wmul@multiplier
  2116  007C  3000               	movlw	0
  2117  007D  00B3               	movwf	___wmul@multiplier+1
  2118  007E  1683               	bsf	3,5	;RP0=1, select bank1
  2119  007F  084E               	movf	(sprintf@width+1)^(0+128),w
  2120  0080  1283               	bcf	3,5	;RP0=0, select bank0
  2121  0081  00B5               	movwf	___wmul@multiplicand+1
  2122  0082  1683               	bsf	3,5	;RP0=1, select bank1
  2123  0083  084D               	movf	sprintf@width^(0+128),w
  2124  0084  1283               	bcf	3,5	;RP0=0, select bank0
  2125  0085  00B4               	movwf	___wmul@multiplicand
  2126  0086  160A  158A  2384  120A  118A  	fcall	___wmul
  2127  008B  0833               	movf	?___wmul+1,w
  2128  008C  1683               	bsf	3,5	;RP0=1, select bank1
  2129  008D  00CE               	movwf	(sprintf@width+1)^(0+128)
  2130  008E  1283               	bcf	3,5	;RP0=0, select bank0
  2131  008F  0832               	movf	?___wmul,w
  2132  0090  1683               	bsf	3,5	;RP0=1, select bank1
  2133  0091  00CD               	movwf	sprintf@width^(0+128)
  2134                           
  2135                           ;doprnt.c: 618: width += *f++ - '0';
  2136  0092  1283               	bcf	3,5	;RP0=0, select bank0
  2137  0093  085D               	movf	sprintf@f+1,w
  2138  0094  00FF               	movwf	127
  2139  0095  085C               	movf	sprintf@f,w
  2140  0096  0084               	movwf	4
  2141  0097  160A  118A  2000  120A  118A  	fcall	stringtab
  2142  009C  3ED0               	addlw	208
  2143  009D  00E1               	movwf	??_sprintf
  2144  009E  30FF               	movlw	255
  2145  009F  1803               	skipnc
  2146  00A0  3000               	movlw	0
  2147  00A1  00E2               	movwf	??_sprintf+1
  2148  00A2  0861               	movf	??_sprintf,w
  2149  00A3  1683               	bsf	3,5	;RP0=1, select bank1
  2150  00A4  07CD               	addwf	sprintf@width^(0+128),f
  2151  00A5  1803               	skipnc
  2152  00A6  0ACE               	incf	(sprintf@width+1)^(0+128),f
  2153  00A7  1283               	bcf	3,5	;RP0=0, select bank0
  2154  00A8  0862               	movf	??_sprintf+1,w
  2155  00A9  1683               	bsf	3,5	;RP0=1, select bank1
  2156  00AA  07CE               	addwf	(sprintf@width+1)^(0+128),f
  2157  00AB  3001               	movlw	1
  2158  00AC  1283               	bcf	3,5	;RP0=0, select bank0
  2159  00AD  07DC               	addwf	sprintf@f,f
  2160  00AE  1803               	skipnc
  2161  00AF  0ADD               	incf	sprintf@f+1,f
  2162  00B0  3000               	movlw	0
  2163  00B1  07DD               	addwf	sprintf@f+1,f
  2164                           
  2165                           ;doprnt.c: 619: } while(isdigit((unsigned)*f));
  2166  00B2  085D               	movf	sprintf@f+1,w
  2167  00B3  00FF               	movwf	127
  2168  00B4  085C               	movf	sprintf@f,w
  2169  00B5  0084               	movwf	4
  2170  00B6  160A  118A  2000  120A  118A  	fcall	stringtab
  2171  00BB  160A  158A  22CE  120A  118A  	fcall	_isdigit
  2172  00C0  1803               	btfsc	3,0
  2173  00C1  2879               	goto	l5085
  2174  00C2                     l5093:
  2175                           
  2176                           ;doprnt.c: 625: };doprnt.c: 628: if(*f == '.') {
  2177  00C2  085D               	movf	sprintf@f+1,w
  2178  00C3  00FF               	movwf	127
  2179  00C4  085C               	movf	sprintf@f,w
  2180  00C5  0084               	movwf	4
  2181  00C6  160A  118A  2000  120A  118A  	fcall	stringtab
  2182  00CB  3A2E               	xorlw	46
  2183  00CC  1D03               	skipz
  2184  00CD  2924               	goto	l5109
  2185                           
  2186                           ;doprnt.c: 629: flag |= 0x4000;
  2187  00CE  1683               	bsf	3,5	;RP0=1, select bank1
  2188  00CF  174C               	bsf	(sprintf@flag^(0+128)+1),6
  2189                           
  2190                           ;doprnt.c: 630: f++;
  2191  00D0  3001               	movlw	1
  2192  00D1  1283               	bcf	3,5	;RP0=0, select bank0
  2193  00D2  07DC               	addwf	sprintf@f,f
  2194  00D3  1803               	skipnc
  2195  00D4  0ADD               	incf	sprintf@f+1,f
  2196  00D5  3000               	movlw	0
  2197  00D6  07DD               	addwf	sprintf@f+1,f
  2198                           
  2199                           ;doprnt.c: 644: {;doprnt.c: 645: prec = 0;
  2200  00D7  1683               	bsf	3,5	;RP0=1, select bank1
  2201  00D8  01D2               	clrf	sprintf@prec^(0+128)
  2202  00D9  01D3               	clrf	(sprintf@prec+1)^(0+128)
  2203  00DA                     l5107:	
  2204                           ;doprnt.c: 646: while(isdigit((unsigned)*f)) {
  2205                           
  2206  00DA  1283               	bcf	3,5	;RP0=0, select bank0
  2207  00DB  085D               	movf	sprintf@f+1,w
  2208  00DC  00FF               	movwf	127
  2209  00DD  085C               	movf	sprintf@f,w
  2210  00DE  0084               	movwf	4
  2211  00DF  160A  118A  2000  120A  118A  	fcall	stringtab
  2212  00E4  160A  158A  22CE  120A  118A  	fcall	_isdigit
  2213  00E9  1C03               	btfss	3,0
  2214  00EA  292B               	goto	l5115
  2215                           
  2216                           ;doprnt.c: 647: prec *= 10;
  2217  00EB  300A               	movlw	10
  2218  00EC  00B2               	movwf	___wmul@multiplier
  2219  00ED  3000               	movlw	0
  2220  00EE  00B3               	movwf	___wmul@multiplier+1
  2221  00EF  1683               	bsf	3,5	;RP0=1, select bank1
  2222  00F0  0853               	movf	(sprintf@prec+1)^(0+128),w
  2223  00F1  1283               	bcf	3,5	;RP0=0, select bank0
  2224  00F2  00B5               	movwf	___wmul@multiplicand+1
  2225  00F3  1683               	bsf	3,5	;RP0=1, select bank1
  2226  00F4  0852               	movf	sprintf@prec^(0+128),w
  2227  00F5  1283               	bcf	3,5	;RP0=0, select bank0
  2228  00F6  00B4               	movwf	___wmul@multiplicand
  2229  00F7  160A  158A  2384  120A  118A  	fcall	___wmul
  2230  00FC  0833               	movf	?___wmul+1,w
  2231  00FD  1683               	bsf	3,5	;RP0=1, select bank1
  2232  00FE  00D3               	movwf	(sprintf@prec+1)^(0+128)
  2233  00FF  1283               	bcf	3,5	;RP0=0, select bank0
  2234  0100  0832               	movf	?___wmul,w
  2235  0101  1683               	bsf	3,5	;RP0=1, select bank1
  2236  0102  00D2               	movwf	sprintf@prec^(0+128)
  2237                           
  2238                           ;doprnt.c: 648: prec += *f++ - '0';
  2239  0103  1283               	bcf	3,5	;RP0=0, select bank0
  2240  0104  085D               	movf	sprintf@f+1,w
  2241  0105  00FF               	movwf	127
  2242  0106  085C               	movf	sprintf@f,w
  2243  0107  0084               	movwf	4
  2244  0108  160A  118A  2000  120A  118A  	fcall	stringtab
  2245  010D  3ED0               	addlw	208
  2246  010E  00E1               	movwf	??_sprintf
  2247  010F  30FF               	movlw	255
  2248  0110  1803               	skipnc
  2249  0111  3000               	movlw	0
  2250  0112  00E2               	movwf	??_sprintf+1
  2251  0113  0861               	movf	??_sprintf,w
  2252  0114  1683               	bsf	3,5	;RP0=1, select bank1
  2253  0115  07D2               	addwf	sprintf@prec^(0+128),f
  2254  0116  1803               	skipnc
  2255  0117  0AD3               	incf	(sprintf@prec+1)^(0+128),f
  2256  0118  1283               	bcf	3,5	;RP0=0, select bank0
  2257  0119  0862               	movf	??_sprintf+1,w
  2258  011A  1683               	bsf	3,5	;RP0=1, select bank1
  2259  011B  07D3               	addwf	(sprintf@prec+1)^(0+128),f
  2260  011C  3001               	movlw	1
  2261  011D  1283               	bcf	3,5	;RP0=0, select bank0
  2262  011E  07DC               	addwf	sprintf@f,f
  2263  011F  1803               	skipnc
  2264  0120  0ADD               	incf	sprintf@f+1,f
  2265  0121  3000               	movlw	0
  2266  0122  07DD               	addwf	sprintf@f+1,f
  2267  0123  28DA               	goto	l5107
  2268  0124                     l5109:
  2269                           
  2270                           ;doprnt.c: 652: prec = 0;
  2271  0124  1683               	bsf	3,5	;RP0=1, select bank1
  2272  0125  01D2               	clrf	sprintf@prec^(0+128)
  2273  0126  01D3               	clrf	(sprintf@prec+1)^(0+128)
  2274                           
  2275                           ;doprnt.c: 654: flag |= 0x1000;
  2276  0127  164C               	bsf	(sprintf@flag^(0+128)+1),4
  2277  0128  292B               	goto	l5115
  2278  0129                     l534:	
  2279                           ;doprnt.c: 688: case 'f':
  2280                           
  2281                           
  2282                           ;doprnt.c: 689: flag |= 0x400;
  2283  0129  154C               	bsf	(sprintf@flag^(0+128)+1),2
  2284                           
  2285                           ;doprnt.c: 690: break;
  2286  012A  2945               	goto	l5117
  2287  012B                     l5115:
  2288  012B  1283               	bcf	3,5	;RP0=0, select bank0
  2289  012C  085D               	movf	sprintf@f+1,w
  2290  012D  00E2               	movwf	??_sprintf+1
  2291  012E  085C               	movf	sprintf@f,w
  2292  012F  00E1               	movwf	??_sprintf
  2293  0130  0ADC               	incf	sprintf@f,f
  2294  0131  1903               	skipnz
  2295  0132  0ADD               	incf	sprintf@f+1,f
  2296  0133  0862               	movf	??_sprintf+1,w
  2297  0134  00FF               	movwf	127
  2298  0135  0861               	movf	??_sprintf,w
  2299  0136  0084               	movwf	4
  2300  0137  160A  118A  2000  120A  118A  	fcall	stringtab
  2301  013C  1683               	bsf	3,5	;RP0=1, select bank1
  2302  013D  00D5               	movwf	sprintf@c^(0+128)
  2303                           
  2304                           ; Switch size 1, requested type "simple"
  2305                           ; Number of cases is 2, Range of values is 0 to 102
  2306                           ; switch strategies available:
  2307                           ; Name         Instructions Cycles
  2308                           ; simple_byte            7     4 (average)
  2309                           ; jumptable            260     6 (fixed)
  2310                           ;	Chosen strategy is simple_byte
  2311  013E  3A00               	xorlw	0	; case 0
  2312  013F  1903               	skipnz
  2313  0140  2EF9               	goto	l5359
  2314  0141  3A66               	xorlw	102	; case 102
  2315  0142  1903               	skipnz
  2316  0143  2929               	goto	l534
  2317  0144  282C               	goto	l5357
  2318  0145                     l5117:
  2319                           
  2320                           ;doprnt.c: 851: if(flag & (0x700)) {
  2321  0145  3000               	movlw	0
  2322  0146  054B               	andwf	sprintf@flag^(0+128),w
  2323  0147  1283               	bcf	3,5	;RP0=0, select bank0
  2324  0148  00E1               	movwf	??_sprintf
  2325  0149  3007               	movlw	7
  2326  014A  1683               	bsf	3,5	;RP0=1, select bank1
  2327  014B  054C               	andwf	(sprintf@flag+1)^(0+128),w
  2328  014C  1283               	bcf	3,5	;RP0=0, select bank0
  2329  014D  00E2               	movwf	??_sprintf+1
  2330  014E  0861               	movf	??_sprintf,w
  2331  014F  0462               	iorwf	??_sprintf+1,w
  2332  0150  1903               	btfsc	3,2
  2333  0151  2E20               	goto	l5295
  2334                           
  2335                           ;doprnt.c: 853: if(flag & 0x1000)
  2336  0152  1683               	bsf	3,5	;RP0=1, select bank1
  2337  0153  1E4C               	btfss	(sprintf@flag+1)^(0+128),4
  2338  0154  2959               	goto	l5123
  2339                           
  2340                           ;doprnt.c: 855: prec = 6;
  2341  0155  3006               	movlw	6
  2342  0156  00D2               	movwf	sprintf@prec^(0+128)
  2343  0157  3000               	movlw	0
  2344  0158  00D3               	movwf	(sprintf@prec^(0+128)+1)
  2345  0159                     l5123:
  2346                           
  2347                           ;doprnt.c: 856: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  2348  0159  0840               	movf	sprintf@ap^(0+128),w
  2349  015A  0084               	movwf	4
  2350  015B  1383               	bcf	3,7	;select IRP bank0
  2351  015C  0800               	movf	0,w
  2352  015D  00CF               	movwf	sprintf@fval^(0+128)
  2353  015E  0A84               	incf	4,f
  2354  015F  0800               	movf	0,w
  2355  0160  00D0               	movwf	(sprintf@fval+1)^(0+128)
  2356  0161  0A84               	incf	4,f
  2357  0162  0800               	movf	0,w
  2358  0163  00D1               	movwf	(sprintf@fval+2)^(0+128)
  2359  0164  3003               	movlw	3
  2360  0165  00FF               	movwf	127
  2361  0166  087F               	movf	127,w
  2362  0167  07C0               	addwf	sprintf@ap^(0+128),f
  2363                           
  2364                           ;doprnt.c: 857: if(fval < 0.0) {
  2365  0168  084F               	movf	sprintf@fval^(0+128),w
  2366  0169  00F2               	movwf	___ftge@ff1
  2367  016A  0850               	movf	(sprintf@fval+1)^(0+128),w
  2368  016B  00F3               	movwf	___ftge@ff1+1
  2369  016C  0851               	movf	(sprintf@fval+2)^(0+128),w
  2370  016D  00F4               	movwf	___ftge@ff1+2
  2371  016E  3000               	movlw	0
  2372  016F  00F5               	movwf	___ftge@ff2
  2373  0170  3000               	movlw	0
  2374  0171  00F6               	movwf	___ftge@ff2+1
  2375  0172  3000               	movlw	0
  2376  0173  00F7               	movwf	___ftge@ff2+2
  2377  0174  160A  158A  2466  120A  118A  	fcall	___ftge
  2378  0179  1803               	btfsc	3,0
  2379  017A  2990               	goto	l5133
  2380                           
  2381                           ;doprnt.c: 858: fval = -fval;
  2382  017B  084F               	movf	sprintf@fval^(0+128),w
  2383  017C  00F2               	movwf	___ftneg@f1
  2384  017D  0850               	movf	(sprintf@fval+1)^(0+128),w
  2385  017E  00F3               	movwf	___ftneg@f1+1
  2386  017F  0851               	movf	(sprintf@fval+2)^(0+128),w
  2387  0180  00F4               	movwf	___ftneg@f1+2
  2388  0181  160A  158A  22BB  120A  118A  	fcall	___ftneg
  2389  0186  0872               	movf	?___ftneg,w
  2390  0187  00CF               	movwf	sprintf@fval^(0+128)
  2391  0188  0873               	movf	?___ftneg+1,w
  2392  0189  00D0               	movwf	(sprintf@fval+1)^(0+128)
  2393  018A  0874               	movf	?___ftneg+2,w
  2394  018B  00D1               	movwf	(sprintf@fval+2)^(0+128)
  2395                           
  2396                           ;doprnt.c: 859: flag |= 0x03;
  2397  018C  3003               	movlw	3
  2398  018D  04CB               	iorwf	sprintf@flag^(0+128),f
  2399  018E  3000               	movlw	0
  2400  018F  04CC               	iorwf	(sprintf@flag+1)^(0+128),f
  2401  0190                     l5133:
  2402                           
  2403                           ;doprnt.c: 860: };doprnt.c: 861: eexp = 0;
  2404  0190  01C9               	clrf	sprintf@eexp^(0+128)
  2405  0191  01CA               	clrf	(sprintf@eexp+1)^(0+128)
  2406                           
  2407                           ;doprnt.c: 862: if( fval!=0) {
  2408  0192  0851               	movf	(sprintf@fval+2)^(0+128),w
  2409  0193  0450               	iorwf	(sprintf@fval+1)^(0+128),w
  2410  0194  044F               	iorwf	sprintf@fval^(0+128),w
  2411  0195  1903               	skipnz
  2412  0196  2A6B               	goto	l5161
  2413                           
  2414                           ;doprnt.c: 863: (void)(*(&eexp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  2415  0197  30CF               	movlw	low (sprintf@fval| 0)
  2416  0198  0084               	movwf	4
  2417  0199  1383               	bcf	3,7	;select IRP bank1
  2418  019A  0800               	movf	0,w
  2419  019B  1283               	bcf	3,5	;RP0=0, select bank0
  2420  019C  00E1               	movwf	??_sprintf
  2421  019D  0A84               	incf	4,f
  2422  019E  0800               	movf	0,w
  2423  019F  00E2               	movwf	??_sprintf+1
  2424  01A0  0A84               	incf	4,f
  2425  01A1  0800               	movf	0,w
  2426  01A2  00E3               	movwf	??_sprintf+2
  2427  01A3  0A84               	incf	4,f
  2428  01A4  0800               	movf	0,w
  2429  01A5  00E4               	movwf	??_sprintf+3
  2430  01A6  300F               	movlw	15
  2431  01A7                     u7215:
  2432  01A7  1003               	clrc
  2433  01A8  0CE4               	rrf	??_sprintf+3,f
  2434  01A9  0CE3               	rrf	??_sprintf+2,f
  2435  01AA  0CE2               	rrf	??_sprintf+1,f
  2436  01AB  0CE1               	rrf	??_sprintf,f
  2437  01AC  3EFF               	addlw	-1
  2438  01AD  1D03               	skipz
  2439  01AE  29A7               	goto	u7215
  2440  01AF  30FF               	movlw	255
  2441  01B0  0561               	andwf	??_sprintf,w
  2442  01B1  00E5               	movwf	??_sprintf+4
  2443  01B2  3000               	movlw	0
  2444  01B3  0562               	andwf	??_sprintf+1,w
  2445  01B4  00E6               	movwf	??_sprintf+5
  2446  01B5  0865               	movf	??_sprintf+4,w
  2447  01B6  3E82               	addlw	130
  2448  01B7  1683               	bsf	3,5	;RP0=1, select bank1
  2449  01B8  00C9               	movwf	sprintf@eexp^(0+128)
  2450  01B9  1283               	bcf	3,5	;RP0=0, select bank0
  2451  01BA  0866               	movf	??_sprintf+5,w
  2452  01BB  1803               	skipnc
  2453  01BC  3E01               	addlw	1
  2454  01BD  3EFF               	addlw	255
  2455  01BE  1683               	bsf	3,5	;RP0=1, select bank1
  2456  01BF  00CA               	movwf	(sprintf@eexp+1)^(0+128)
  2457                           
  2458                           ;doprnt.c: 864: eexp--;
  2459  01C0  30FF               	movlw	255
  2460  01C1  07C9               	addwf	sprintf@eexp^(0+128),f
  2461  01C2  1803               	skipnc
  2462  01C3  0ACA               	incf	(sprintf@eexp+1)^(0+128),f
  2463  01C4  30FF               	movlw	255
  2464  01C5  07CA               	addwf	(sprintf@eexp+1)^(0+128),f
  2465                           
  2466                           ;doprnt.c: 865: eexp *= 3;
  2467  01C6  3003               	movlw	3
  2468  01C7  1283               	bcf	3,5	;RP0=0, select bank0
  2469  01C8  00B2               	movwf	___wmul@multiplier
  2470  01C9  3000               	movlw	0
  2471  01CA  00B3               	movwf	___wmul@multiplier+1
  2472  01CB  1683               	bsf	3,5	;RP0=1, select bank1
  2473  01CC  084A               	movf	(sprintf@eexp+1)^(0+128),w
  2474  01CD  1283               	bcf	3,5	;RP0=0, select bank0
  2475  01CE  00B5               	movwf	___wmul@multiplicand+1
  2476  01CF  1683               	bsf	3,5	;RP0=1, select bank1
  2477  01D0  0849               	movf	sprintf@eexp^(0+128),w
  2478  01D1  1283               	bcf	3,5	;RP0=0, select bank0
  2479  01D2  00B4               	movwf	___wmul@multiplicand
  2480  01D3  160A  158A  2384  120A  118A  	fcall	___wmul
  2481  01D8  0833               	movf	?___wmul+1,w
  2482  01D9  1683               	bsf	3,5	;RP0=1, select bank1
  2483  01DA  00CA               	movwf	(sprintf@eexp+1)^(0+128)
  2484  01DB  1283               	bcf	3,5	;RP0=0, select bank0
  2485  01DC  0832               	movf	?___wmul,w
  2486  01DD  1683               	bsf	3,5	;RP0=1, select bank1
  2487  01DE  00C9               	movwf	sprintf@eexp^(0+128)
  2488                           
  2489                           ;doprnt.c: 866: eexp /= 10;
  2490  01DF  300A               	movlw	10
  2491  01E0  1283               	bcf	3,5	;RP0=0, select bank0
  2492  01E1  00A0               	movwf	___awdiv@divisor
  2493  01E2  3000               	movlw	0
  2494  01E3  00A1               	movwf	___awdiv@divisor+1
  2495  01E4  1683               	bsf	3,5	;RP0=1, select bank1
  2496  01E5  084A               	movf	(sprintf@eexp+1)^(0+128),w
  2497  01E6  1283               	bcf	3,5	;RP0=0, select bank0
  2498  01E7  00A3               	movwf	___awdiv@dividend+1
  2499  01E8  1683               	bsf	3,5	;RP0=1, select bank1
  2500  01E9  0849               	movf	sprintf@eexp^(0+128),w
  2501  01EA  1283               	bcf	3,5	;RP0=0, select bank0
  2502  01EB  00A2               	movwf	___awdiv@dividend
  2503  01EC  160A  158A  26EC  120A  118A  	fcall	___awdiv
  2504  01F1  0821               	movf	?___awdiv+1,w
  2505  01F2  1683               	bsf	3,5	;RP0=1, select bank1
  2506  01F3  00CA               	movwf	(sprintf@eexp+1)^(0+128)
  2507  01F4  1283               	bcf	3,5	;RP0=0, select bank0
  2508  01F5  0820               	movf	?___awdiv,w
  2509  01F6  1683               	bsf	3,5	;RP0=1, select bank1
  2510  01F7  00C9               	movwf	sprintf@eexp^(0+128)
  2511                           
  2512                           ;doprnt.c: 867: if(eexp < 0)
  2513  01F8  1FCA               	btfss	(sprintf@eexp+1)^(0+128),7
  2514  01F9  2A00               	goto	l5149
  2515                           
  2516                           ;doprnt.c: 868: eexp--;
  2517  01FA  30FF               	movlw	255
  2518  01FB  07C9               	addwf	sprintf@eexp^(0+128),f
  2519  01FC  1803               	skipnc
  2520  01FD  0ACA               	incf	(sprintf@eexp+1)^(0+128),f
  2521  01FE  30FF               	movlw	255
  2522  01FF  07CA               	addwf	(sprintf@eexp+1)^(0+128),f
  2523  0200                     l5149:
  2524                           
  2525                           ;doprnt.c: 872: tmpval.integ = scale(-eexp);
  2526  0200  0349               	decf	sprintf@eexp^(0+128),w
  2527  0201  3AFF               	xorlw	255
  2528  0202  120A  158A  255A  120A  118A  	fcall	_scale
  2529  0207  083F               	movf	?_scale,w
  2530  0208  1683               	bsf	3,5	;RP0=1, select bank1
  2531  0209  00C5               	movwf	sprintf@tmpval^(0+128)
  2532  020A  1283               	bcf	3,5	;RP0=0, select bank0
  2533  020B  0840               	movf	?_scale+1,w
  2534  020C  1683               	bsf	3,5	;RP0=1, select bank1
  2535  020D  00C6               	movwf	(sprintf@tmpval+1)^(0+128)
  2536  020E  1283               	bcf	3,5	;RP0=0, select bank0
  2537  020F  0841               	movf	?_scale+2,w
  2538  0210  1683               	bsf	3,5	;RP0=1, select bank1
  2539  0211  00C7               	movwf	(sprintf@tmpval+2)^(0+128)
  2540                           
  2541                           ;doprnt.c: 873: tmpval.integ *= fval;
  2542  0212  084F               	movf	sprintf@fval^(0+128),w
  2543  0213  1283               	bcf	3,5	;RP0=0, select bank0
  2544  0214  00B0               	movwf	___ftmul@f1
  2545  0215  1683               	bsf	3,5	;RP0=1, select bank1
  2546  0216  0850               	movf	(sprintf@fval+1)^(0+128),w
  2547  0217  1283               	bcf	3,5	;RP0=0, select bank0
  2548  0218  00B1               	movwf	___ftmul@f1+1
  2549  0219  1683               	bsf	3,5	;RP0=1, select bank1
  2550  021A  0851               	movf	(sprintf@fval+2)^(0+128),w
  2551  021B  1283               	bcf	3,5	;RP0=0, select bank0
  2552  021C  00B2               	movwf	___ftmul@f1+2
  2553  021D  1683               	bsf	3,5	;RP0=1, select bank1
  2554  021E  0845               	movf	sprintf@tmpval^(0+128),w
  2555  021F  1283               	bcf	3,5	;RP0=0, select bank0
  2556  0220  00B3               	movwf	___ftmul@f2
  2557  0221  1683               	bsf	3,5	;RP0=1, select bank1
  2558  0222  0846               	movf	(sprintf@tmpval+1)^(0+128),w
  2559  0223  1283               	bcf	3,5	;RP0=0, select bank0
  2560  0224  00B4               	movwf	___ftmul@f2+1
  2561  0225  1683               	bsf	3,5	;RP0=1, select bank1
  2562  0226  0847               	movf	(sprintf@tmpval+2)^(0+128),w
  2563  0227  1283               	bcf	3,5	;RP0=0, select bank0
  2564  0228  00B5               	movwf	___ftmul@f2+2
  2565  0229  120A  158A  2022  120A  118A  	fcall	___ftmul
  2566  022E  0830               	movf	?___ftmul,w
  2567  022F  1683               	bsf	3,5	;RP0=1, select bank1
  2568  0230  00C5               	movwf	sprintf@tmpval^(0+128)
  2569  0231  1283               	bcf	3,5	;RP0=0, select bank0
  2570  0232  0831               	movf	?___ftmul+1,w
  2571  0233  1683               	bsf	3,5	;RP0=1, select bank1
  2572  0234  00C6               	movwf	(sprintf@tmpval+1)^(0+128)
  2573  0235  1283               	bcf	3,5	;RP0=0, select bank0
  2574  0236  0832               	movf	?___ftmul+2,w
  2575  0237  1683               	bsf	3,5	;RP0=1, select bank1
  2576  0238  00C7               	movwf	(sprintf@tmpval+2)^(0+128)
  2577                           
  2578                           ;doprnt.c: 874: if(tmpval.integ < 1.0)
  2579  0239  0845               	movf	sprintf@tmpval^(0+128),w
  2580  023A  00F2               	movwf	___ftge@ff1
  2581  023B  0846               	movf	(sprintf@tmpval+1)^(0+128),w
  2582  023C  00F3               	movwf	___ftge@ff1+1
  2583  023D  0847               	movf	(sprintf@tmpval+2)^(0+128),w
  2584  023E  00F4               	movwf	___ftge@ff1+2
  2585  023F  3000               	movlw	0
  2586  0240  00F5               	movwf	___ftge@ff2
  2587  0241  3080               	movlw	128
  2588  0242  00F6               	movwf	___ftge@ff2+1
  2589  0243  303F               	movlw	63
  2590  0244  00F7               	movwf	___ftge@ff2+2
  2591  0245  160A  158A  2466  120A  118A  	fcall	___ftge
  2592  024A  1803               	btfsc	3,0
  2593  024B  2A52               	goto	l5157
  2594                           
  2595                           ;doprnt.c: 875: eexp--;
  2596  024C  30FF               	movlw	255
  2597  024D  07C9               	addwf	sprintf@eexp^(0+128),f
  2598  024E  1803               	skipnc
  2599  024F  0ACA               	incf	(sprintf@eexp+1)^(0+128),f
  2600  0250  30FF               	movlw	255
  2601  0251  2A6A               	goto	L1
  2602  0252                     l5157:
  2603                           
  2604                           ;doprnt.c: 876: else if(tmpval.integ >= 10.0)
  2605  0252  0845               	movf	sprintf@tmpval^(0+128),w
  2606  0253  00F2               	movwf	___ftge@ff1
  2607  0254  0846               	movf	(sprintf@tmpval+1)^(0+128),w
  2608  0255  00F3               	movwf	___ftge@ff1+1
  2609  0256  0847               	movf	(sprintf@tmpval+2)^(0+128),w
  2610  0257  00F4               	movwf	___ftge@ff1+2
  2611  0258  3000               	movlw	0
  2612  0259  00F5               	movwf	___ftge@ff2
  2613  025A  3020               	movlw	32
  2614  025B  00F6               	movwf	___ftge@ff2+1
  2615  025C  3041               	movlw	65
  2616  025D  00F7               	movwf	___ftge@ff2+2
  2617  025E  160A  158A  2466  120A  118A  	fcall	___ftge
  2618  0263  1C03               	btfss	3,0
  2619  0264  2A6B               	goto	l5161
  2620                           
  2621                           ;doprnt.c: 877: eexp++;
  2622  0265  3001               	movlw	1
  2623  0266  07C9               	addwf	sprintf@eexp^(0+128),f
  2624  0267  1803               	skipnc
  2625  0268  0ACA               	incf	(sprintf@eexp+1)^(0+128),f
  2626  0269  3000               	movlw	0
  2627  026A                     L1:
  2628  026A  07CA               	addwf	(sprintf@eexp+1)^(0+128),f
  2629  026B                     l5161:
  2630                           
  2631                           ;doprnt.c: 878: };doprnt.c: 1138: if(prec <= 12)
  2632  026B  0853               	movf	(sprintf@prec+1)^(0+128),w
  2633  026C  3A80               	xorlw	128
  2634  026D  00FF               	movwf	127
  2635  026E  3080               	movlw	128
  2636  026F  027F               	subwf	127,w
  2637  0270  1D03               	skipz
  2638  0271  2A74               	goto	u7255
  2639  0272  300D               	movlw	13
  2640  0273  0252               	subwf	sprintf@prec^(0+128),w
  2641  0274                     u7255:
  2642  0274  1803               	skipnc
  2643  0275  2AA0               	goto	l5165
  2644                           
  2645                           ;doprnt.c: 1139: fval += fround((unsigned int)prec);
  2646  0276  1683               	bsf	3,5	;RP0=1, select bank1
  2647  0277  1303               	bcf	3,6	;RP1=0, select bank1
  2648  0278  0852               	movf	sprintf@prec^(0+128),w
  2649  0279  120A  158A  2237  120A  118A  	fcall	_fround
  2650  027E  083F               	movf	?_fround,w
  2651  027F  00CA               	movwf	___ftadd@f1
  2652  0280  0840               	movf	?_fround+1,w
  2653  0281  00CB               	movwf	___ftadd@f1+1
  2654  0282  0841               	movf	?_fround+2,w
  2655  0283  00CC               	movwf	___ftadd@f1+2
  2656  0284  1683               	bsf	3,5	;RP0=1, select bank1
  2657  0285  084F               	movf	sprintf@fval^(0+128),w
  2658  0286  1283               	bcf	3,5	;RP0=0, select bank0
  2659  0287  00CD               	movwf	___ftadd@f2
  2660  0288  1683               	bsf	3,5	;RP0=1, select bank1
  2661  0289  0850               	movf	(sprintf@fval+1)^(0+128),w
  2662  028A  1283               	bcf	3,5	;RP0=0, select bank0
  2663  028B  00CE               	movwf	___ftadd@f2+1
  2664  028C  1683               	bsf	3,5	;RP0=1, select bank1
  2665  028D  0851               	movf	(sprintf@fval+2)^(0+128),w
  2666  028E  1283               	bcf	3,5	;RP0=0, select bank0
  2667  028F  00CF               	movwf	___ftadd@f2+2
  2668  0290  160A  118A  25E3  120A  118A  	fcall	___ftadd
  2669  0295  084A               	movf	?___ftadd,w
  2670  0296  1683               	bsf	3,5	;RP0=1, select bank1
  2671  0297  00CF               	movwf	sprintf@fval^(0+128)
  2672  0298  1283               	bcf	3,5	;RP0=0, select bank0
  2673  0299  084B               	movf	?___ftadd+1,w
  2674  029A  1683               	bsf	3,5	;RP0=1, select bank1
  2675  029B  00D0               	movwf	(sprintf@fval+1)^(0+128)
  2676  029C  1283               	bcf	3,5	;RP0=0, select bank0
  2677  029D  084C               	movf	?___ftadd+2,w
  2678  029E  1683               	bsf	3,5	;RP0=1, select bank1
  2679  029F  00D1               	movwf	(sprintf@fval+2)^(0+128)
  2680  02A0                     l5165:
  2681                           
  2682                           ;doprnt.c: 1142: if((eexp > 9)||(fval != 0 && (unsigned long)fval == 0 && eexp > 1)) {
  2683  02A0  1683               	bsf	3,5	;RP0=1, select bank1
  2684  02A1  1303               	bcf	3,6	;RP1=0, select bank1
  2685  02A2  084A               	movf	(sprintf@eexp+1)^(0+128),w
  2686  02A3  3A80               	xorlw	128
  2687  02A4  00FF               	movwf	127
  2688  02A5  3080               	movlw	128
  2689  02A6  027F               	subwf	127,w
  2690  02A7  1D03               	skipz
  2691  02A8  2AAB               	goto	u7265
  2692  02A9  300A               	movlw	10
  2693  02AA  0249               	subwf	sprintf@eexp^(0+128),w
  2694  02AB                     u7265:
  2695  02AB  1803               	skipnc
  2696  02AC  2AD6               	goto	l5173
  2697  02AD  1683               	bsf	3,5	;RP0=1, select bank1
  2698  02AE  1303               	bcf	3,6	;RP1=0, select bank1
  2699  02AF  0851               	movf	(sprintf@fval+2)^(0+128),w
  2700  02B0  0450               	iorwf	(sprintf@fval+1)^(0+128),w
  2701  02B1  044F               	iorwf	sprintf@fval^(0+128),w
  2702  02B2  1903               	skipnz
  2703  02B3  2B25               	goto	l5187
  2704  02B4  084F               	movf	sprintf@fval^(0+128),w
  2705  02B5  1283               	bcf	3,5	;RP0=0, select bank0
  2706  02B6  00CE               	movwf	___fttol@f1
  2707  02B7  1683               	bsf	3,5	;RP0=1, select bank1
  2708  02B8  0850               	movf	(sprintf@fval+1)^(0+128),w
  2709  02B9  1283               	bcf	3,5	;RP0=0, select bank0
  2710  02BA  00CF               	movwf	___fttol@f1+1
  2711  02BB  1683               	bsf	3,5	;RP0=1, select bank1
  2712  02BC  0851               	movf	(sprintf@fval+2)^(0+128),w
  2713  02BD  1283               	bcf	3,5	;RP0=0, select bank0
  2714  02BE  00D0               	movwf	___fttol@f1+2
  2715  02BF  160A  118A  21F4  120A  118A  	fcall	___fttol
  2716  02C4  0851               	movf	?___fttol+3,w
  2717  02C5  0450               	iorwf	?___fttol+2,w
  2718  02C6  044F               	iorwf	?___fttol+1,w
  2719  02C7  044E               	iorwf	?___fttol,w
  2720  02C8  1D03               	skipz
  2721  02C9  2B25               	goto	l5187
  2722  02CA  1683               	bsf	3,5	;RP0=1, select bank1
  2723  02CB  084A               	movf	(sprintf@eexp+1)^(0+128),w
  2724  02CC  3A80               	xorlw	128
  2725  02CD  00FF               	movwf	127
  2726  02CE  3080               	movlw	128
  2727  02CF  027F               	subwf	127,w
  2728  02D0  1D03               	skipz
  2729  02D1  2AD4               	goto	u7295
  2730  02D2  3002               	movlw	2
  2731  02D3  0249               	subwf	sprintf@eexp^(0+128),w
  2732  02D4                     u7295:
  2733  02D4  1C03               	skipc
  2734  02D5  2B25               	goto	l5187
  2735  02D6                     l5173:
  2736                           
  2737                           ;doprnt.c: 1146: if(tmpval.integ < 4.294967296){
  2738  02D6  1683               	bsf	3,5	;RP0=1, select bank1
  2739  02D7  1303               	bcf	3,6	;RP1=0, select bank1
  2740  02D8  0845               	movf	sprintf@tmpval^(0+128),w
  2741  02D9  00F2               	movwf	___ftge@ff1
  2742  02DA  0846               	movf	(sprintf@tmpval+1)^(0+128),w
  2743  02DB  00F3               	movwf	___ftge@ff1+1
  2744  02DC  0847               	movf	(sprintf@tmpval+2)^(0+128),w
  2745  02DD  00F4               	movwf	___ftge@ff1+2
  2746  02DE  3070               	movlw	112
  2747  02DF  00F5               	movwf	___ftge@ff2
  2748  02E0  3089               	movlw	137
  2749  02E1  00F6               	movwf	___ftge@ff2+1
  2750  02E2  3040               	movlw	64
  2751  02E3  00F7               	movwf	___ftge@ff2+2
  2752  02E4  160A  158A  2466  120A  118A  	fcall	___ftge
  2753  02E9  1803               	btfsc	3,0
  2754  02EA  2AED               	goto	l5177
  2755                           
  2756                           ;doprnt.c: 1147: eexp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2757  02EB  30F7               	movlw	247
  2758  02EC  2AEE               	goto	L2
  2759  02ED                     l5177:	
  2760                           ;doprnt.c: 1148: }else{
  2761                           
  2762                           
  2763                           ;doprnt.c: 1149: eexp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2764  02ED  30F8               	movlw	248
  2765  02EE                     L2:
  2766  02EE  07C9               	addwf	sprintf@eexp^(0+128),f
  2767  02EF  1803               	skipnc
  2768  02F0  0ACA               	incf	(sprintf@eexp+1)^(0+128),f
  2769  02F1  30FF               	movlw	255
  2770  02F2  07CA               	addwf	(sprintf@eexp+1)^(0+128),f
  2771                           
  2772                           ;doprnt.c: 1150: };doprnt.c: 1151: tmpval.integ = scale(eexp);
  2773  02F3  0849               	movf	sprintf@eexp^(0+128),w
  2774  02F4  120A  158A  255A  120A  118A  	fcall	_scale
  2775  02F9  083F               	movf	?_scale,w
  2776  02FA  1683               	bsf	3,5	;RP0=1, select bank1
  2777  02FB  00C5               	movwf	sprintf@tmpval^(0+128)
  2778  02FC  1283               	bcf	3,5	;RP0=0, select bank0
  2779  02FD  0840               	movf	?_scale+1,w
  2780  02FE  1683               	bsf	3,5	;RP0=1, select bank1
  2781  02FF  00C6               	movwf	(sprintf@tmpval+1)^(0+128)
  2782  0300  1283               	bcf	3,5	;RP0=0, select bank0
  2783  0301  0841               	movf	?_scale+2,w
  2784  0302  1683               	bsf	3,5	;RP0=1, select bank1
  2785  0303  00C7               	movwf	(sprintf@tmpval+2)^(0+128)
  2786                           
  2787                           ;doprnt.c: 1152: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2788  0304  084F               	movf	sprintf@fval^(0+128),w
  2789  0305  00F2               	movwf	__tdiv_to_l_@f1
  2790  0306  0850               	movf	(sprintf@fval+1)^(0+128),w
  2791  0307  00F3               	movwf	__tdiv_to_l_@f1+1
  2792  0308  0851               	movf	(sprintf@fval+2)^(0+128),w
  2793  0309  00F4               	movwf	__tdiv_to_l_@f1+2
  2794  030A  0845               	movf	sprintf@tmpval^(0+128),w
  2795  030B  00F5               	movwf	__tdiv_to_l_@f2
  2796  030C  0846               	movf	(sprintf@tmpval+1)^(0+128),w
  2797  030D  00F6               	movwf	__tdiv_to_l_@f2+1
  2798  030E  0847               	movf	(sprintf@tmpval+2)^(0+128),w
  2799  030F  00F7               	movwf	__tdiv_to_l_@f2+2
  2800  0310  160A  118A  253B  120A  118A  	fcall	__tdiv_to_l_
  2801  0315  0875               	movf	?__tdiv_to_l_+3,w
  2802  0316  1683               	bsf	3,5	;RP0=1, select bank1
  2803  0317  00C4               	movwf	(sprintf@val+3)^(0+128)
  2804  0318  0874               	movf	?__tdiv_to_l_+2,w
  2805  0319  00C3               	movwf	(sprintf@val+2)^(0+128)
  2806  031A  0873               	movf	?__tdiv_to_l_+1,w
  2807  031B  00C2               	movwf	(sprintf@val+1)^(0+128)
  2808  031C  0872               	movf	?__tdiv_to_l_,w
  2809  031D  00C1               	movwf	sprintf@val^(0+128)
  2810                           
  2811                           ;doprnt.c: 1155: fval = 0.0;
  2812  031E  3000               	movlw	0
  2813  031F  00CF               	movwf	sprintf@fval^(0+128)
  2814  0320  3000               	movlw	0
  2815  0321  00D0               	movwf	(sprintf@fval+1)^(0+128)
  2816  0322  3000               	movlw	0
  2817  0323  00D1               	movwf	(sprintf@fval+2)^(0+128)
  2818                           
  2819                           ;doprnt.c: 1156: } else {
  2820  0324  2B7E               	goto	l5191
  2821  0325                     l5187:
  2822                           
  2823                           ;doprnt.c: 1157: val = (unsigned long)fval;
  2824  0325  1683               	bsf	3,5	;RP0=1, select bank1
  2825  0326  1303               	bcf	3,6	;RP1=0, select bank1
  2826  0327  084F               	movf	sprintf@fval^(0+128),w
  2827  0328  1283               	bcf	3,5	;RP0=0, select bank0
  2828  0329  00CE               	movwf	___fttol@f1
  2829  032A  1683               	bsf	3,5	;RP0=1, select bank1
  2830  032B  0850               	movf	(sprintf@fval+1)^(0+128),w
  2831  032C  1283               	bcf	3,5	;RP0=0, select bank0
  2832  032D  00CF               	movwf	___fttol@f1+1
  2833  032E  1683               	bsf	3,5	;RP0=1, select bank1
  2834  032F  0851               	movf	(sprintf@fval+2)^(0+128),w
  2835  0330  1283               	bcf	3,5	;RP0=0, select bank0
  2836  0331  00D0               	movwf	___fttol@f1+2
  2837  0332  160A  118A  21F4  120A  118A  	fcall	___fttol
  2838  0337  0851               	movf	?___fttol+3,w
  2839  0338  1683               	bsf	3,5	;RP0=1, select bank1
  2840  0339  00C4               	movwf	(sprintf@val+3)^(0+128)
  2841  033A  1283               	bcf	3,5	;RP0=0, select bank0
  2842  033B  0850               	movf	?___fttol+2,w
  2843  033C  1683               	bsf	3,5	;RP0=1, select bank1
  2844  033D  00C3               	movwf	(sprintf@val+2)^(0+128)
  2845  033E  1283               	bcf	3,5	;RP0=0, select bank0
  2846  033F  084F               	movf	?___fttol+1,w
  2847  0340  1683               	bsf	3,5	;RP0=1, select bank1
  2848  0341  00C2               	movwf	(sprintf@val+1)^(0+128)
  2849  0342  1283               	bcf	3,5	;RP0=0, select bank0
  2850  0343  084E               	movf	?___fttol,w
  2851  0344  1683               	bsf	3,5	;RP0=1, select bank1
  2852  0345  00C1               	movwf	sprintf@val^(0+128)
  2853                           
  2854                           ;doprnt.c: 1158: fval -= (double)val;
  2855  0346  0844               	movf	(sprintf@val+3)^(0+128),w
  2856  0347  1283               	bcf	3,5	;RP0=0, select bank0
  2857  0348  00A3               	movwf	___lltoft@c+3
  2858  0349  1683               	bsf	3,5	;RP0=1, select bank1
  2859  034A  0843               	movf	(sprintf@val+2)^(0+128),w
  2860  034B  1283               	bcf	3,5	;RP0=0, select bank0
  2861  034C  00A2               	movwf	___lltoft@c+2
  2862  034D  1683               	bsf	3,5	;RP0=1, select bank1
  2863  034E  0842               	movf	(sprintf@val+1)^(0+128),w
  2864  034F  1283               	bcf	3,5	;RP0=0, select bank0
  2865  0350  00A1               	movwf	___lltoft@c+1
  2866  0351  1683               	bsf	3,5	;RP0=1, select bank1
  2867  0352  0841               	movf	sprintf@val^(0+128),w
  2868  0353  1283               	bcf	3,5	;RP0=0, select bank0
  2869  0354  00A0               	movwf	___lltoft@c
  2870  0355  160A  158A  243B  120A  118A  	fcall	___lltoft
  2871  035A  0820               	movf	?___lltoft,w
  2872  035B  00D6               	movwf	___ftsub@f2
  2873  035C  0821               	movf	?___lltoft+1,w
  2874  035D  00D7               	movwf	___ftsub@f2+1
  2875  035E  0822               	movf	?___lltoft+2,w
  2876  035F  00D8               	movwf	___ftsub@f2+2
  2877  0360  1683               	bsf	3,5	;RP0=1, select bank1
  2878  0361  084F               	movf	sprintf@fval^(0+128),w
  2879  0362  1283               	bcf	3,5	;RP0=0, select bank0
  2880  0363  00D9               	movwf	___ftsub@f1
  2881  0364  1683               	bsf	3,5	;RP0=1, select bank1
  2882  0365  0850               	movf	(sprintf@fval+1)^(0+128),w
  2883  0366  1283               	bcf	3,5	;RP0=0, select bank0
  2884  0367  00DA               	movwf	___ftsub@f1+1
  2885  0368  1683               	bsf	3,5	;RP0=1, select bank1
  2886  0369  0851               	movf	(sprintf@fval+2)^(0+128),w
  2887  036A  1283               	bcf	3,5	;RP0=0, select bank0
  2888  036B  00DB               	movwf	___ftsub@f1+2
  2889  036C  160A  118A  216B  120A  118A  	fcall	___ftsub
  2890  0371  0856               	movf	?___ftsub,w
  2891  0372  1683               	bsf	3,5	;RP0=1, select bank1
  2892  0373  00CF               	movwf	sprintf@fval^(0+128)
  2893  0374  1283               	bcf	3,5	;RP0=0, select bank0
  2894  0375  0857               	movf	?___ftsub+1,w
  2895  0376  1683               	bsf	3,5	;RP0=1, select bank1
  2896  0377  00D0               	movwf	(sprintf@fval+1)^(0+128)
  2897  0378  1283               	bcf	3,5	;RP0=0, select bank0
  2898  0379  0858               	movf	?___ftsub+2,w
  2899  037A  1683               	bsf	3,5	;RP0=1, select bank1
  2900  037B  00D1               	movwf	(sprintf@fval+2)^(0+128)
  2901                           
  2902                           ;doprnt.c: 1159: eexp = 0;
  2903  037C  01C9               	clrf	sprintf@eexp^(0+128)
  2904  037D  01CA               	clrf	(sprintf@eexp+1)^(0+128)
  2905  037E                     l5191:
  2906                           
  2907                           ;doprnt.c: 1160: };doprnt.c: 1162: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ;
      +                           c++)
  2908  037E  01D5               	clrf	sprintf@c^(0+128)
  2909  037F  0AD5               	incf	sprintf@c^(0+128),f
  2910  0380                     l5197:
  2911                           
  2912                           ;doprnt.c: 1163: if(val < dpowers[c])
  2913  0380  0855               	movf	sprintf@c^(0+128),w
  2914  0381  1283               	bcf	3,5	;RP0=0, select bank0
  2915  0382  00E1               	movwf	??_sprintf
  2916  0383  3001               	movlw	1
  2917  0384                     u7315:
  2918  0384  1003               	clrc
  2919  0385  0DE1               	rlf	??_sprintf,f
  2920  0386  3EFF               	addlw	-1
  2921  0387  1D03               	skipz
  2922  0388  2B84               	goto	u7315
  2923  0389  1003               	clrc
  2924  038A  0D61               	rlf	??_sprintf,w
  2925  038B  3E60               	addlw	low (_dpowers| (0+32768))
  2926  038C  0084               	movwf	4
  2927  038D  3090               	movlw	high (_dpowers| (0+32768))
  2928  038E  1803               	skipnc
  2929  038F  3E01               	addlw	1
  2930  0390  00FF               	movwf	127
  2931  0391  160A  118A  2000  120A  118A  	fcall	stringtab
  2932  0396  00E2               	movwf	??_sprintf+1
  2933  0397  160A  118A  2000  120A  118A  	fcall	stringtab
  2934  039C  00E3               	movwf	??_sprintf+2
  2935  039D  160A  118A  2000  120A  118A  	fcall	stringtab
  2936  03A2  00E4               	movwf	??_sprintf+3
  2937  03A3  160A  118A  2000  120A  118A  	fcall	stringtab
  2938  03A8  00E5               	movwf	??_sprintf+4
  2939  03A9  0865               	movf	??_sprintf+4,w
  2940  03AA  1683               	bsf	3,5	;RP0=1, select bank1
  2941  03AB  0244               	subwf	(sprintf@val+3)^(0+128),w
  2942  03AC  1D03               	skipz
  2943  03AD  2BBE               	goto	u7325
  2944  03AE  1283               	bcf	3,5	;RP0=0, select bank0
  2945  03AF  0864               	movf	??_sprintf+3,w
  2946  03B0  1683               	bsf	3,5	;RP0=1, select bank1
  2947  03B1  0243               	subwf	(sprintf@val+2)^(0+128),w
  2948  03B2  1D03               	skipz
  2949  03B3  2BBE               	goto	u7325
  2950  03B4  1283               	bcf	3,5	;RP0=0, select bank0
  2951  03B5  0863               	movf	??_sprintf+2,w
  2952  03B6  1683               	bsf	3,5	;RP0=1, select bank1
  2953  03B7  0242               	subwf	(sprintf@val+1)^(0+128),w
  2954  03B8  1D03               	skipz
  2955  03B9  2BBE               	goto	u7325
  2956  03BA  1283               	bcf	3,5	;RP0=0, select bank0
  2957  03BB  0862               	movf	??_sprintf+1,w
  2958  03BC  1683               	bsf	3,5	;RP0=1, select bank1
  2959  03BD  0241               	subwf	sprintf@val^(0+128),w
  2960  03BE                     u7325:
  2961  03BE  1C03               	btfss	3,0
  2962  03BF  2BC8               	goto	l5205
  2963  03C0  3001               	movlw	1
  2964  03C1  00FF               	movwf	127
  2965  03C2  087F               	movf	127,w
  2966  03C3  07D5               	addwf	sprintf@c^(0+128),f
  2967  03C4  300A               	movlw	10
  2968  03C5  0655               	xorwf	sprintf@c^(0+128),w
  2969  03C6  1D03               	btfss	3,2
  2970  03C7  2B80               	goto	l5197
  2971  03C8                     l5205:
  2972                           
  2973                           ;doprnt.c: 1168: width -= prec + c + eexp;
  2974  03C8  0855               	movf	sprintf@c^(0+128),w
  2975  03C9  0752               	addwf	sprintf@prec^(0+128),w
  2976  03CA  1283               	bcf	3,5	;RP0=0, select bank0
  2977  03CB  00E1               	movwf	??_sprintf
  2978  03CC  1683               	bsf	3,5	;RP0=1, select bank1
  2979  03CD  0853               	movf	(sprintf@prec+1)^(0+128),w
  2980  03CE  1803               	skipnc
  2981  03CF  0A53               	incf	(sprintf@prec+1)^(0+128),w
  2982  03D0  1283               	bcf	3,5	;RP0=0, select bank0
  2983  03D1  00E2               	movwf	??_sprintf+1
  2984  03D2  1683               	bsf	3,5	;RP0=1, select bank1
  2985  03D3  0849               	movf	sprintf@eexp^(0+128),w
  2986  03D4  1283               	bcf	3,5	;RP0=0, select bank0
  2987  03D5  0761               	addwf	??_sprintf,w
  2988  03D6  00E3               	movwf	??_sprintf+2
  2989  03D7  1683               	bsf	3,5	;RP0=1, select bank1
  2990  03D8  084A               	movf	(sprintf@eexp+1)^(0+128),w
  2991  03D9  1803               	skipnc
  2992  03DA  0A4A               	incf	(sprintf@eexp+1)^(0+128),w
  2993  03DB  1283               	bcf	3,5	;RP0=0, select bank0
  2994  03DC  0762               	addwf	??_sprintf+1,w
  2995  03DD  00E4               	movwf	??_sprintf+3
  2996  03DE  0863               	movf	??_sprintf+2,w
  2997  03DF  1683               	bsf	3,5	;RP0=1, select bank1
  2998  03E0  02CD               	subwf	sprintf@width^(0+128),f
  2999  03E1  1283               	bcf	3,5	;RP0=0, select bank0
  3000  03E2  0864               	movf	??_sprintf+3,w
  3001  03E3  1683               	bsf	3,5	;RP0=1, select bank1
  3002  03E4  1C03               	skipc
  3003  03E5  03CE               	decf	(sprintf@width+1)^(0+128),f
  3004  03E6  02CE               	subwf	(sprintf@width+1)^(0+128),f
  3005                           
  3006                           ;doprnt.c: 1169: if(;doprnt.c: 1173: prec)
  3007  03E7  0852               	movf	sprintf@prec^(0+128),w
  3008  03E8  0453               	iorwf	(sprintf@prec+1)^(0+128),w
  3009  03E9  1903               	btfsc	3,2
  3010  03EA  2BF1               	goto	l5209
  3011                           
  3012                           ;doprnt.c: 1174: width--;
  3013  03EB  30FF               	movlw	255
  3014  03EC  07CD               	addwf	sprintf@width^(0+128),f
  3015  03ED  1803               	skipnc
  3016  03EE  0ACE               	incf	(sprintf@width+1)^(0+128),f
  3017  03EF  30FF               	movlw	255
  3018  03F0  07CE               	addwf	(sprintf@width+1)^(0+128),f
  3019  03F1                     l5209:
  3020                           
  3021                           ;doprnt.c: 1175: if(flag & 0x03)
  3022  03F1  084B               	movf	sprintf@flag^(0+128),w
  3023  03F2  3903               	andlw	3
  3024  03F3  1903               	btfsc	3,2
  3025  03F4  2BFB               	goto	l5213
  3026                           
  3027                           ;doprnt.c: 1176: width--;
  3028  03F5  30FF               	movlw	255
  3029  03F6  07CD               	addwf	sprintf@width^(0+128),f
  3030  03F7  1803               	skipnc
  3031  03F8  0ACE               	incf	(sprintf@width+1)^(0+128),f
  3032  03F9  30FF               	movlw	255
  3033  03FA  07CE               	addwf	(sprintf@width+1)^(0+128),f
  3034  03FB                     l5213:
  3035                           
  3036                           ;doprnt.c: 1179: if(flag & 0x04) {
  3037  03FB  1D4B               	btfss	sprintf@flag^(0+128),2
  3038  03FC  2C3E               	goto	l5235
  3039                           
  3040                           ;doprnt.c: 1183: if(flag & 0x03)
  3041  03FD  084B               	movf	sprintf@flag^(0+128),w
  3042  03FE  3903               	andlw	3
  3043  03FF  1903               	btfsc	3,2
  3044  0400  2C0C               	goto	l5227
  3045                           
  3046                           ;doprnt.c: 1185: ((*sp++ = ('-')));
  3047  0401  302D               	movlw	45
  3048  0402  00FF               	movwf	127
  3049  0403  0854               	movf	sprintf@sp^(0+128),w
  3050  0404  0084               	movwf	4
  3051  0405  087F               	movf	127,w
  3052  0406  1383               	bcf	3,7	;select IRP bank0
  3053  0407  0080               	movwf	0
  3054  0408  3001               	movlw	1
  3055  0409  00FF               	movwf	127
  3056  040A  087F               	movf	127,w
  3057  040B  07D4               	addwf	sprintf@sp^(0+128),f
  3058  040C                     l5227:
  3059  040C  084E               	movf	(sprintf@width+1)^(0+128),w
  3060  040D  3A80               	xorlw	128
  3061  040E  00FF               	movwf	127
  3062  040F  3080               	movlw	128
  3063  0410  027F               	subwf	127,w
  3064  0411  1D03               	skipz
  3065  0412  2C15               	goto	u7385
  3066  0413  3001               	movlw	1
  3067  0414  024D               	subwf	sprintf@width^(0+128),w
  3068  0415                     u7385:
  3069  0415  1C03               	btfss	3,0
  3070  0416  2C5A               	goto	l5249
  3071                           
  3072                           ;doprnt.c: 1195: ((*sp++ = ('0')));
  3073  0417  3030               	movlw	48
  3074  0418  00FF               	movwf	127
  3075  0419  1683               	bsf	3,5	;RP0=1, select bank1
  3076  041A  1303               	bcf	3,6	;RP1=0, select bank1
  3077  041B  0854               	movf	sprintf@sp^(0+128),w
  3078  041C  0084               	movwf	4
  3079  041D  087F               	movf	127,w
  3080  041E  1383               	bcf	3,7	;select IRP bank0
  3081  041F  0080               	movwf	0
  3082  0420  3001               	movlw	1
  3083  0421  00FF               	movwf	127
  3084  0422  087F               	movf	127,w
  3085  0423  07D4               	addwf	sprintf@sp^(0+128),f
  3086                           
  3087                           ;doprnt.c: 1196: width--;
  3088  0424  30FF               	movlw	255
  3089  0425  07CD               	addwf	sprintf@width^(0+128),f
  3090  0426  1803               	skipnc
  3091  0427  0ACE               	incf	(sprintf@width+1)^(0+128),f
  3092  0428  30FF               	movlw	255
  3093  0429  07CE               	addwf	(sprintf@width+1)^(0+128),f
  3094  042A  2C0C               	goto	l5227
  3095  042B                     l5229:
  3096                           
  3097                           ;doprnt.c: 1207: ((*sp++ = (' ')));
  3098  042B  3020               	movlw	32
  3099  042C  00FF               	movwf	127
  3100  042D  1683               	bsf	3,5	;RP0=1, select bank1
  3101  042E  1303               	bcf	3,6	;RP1=0, select bank1
  3102  042F  0854               	movf	sprintf@sp^(0+128),w
  3103  0430  0084               	movwf	4
  3104  0431  087F               	movf	127,w
  3105  0432  1383               	bcf	3,7	;select IRP bank0
  3106  0433  0080               	movwf	0
  3107  0434  3001               	movlw	1
  3108  0435  00FF               	movwf	127
  3109  0436  087F               	movf	127,w
  3110  0437  07D4               	addwf	sprintf@sp^(0+128),f
  3111                           
  3112                           ;doprnt.c: 1208: width--;
  3113  0438  30FF               	movlw	255
  3114  0439  07CD               	addwf	sprintf@width^(0+128),f
  3115  043A  1803               	skipnc
  3116  043B  0ACE               	incf	(sprintf@width+1)^(0+128),f
  3117  043C  30FF               	movlw	255
  3118  043D  07CE               	addwf	(sprintf@width+1)^(0+128),f
  3119  043E                     l5235:
  3120  043E  084E               	movf	(sprintf@width+1)^(0+128),w
  3121  043F  3A80               	xorlw	128
  3122  0440  00FF               	movwf	127
  3123  0441  3080               	movlw	128
  3124  0442  027F               	subwf	127,w
  3125  0443  1D03               	skipz
  3126  0444  2C47               	goto	u7395
  3127  0445  3001               	movlw	1
  3128  0446  024D               	subwf	sprintf@width^(0+128),w
  3129  0447                     u7395:
  3130  0447  1803               	skipnc
  3131  0448  2C2B               	goto	l5229
  3132                           
  3133                           ;doprnt.c: 1209: };doprnt.c: 1214: if(flag & 0x03)
  3134  0449  1683               	bsf	3,5	;RP0=1, select bank1
  3135  044A  1303               	bcf	3,6	;RP1=0, select bank1
  3136  044B  084B               	movf	sprintf@flag^(0+128),w
  3137  044C  3903               	andlw	3
  3138  044D  1903               	btfsc	3,2
  3139  044E  2C5A               	goto	l5249
  3140                           
  3141                           ;doprnt.c: 1216: ((*sp++ = ('-')));
  3142  044F  302D               	movlw	45
  3143  0450                     L3:
  3144  0450  00FF               	movwf	127
  3145  0451  0854               	movf	sprintf@sp^(0+128),w
  3146  0452  0084               	movwf	4
  3147  0453  087F               	movf	127,w
  3148  0454  1383               	bcf	3,7	;select IRP bank0
  3149  0455  0080               	movwf	0
  3150  0456  3001               	movlw	1
  3151  0457  00FF               	movwf	127
  3152  0458  087F               	movf	127,w
  3153  0459  07D4               	addwf	sprintf@sp^(0+128),f
  3154  045A                     l5249:
  3155  045A  3001               	movlw	1
  3156  045B  1683               	bsf	3,5	;RP0=1, select bank1
  3157  045C  1303               	bcf	3,6	;RP1=0, select bank1
  3158  045D  02D5               	subwf	sprintf@c^(0+128),f
  3159  045E  0A55               	incf	sprintf@c^(0+128),w
  3160  045F  1903               	btfsc	3,2
  3161  0460  2CD5               	goto	l5257
  3162                           
  3163                           ;doprnt.c: 1226: {;doprnt.c: 1227: tmpval.vd = val/dpowers[c];
  3164  0461  0855               	movf	sprintf@c^(0+128),w
  3165  0462  1283               	bcf	3,5	;RP0=0, select bank0
  3166  0463  00E1               	movwf	??_sprintf
  3167  0464  3001               	movlw	1
  3168  0465                     u7415:
  3169  0465  1003               	clrc
  3170  0466  0DE1               	rlf	??_sprintf,f
  3171  0467  3EFF               	addlw	-1
  3172  0468  1D03               	skipz
  3173  0469  2C65               	goto	u7415
  3174  046A  1003               	clrc
  3175  046B  0D61               	rlf	??_sprintf,w
  3176  046C  3E60               	addlw	low (_dpowers| (0+32768))
  3177  046D  0084               	movwf	4
  3178  046E  3090               	movlw	high (_dpowers| (0+32768))
  3179  046F  1803               	skipnc
  3180  0470  3E01               	addlw	1
  3181  0471  00FF               	movwf	127
  3182  0472  160A  118A  2000  120A  118A  	fcall	stringtab
  3183  0477  00F2               	movwf	___lldiv@divisor
  3184  0478  160A  118A  2000  120A  118A  	fcall	stringtab
  3185  047D  00F3               	movwf	___lldiv@divisor+1
  3186  047E  160A  118A  2000  120A  118A  	fcall	stringtab
  3187  0483  00F4               	movwf	___lldiv@divisor+2
  3188  0484  160A  118A  2000  120A  118A  	fcall	stringtab
  3189  0489  00F5               	movwf	___lldiv@divisor+3
  3190  048A  1683               	bsf	3,5	;RP0=1, select bank1
  3191  048B  0844               	movf	(sprintf@val+3)^(0+128),w
  3192  048C  00F9               	movwf	___lldiv@dividend+3
  3193  048D  0843               	movf	(sprintf@val+2)^(0+128),w
  3194  048E  00F8               	movwf	___lldiv@dividend+2
  3195  048F  0842               	movf	(sprintf@val+1)^(0+128),w
  3196  0490  00F7               	movwf	___lldiv@dividend+1
  3197  0491  0841               	movf	sprintf@val^(0+128),w
  3198  0492  00F6               	movwf	___lldiv@dividend
  3199  0493  160A  158A  27A1  120A  118A  	fcall	___lldiv
  3200  0498  0875               	movf	?___lldiv+3,w
  3201  0499  1683               	bsf	3,5	;RP0=1, select bank1
  3202  049A  00C8               	movwf	(sprintf@tmpval+3)^(0+128)
  3203  049B  0874               	movf	?___lldiv+2,w
  3204  049C  00C7               	movwf	(sprintf@tmpval+2)^(0+128)
  3205  049D  0873               	movf	?___lldiv+1,w
  3206  049E  00C6               	movwf	(sprintf@tmpval+1)^(0+128)
  3207  049F  0872               	movf	?___lldiv,w
  3208  04A0  00C5               	movwf	sprintf@tmpval^(0+128)
  3209                           
  3210                           ;doprnt.c: 1228: tmpval.vd %= 10;
  3211  04A1  3000               	movlw	0
  3212  04A2  00F5               	movwf	___llmod@divisor+3
  3213  04A3  3000               	movlw	0
  3214  04A4  00F4               	movwf	___llmod@divisor+2
  3215  04A5  3000               	movlw	0
  3216  04A6  00F3               	movwf	___llmod@divisor+1
  3217  04A7  300A               	movlw	10
  3218  04A8  00F2               	movwf	___llmod@divisor
  3219  04A9  0848               	movf	(sprintf@tmpval+3)^(0+128),w
  3220  04AA  00F9               	movwf	___llmod@dividend+3
  3221  04AB  0847               	movf	(sprintf@tmpval+2)^(0+128),w
  3222  04AC  00F8               	movwf	___llmod@dividend+2
  3223  04AD  0846               	movf	(sprintf@tmpval+1)^(0+128),w
  3224  04AE  00F7               	movwf	___llmod@dividend+1
  3225  04AF  0845               	movf	sprintf@tmpval^(0+128),w
  3226  04B0  00F6               	movwf	___llmod@dividend
  3227  04B1  160A  158A  264B  120A  118A  	fcall	___llmod
  3228  04B6  0875               	movf	?___llmod+3,w
  3229  04B7  1683               	bsf	3,5	;RP0=1, select bank1
  3230  04B8  00C8               	movwf	(sprintf@tmpval+3)^(0+128)
  3231  04B9  0874               	movf	?___llmod+2,w
  3232  04BA  00C7               	movwf	(sprintf@tmpval+2)^(0+128)
  3233  04BB  0873               	movf	?___llmod+1,w
  3234  04BC  00C6               	movwf	(sprintf@tmpval+1)^(0+128)
  3235  04BD  0872               	movf	?___llmod,w
  3236  04BE  00C5               	movwf	sprintf@tmpval^(0+128)
  3237                           
  3238                           ;doprnt.c: 1229: ((*sp++ = ('0' + tmpval.vd)));
  3239  04BF  0845               	movf	sprintf@tmpval^(0+128),w
  3240  04C0  3E30               	addlw	48
  3241  04C1  2C50               	goto	L3
  3242  04C2                     l5251:
  3243                           
  3244                           ;doprnt.c: 1234: ((*sp++ = ('0')));
  3245  04C2  3030               	movlw	48
  3246  04C3  00FF               	movwf	127
  3247  04C4  1683               	bsf	3,5	;RP0=1, select bank1
  3248  04C5  1303               	bcf	3,6	;RP1=0, select bank1
  3249  04C6  0854               	movf	sprintf@sp^(0+128),w
  3250  04C7  0084               	movwf	4
  3251  04C8  087F               	movf	127,w
  3252  04C9  1383               	bcf	3,7	;select IRP bank0
  3253  04CA  0080               	movwf	0
  3254  04CB  3001               	movlw	1
  3255  04CC  00FF               	movwf	127
  3256  04CD  087F               	movf	127,w
  3257  04CE  07D4               	addwf	sprintf@sp^(0+128),f
  3258                           
  3259                           ;doprnt.c: 1235: eexp--;
  3260  04CF  30FF               	movlw	255
  3261  04D0  07C9               	addwf	sprintf@eexp^(0+128),f
  3262  04D1  1803               	skipnc
  3263  04D2  0ACA               	incf	(sprintf@eexp+1)^(0+128),f
  3264  04D3  30FF               	movlw	255
  3265  04D4  07CA               	addwf	(sprintf@eexp+1)^(0+128),f
  3266  04D5                     l5257:
  3267  04D5  084A               	movf	(sprintf@eexp+1)^(0+128),w
  3268  04D6  3A80               	xorlw	128
  3269  04D7  00FF               	movwf	127
  3270  04D8  3080               	movlw	128
  3271  04D9  027F               	subwf	127,w
  3272  04DA  1D03               	skipz
  3273  04DB  2CDE               	goto	u7435
  3274  04DC  3001               	movlw	1
  3275  04DD  0249               	subwf	sprintf@eexp^(0+128),w
  3276  04DE                     u7435:
  3277  04DE  1803               	skipnc
  3278  04DF  2CC2               	goto	l5251
  3279                           
  3280                           ;doprnt.c: 1236: };doprnt.c: 1237: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2)
      +                          )
  3281  04E0  1683               	bsf	3,5	;RP0=1, select bank1
  3282  04E1  1303               	bcf	3,6	;RP1=0, select bank1
  3283  04E2  0853               	movf	(sprintf@prec+1)^(0+128),w
  3284  04E3  3A80               	xorlw	128
  3285  04E4  00FF               	movwf	127
  3286  04E5  3080               	movlw	128
  3287  04E6  027F               	subwf	127,w
  3288  04E7  1D03               	skipz
  3289  04E8  2CEB               	goto	u7445
  3290  04E9  3009               	movlw	9
  3291  04EA  0252               	subwf	sprintf@prec^(0+128),w
  3292  04EB                     u7445:
  3293  04EB  1C03               	skipc
  3294  04EC  2CF3               	goto	l5263
  3295                           
  3296                           ;doprnt.c: 1238: c = (sizeof dpowers/sizeof dpowers[0])-2;
  3297  04ED  3008               	movlw	8
  3298  04EE  00FF               	movwf	127
  3299  04EF  087F               	movf	127,w
  3300  04F0  1683               	bsf	3,5	;RP0=1, select bank1
  3301  04F1  1303               	bcf	3,6	;RP1=0, select bank1
  3302  04F2  2CF8               	goto	L4
  3303  04F3                     l5263:
  3304                           
  3305                           ;doprnt.c: 1239: else;doprnt.c: 1240: c = (char)prec;
  3306  04F3  1683               	bsf	3,5	;RP0=1, select bank1
  3307  04F4  1303               	bcf	3,6	;RP1=0, select bank1
  3308  04F5  0852               	movf	sprintf@prec^(0+128),w
  3309  04F6  00FF               	movwf	127
  3310  04F7  087F               	movf	127,w
  3311  04F8                     L4:
  3312  04F8  00D5               	movwf	sprintf@c^(0+128)
  3313                           
  3314                           ;doprnt.c: 1241: prec -= (int)c;
  3315  04F9  0855               	movf	sprintf@c^(0+128),w
  3316  04FA  1283               	bcf	3,5	;RP0=0, select bank0
  3317  04FB  00E1               	movwf	??_sprintf
  3318  04FC  01E2               	clrf	??_sprintf+1
  3319  04FD  0861               	movf	??_sprintf,w
  3320  04FE  1683               	bsf	3,5	;RP0=1, select bank1
  3321  04FF  02D2               	subwf	sprintf@prec^(0+128),f
  3322  0500  1283               	bcf	3,5	;RP0=0, select bank0
  3323  0501  0862               	movf	??_sprintf+1,w
  3324  0502  1683               	bsf	3,5	;RP0=1, select bank1
  3325  0503  1C03               	skipc
  3326  0504  03D3               	decf	(sprintf@prec+1)^(0+128),f
  3327  0505  02D3               	subwf	(sprintf@prec+1)^(0+128),f
  3328                           
  3329                           ;doprnt.c: 1245: if(c)
  3330  0506  0855               	movf	sprintf@c^(0+128),w
  3331  0507  1903               	btfsc	3,2
  3332  0508  2D14               	goto	l5273
  3333                           
  3334                           ;doprnt.c: 1247: ((*sp++ = ('.')));
  3335  0509  302E               	movlw	46
  3336  050A  00FF               	movwf	127
  3337  050B  0854               	movf	sprintf@sp^(0+128),w
  3338  050C  0084               	movwf	4
  3339  050D  087F               	movf	127,w
  3340  050E  1383               	bcf	3,7	;select IRP bank0
  3341  050F  0080               	movwf	0
  3342  0510  3001               	movlw	1
  3343  0511  00FF               	movwf	127
  3344  0512  087F               	movf	127,w
  3345  0513  07D4               	addwf	sprintf@sp^(0+128),f
  3346  0514                     l5273:
  3347                           
  3348                           ;doprnt.c: 1253: val = (unsigned long)(fval * scale((signed char)c));
  3349  0514  0855               	movf	sprintf@c^(0+128),w
  3350  0515  120A  158A  255A  120A  118A  	fcall	_scale
  3351  051A  083F               	movf	?_scale,w
  3352  051B  1683               	bsf	3,5	;RP0=1, select bank1
  3353  051C  00BD               	movwf	_sprintf$1157^(0+128)
  3354  051D  1283               	bcf	3,5	;RP0=0, select bank0
  3355  051E  0840               	movf	?_scale+1,w
  3356  051F  1683               	bsf	3,5	;RP0=1, select bank1
  3357  0520  00BE               	movwf	(_sprintf$1157+1)^(0+128)
  3358  0521  1283               	bcf	3,5	;RP0=0, select bank0
  3359  0522  0841               	movf	?_scale+2,w
  3360  0523  1683               	bsf	3,5	;RP0=1, select bank1
  3361  0524  00BF               	movwf	(_sprintf$1157+2)^(0+128)
  3362                           
  3363                           ;doprnt.c: 1253: val = (unsigned long)(fval * scale((signed char)c));
  3364  0525  083D               	movf	_sprintf$1157^(0+128),w
  3365  0526  1283               	bcf	3,5	;RP0=0, select bank0
  3366  0527  00B3               	movwf	___ftmul@f2
  3367  0528  1683               	bsf	3,5	;RP0=1, select bank1
  3368  0529  083E               	movf	(_sprintf$1157+1)^(0+128),w
  3369  052A  1283               	bcf	3,5	;RP0=0, select bank0
  3370  052B  00B4               	movwf	___ftmul@f2+1
  3371  052C  1683               	bsf	3,5	;RP0=1, select bank1
  3372  052D  083F               	movf	(_sprintf$1157+2)^(0+128),w
  3373  052E  1283               	bcf	3,5	;RP0=0, select bank0
  3374  052F  00B5               	movwf	___ftmul@f2+2
  3375  0530  1683               	bsf	3,5	;RP0=1, select bank1
  3376  0531  084F               	movf	sprintf@fval^(0+128),w
  3377  0532  1283               	bcf	3,5	;RP0=0, select bank0
  3378  0533  00B0               	movwf	___ftmul@f1
  3379  0534  1683               	bsf	3,5	;RP0=1, select bank1
  3380  0535  0850               	movf	(sprintf@fval+1)^(0+128),w
  3381  0536  1283               	bcf	3,5	;RP0=0, select bank0
  3382  0537  00B1               	movwf	___ftmul@f1+1
  3383  0538  1683               	bsf	3,5	;RP0=1, select bank1
  3384  0539  0851               	movf	(sprintf@fval+2)^(0+128),w
  3385  053A  1283               	bcf	3,5	;RP0=0, select bank0
  3386  053B  00B2               	movwf	___ftmul@f1+2
  3387  053C  120A  158A  2022  120A  118A  	fcall	___ftmul
  3388  0541  0830               	movf	?___ftmul,w
  3389  0542  00CE               	movwf	___fttol@f1
  3390  0543  0831               	movf	?___ftmul+1,w
  3391  0544  00CF               	movwf	___fttol@f1+1
  3392  0545  0832               	movf	?___ftmul+2,w
  3393  0546  00D0               	movwf	___fttol@f1+2
  3394  0547  160A  118A  21F4  120A  118A  	fcall	___fttol
  3395  054C  0851               	movf	?___fttol+3,w
  3396  054D  1683               	bsf	3,5	;RP0=1, select bank1
  3397  054E  00C4               	movwf	(sprintf@val+3)^(0+128)
  3398  054F  1283               	bcf	3,5	;RP0=0, select bank0
  3399  0550  0850               	movf	?___fttol+2,w
  3400  0551  1683               	bsf	3,5	;RP0=1, select bank1
  3401  0552  00C3               	movwf	(sprintf@val+2)^(0+128)
  3402  0553  1283               	bcf	3,5	;RP0=0, select bank0
  3403  0554  084F               	movf	?___fttol+1,w
  3404  0555  1683               	bsf	3,5	;RP0=1, select bank1
  3405  0556  00C2               	movwf	(sprintf@val+1)^(0+128)
  3406  0557  1283               	bcf	3,5	;RP0=0, select bank0
  3407  0558  084E               	movf	?___fttol,w
  3408  0559  1683               	bsf	3,5	;RP0=1, select bank1
  3409  055A                     L5:
  3410  055A  00C1               	movwf	sprintf@val^(0+128)
  3411  055B  3001               	movlw	1
  3412  055C  02D5               	subwf	sprintf@c^(0+128),f
  3413  055D  0A55               	incf	sprintf@c^(0+128),w
  3414  055E  1903               	btfsc	3,2
  3415  055F  2E1B               	goto	l5293
  3416                           
  3417                           ;doprnt.c: 1255: tmpval.vd = val/dpowers[c];
  3418                           
  3419                           ;doprnt.c: 1254: while(c--) {
  3420  0560  0855               	movf	sprintf@c^(0+128),w
  3421  0561  1283               	bcf	3,5	;RP0=0, select bank0
  3422  0562  00E1               	movwf	??_sprintf
  3423  0563  3001               	movlw	1
  3424  0564                     u7465:
  3425  0564  1003               	clrc
  3426  0565  0DE1               	rlf	??_sprintf,f
  3427  0566  3EFF               	addlw	-1
  3428  0567  1D03               	skipz
  3429  0568  2D64               	goto	u7465
  3430  0569  1003               	clrc
  3431  056A  0D61               	rlf	??_sprintf,w
  3432  056B  3E60               	addlw	low (_dpowers| (0+32768))
  3433  056C  0084               	movwf	4
  3434  056D  3090               	movlw	high (_dpowers| (0+32768))
  3435  056E  1803               	skipnc
  3436  056F  3E01               	addlw	1
  3437  0570  00FF               	movwf	127
  3438  0571  160A  118A  2000  120A  118A  	fcall	stringtab
  3439  0576  00F2               	movwf	___lldiv@divisor
  3440  0577  160A  118A  2000  120A  118A  	fcall	stringtab
  3441  057C  00F3               	movwf	___lldiv@divisor+1
  3442  057D  160A  118A  2000  120A  118A  	fcall	stringtab
  3443  0582  00F4               	movwf	___lldiv@divisor+2
  3444  0583  160A  118A  2000  120A  118A  	fcall	stringtab
  3445  0588  00F5               	movwf	___lldiv@divisor+3
  3446  0589  1683               	bsf	3,5	;RP0=1, select bank1
  3447  058A  0844               	movf	(sprintf@val+3)^(0+128),w
  3448  058B  00F9               	movwf	___lldiv@dividend+3
  3449  058C  0843               	movf	(sprintf@val+2)^(0+128),w
  3450  058D  00F8               	movwf	___lldiv@dividend+2
  3451  058E  0842               	movf	(sprintf@val+1)^(0+128),w
  3452  058F  00F7               	movwf	___lldiv@dividend+1
  3453  0590  0841               	movf	sprintf@val^(0+128),w
  3454  0591  00F6               	movwf	___lldiv@dividend
  3455  0592  160A  158A  27A1  120A  118A  	fcall	___lldiv
  3456  0597  0875               	movf	?___lldiv+3,w
  3457  0598  1683               	bsf	3,5	;RP0=1, select bank1
  3458  0599  00C8               	movwf	(sprintf@tmpval+3)^(0+128)
  3459  059A  0874               	movf	?___lldiv+2,w
  3460  059B  00C7               	movwf	(sprintf@tmpval+2)^(0+128)
  3461  059C  0873               	movf	?___lldiv+1,w
  3462  059D  00C6               	movwf	(sprintf@tmpval+1)^(0+128)
  3463  059E  0872               	movf	?___lldiv,w
  3464  059F  00C5               	movwf	sprintf@tmpval^(0+128)
  3465                           
  3466                           ;doprnt.c: 1256: tmpval.vd %= 10;
  3467  05A0  3000               	movlw	0
  3468  05A1  00F5               	movwf	___llmod@divisor+3
  3469  05A2  3000               	movlw	0
  3470  05A3  00F4               	movwf	___llmod@divisor+2
  3471  05A4  3000               	movlw	0
  3472  05A5  00F3               	movwf	___llmod@divisor+1
  3473  05A6  300A               	movlw	10
  3474  05A7  00F2               	movwf	___llmod@divisor
  3475  05A8  0848               	movf	(sprintf@tmpval+3)^(0+128),w
  3476  05A9  00F9               	movwf	___llmod@dividend+3
  3477  05AA  0847               	movf	(sprintf@tmpval+2)^(0+128),w
  3478  05AB  00F8               	movwf	___llmod@dividend+2
  3479  05AC  0846               	movf	(sprintf@tmpval+1)^(0+128),w
  3480  05AD  00F7               	movwf	___llmod@dividend+1
  3481  05AE  0845               	movf	sprintf@tmpval^(0+128),w
  3482  05AF  00F6               	movwf	___llmod@dividend
  3483  05B0  160A  158A  264B  120A  118A  	fcall	___llmod
  3484  05B5  0875               	movf	?___llmod+3,w
  3485  05B6  1683               	bsf	3,5	;RP0=1, select bank1
  3486  05B7  00C8               	movwf	(sprintf@tmpval+3)^(0+128)
  3487  05B8  0874               	movf	?___llmod+2,w
  3488  05B9  00C7               	movwf	(sprintf@tmpval+2)^(0+128)
  3489  05BA  0873               	movf	?___llmod+1,w
  3490  05BB  00C6               	movwf	(sprintf@tmpval+1)^(0+128)
  3491  05BC  0872               	movf	?___llmod,w
  3492  05BD  00C5               	movwf	sprintf@tmpval^(0+128)
  3493                           
  3494                           ;doprnt.c: 1257: ((*sp++ = ('0' + tmpval.vd)));
  3495  05BE  0845               	movf	sprintf@tmpval^(0+128),w
  3496  05BF  3E30               	addlw	48
  3497  05C0  00FF               	movwf	127
  3498  05C1  0854               	movf	sprintf@sp^(0+128),w
  3499  05C2  0084               	movwf	4
  3500  05C3  087F               	movf	127,w
  3501  05C4  1383               	bcf	3,7	;select IRP bank0
  3502  05C5  0080               	movwf	0
  3503  05C6  3001               	movlw	1
  3504  05C7  00FF               	movwf	127
  3505  05C8  087F               	movf	127,w
  3506  05C9  07D4               	addwf	sprintf@sp^(0+128),f
  3507                           
  3508                           ;doprnt.c: 1258: val %= dpowers[c];
  3509  05CA  0855               	movf	sprintf@c^(0+128),w
  3510  05CB  1283               	bcf	3,5	;RP0=0, select bank0
  3511  05CC  00E1               	movwf	??_sprintf
  3512  05CD  3001               	movlw	1
  3513  05CE                     u7475:
  3514  05CE  1003               	clrc
  3515  05CF  0DE1               	rlf	??_sprintf,f
  3516  05D0  3EFF               	addlw	-1
  3517  05D1  1D03               	skipz
  3518  05D2  2DCE               	goto	u7475
  3519  05D3  1003               	clrc
  3520  05D4  0D61               	rlf	??_sprintf,w
  3521  05D5  3E60               	addlw	low (_dpowers| (0+32768))
  3522  05D6  0084               	movwf	4
  3523  05D7  3090               	movlw	high (_dpowers| (0+32768))
  3524  05D8  1803               	skipnc
  3525  05D9  3E01               	addlw	1
  3526  05DA  00FF               	movwf	127
  3527  05DB  160A  118A  2000  120A  118A  	fcall	stringtab
  3528  05E0  00F2               	movwf	___llmod@divisor
  3529  05E1  160A  118A  2000  120A  118A  	fcall	stringtab
  3530  05E6  00F3               	movwf	___llmod@divisor+1
  3531  05E7  160A  118A  2000  120A  118A  	fcall	stringtab
  3532  05EC  00F4               	movwf	___llmod@divisor+2
  3533  05ED  160A  118A  2000  120A  118A  	fcall	stringtab
  3534  05F2  00F5               	movwf	___llmod@divisor+3
  3535  05F3  1683               	bsf	3,5	;RP0=1, select bank1
  3536  05F4  0844               	movf	(sprintf@val+3)^(0+128),w
  3537  05F5  00F9               	movwf	___llmod@dividend+3
  3538  05F6  0843               	movf	(sprintf@val+2)^(0+128),w
  3539  05F7  00F8               	movwf	___llmod@dividend+2
  3540  05F8  0842               	movf	(sprintf@val+1)^(0+128),w
  3541  05F9  00F7               	movwf	___llmod@dividend+1
  3542  05FA  0841               	movf	sprintf@val^(0+128),w
  3543  05FB  00F6               	movwf	___llmod@dividend
  3544  05FC  160A  158A  264B  120A  118A  	fcall	___llmod
  3545  0601  0875               	movf	?___llmod+3,w
  3546  0602  1683               	bsf	3,5	;RP0=1, select bank1
  3547  0603  00C4               	movwf	(sprintf@val+3)^(0+128)
  3548  0604  0874               	movf	?___llmod+2,w
  3549  0605  00C3               	movwf	(sprintf@val+2)^(0+128)
  3550  0606  0873               	movf	?___llmod+1,w
  3551  0607  00C2               	movwf	(sprintf@val+1)^(0+128)
  3552  0608  0872               	movf	?___llmod,w
  3553  0609  2D5A               	goto	L5
  3554  060A                     l5287:
  3555                           
  3556                           ;doprnt.c: 1262: ((*sp++ = ('0')));
  3557  060A  3030               	movlw	48
  3558  060B  00FF               	movwf	127
  3559  060C  0854               	movf	sprintf@sp^(0+128),w
  3560  060D  0084               	movwf	4
  3561  060E  087F               	movf	127,w
  3562  060F  1383               	bcf	3,7	;select IRP bank0
  3563  0610  0080               	movwf	0
  3564  0611  3001               	movlw	1
  3565  0612  00FF               	movwf	127
  3566  0613  087F               	movf	127,w
  3567  0614  07D4               	addwf	sprintf@sp^(0+128),f
  3568                           
  3569                           ;doprnt.c: 1263: prec--;
  3570  0615  30FF               	movlw	255
  3571  0616  07D2               	addwf	sprintf@prec^(0+128),f
  3572  0617  1803               	skipnc
  3573  0618  0AD3               	incf	(sprintf@prec+1)^(0+128),f
  3574  0619  30FF               	movlw	255
  3575  061A  07D3               	addwf	(sprintf@prec+1)^(0+128),f
  3576  061B                     l5293:
  3577  061B  0852               	movf	sprintf@prec^(0+128),w
  3578  061C  0453               	iorwf	(sprintf@prec+1)^(0+128),w
  3579  061D  1903               	btfsc	3,2
  3580  061E  282C               	goto	l5357
  3581  061F  2E0A               	goto	l5287
  3582  0620                     l5295:
  3583                           
  3584                           ;doprnt.c: 1272: };doprnt.c: 1316: if(prec == 0 && val == 0)
  3585  0620  1683               	bsf	3,5	;RP0=1, select bank1
  3586  0621  0852               	movf	sprintf@prec^(0+128),w
  3587  0622  0453               	iorwf	(sprintf@prec+1)^(0+128),w
  3588  0623  1D03               	btfss	3,2
  3589  0624  2E31               	goto	l586
  3590  0625  0844               	movf	(sprintf@val+3)^(0+128),w
  3591  0626  0443               	iorwf	(sprintf@val+2)^(0+128),w
  3592  0627  0442               	iorwf	(sprintf@val+1)^(0+128),w
  3593  0628  0441               	iorwf	sprintf@val^(0+128),w
  3594  0629  1D03               	skipz
  3595  062A  2E31               	goto	l586
  3596                           
  3597                           ;doprnt.c: 1317: prec++;
  3598  062B  3001               	movlw	1
  3599  062C  07D2               	addwf	sprintf@prec^(0+128),f
  3600  062D  1803               	skipnc
  3601  062E  0AD3               	incf	(sprintf@prec+1)^(0+128),f
  3602  062F  3000               	movlw	0
  3603  0630  07D3               	addwf	(sprintf@prec+1)^(0+128),f
  3604  0631                     l586:
  3605                           
  3606                           ;doprnt.c: 1365: if(c < prec)
  3607  0631  0853               	movf	(sprintf@prec+1)^(0+128),w
  3608  0632  3A80               	xorlw	128
  3609  0633  3C80               	sublw	128
  3610  0634  1D03               	skipz
  3611  0635  2E38               	goto	u7525
  3612  0636  0852               	movf	sprintf@prec^(0+128),w
  3613  0637  0255               	subwf	sprintf@c^(0+128),w
  3614  0638                     u7525:
  3615  0638  1803               	skipnc
  3616  0639  2E41               	goto	l5303
  3617                           
  3618                           ;doprnt.c: 1366: c = (char)prec;
  3619  063A  1683               	bsf	3,5	;RP0=1, select bank1
  3620  063B  1303               	bcf	3,6	;RP1=0, select bank1
  3621  063C  0852               	movf	sprintf@prec^(0+128),w
  3622  063D  00FF               	movwf	127
  3623  063E  087F               	movf	127,w
  3624  063F  00D5               	movwf	sprintf@c^(0+128)
  3625  0640  2E5D               	goto	l5307
  3626  0641                     l5303:
  3627                           
  3628                           ;doprnt.c: 1367: else if(prec < c)
  3629  0641  1683               	bsf	3,5	;RP0=1, select bank1
  3630  0642  1303               	bcf	3,6	;RP1=0, select bank1
  3631  0643  0853               	movf	(sprintf@prec+1)^(0+128),w
  3632  0644  3A80               	xorlw	128
  3633  0645  1283               	bcf	3,5	;RP0=0, select bank0
  3634  0646  00E1               	movwf	??_sprintf
  3635  0647  3080               	movlw	128
  3636  0648  0261               	subwf	??_sprintf,w
  3637  0649  1D03               	skipz
  3638  064A  2E4E               	goto	u7535
  3639  064B  1683               	bsf	3,5	;RP0=1, select bank1
  3640  064C  0855               	movf	sprintf@c^(0+128),w
  3641  064D  0252               	subwf	sprintf@prec^(0+128),w
  3642  064E                     u7535:
  3643  064E  1803               	skipnc
  3644  064F  2E5D               	goto	l5307
  3645                           
  3646                           ;doprnt.c: 1368: prec = c;
  3647  0650  1683               	bsf	3,5	;RP0=1, select bank1
  3648  0651  1303               	bcf	3,6	;RP1=0, select bank1
  3649  0652  0855               	movf	sprintf@c^(0+128),w
  3650  0653  1283               	bcf	3,5	;RP0=0, select bank0
  3651  0654  00E1               	movwf	??_sprintf
  3652  0655  01E2               	clrf	??_sprintf+1
  3653  0656  0861               	movf	??_sprintf,w
  3654  0657  1683               	bsf	3,5	;RP0=1, select bank1
  3655  0658  00D2               	movwf	sprintf@prec^(0+128)
  3656  0659  1283               	bcf	3,5	;RP0=0, select bank0
  3657  065A  0862               	movf	??_sprintf+1,w
  3658  065B  1683               	bsf	3,5	;RP0=1, select bank1
  3659  065C  00D3               	movwf	(sprintf@prec+1)^(0+128)
  3660  065D                     l5307:
  3661                           
  3662                           ;doprnt.c: 1371: if(width && flag & 0x03)
  3663  065D  1683               	bsf	3,5	;RP0=1, select bank1
  3664  065E  1303               	bcf	3,6	;RP1=0, select bank1
  3665  065F  084D               	movf	sprintf@width^(0+128),w
  3666  0660  044E               	iorwf	(sprintf@width+1)^(0+128),w
  3667  0661  1903               	btfsc	3,2
  3668  0662  2E6D               	goto	l5313
  3669  0663  084B               	movf	sprintf@flag^(0+128),w
  3670  0664  3903               	andlw	3
  3671  0665  1903               	btfsc	3,2
  3672  0666  2E6D               	goto	l5313
  3673                           
  3674                           ;doprnt.c: 1372: width--;
  3675  0667  30FF               	movlw	255
  3676  0668  07CD               	addwf	sprintf@width^(0+128),f
  3677  0669  1803               	skipnc
  3678  066A  0ACE               	incf	(sprintf@width+1)^(0+128),f
  3679  066B  30FF               	movlw	255
  3680  066C  07CE               	addwf	(sprintf@width+1)^(0+128),f
  3681  066D                     l5313:
  3682                           
  3683                           ;doprnt.c: 1374: if(flag & 0x4000) {
  3684  066D  1F4C               	btfss	(sprintf@flag+1)^(0+128),6
  3685  066E  2E8C               	goto	l5321
  3686                           
  3687                           ;doprnt.c: 1375: if(width > prec)
  3688  066F  0853               	movf	(sprintf@prec+1)^(0+128),w
  3689  0670  3A80               	xorlw	128
  3690  0671  1283               	bcf	3,5	;RP0=0, select bank0
  3691  0672  00E1               	movwf	??_sprintf
  3692  0673  1683               	bsf	3,5	;RP0=1, select bank1
  3693  0674  084E               	movf	(sprintf@width+1)^(0+128),w
  3694  0675  3A80               	xorlw	128
  3695  0676  1283               	bcf	3,5	;RP0=0, select bank0
  3696  0677  0261               	subwf	??_sprintf,w
  3697  0678  1D03               	skipz
  3698  0679  2E7D               	goto	u7575
  3699  067A  1683               	bsf	3,5	;RP0=1, select bank1
  3700  067B  084D               	movf	sprintf@width^(0+128),w
  3701  067C  0252               	subwf	sprintf@prec^(0+128),w
  3702  067D                     u7575:
  3703  067D  1803               	skipnc
  3704  067E  2E88               	goto	l5319
  3705                           
  3706                           ;doprnt.c: 1376: width -= prec;
  3707  067F  1683               	bsf	3,5	;RP0=1, select bank1
  3708  0680  1303               	bcf	3,6	;RP1=0, select bank1
  3709  0681  0852               	movf	sprintf@prec^(0+128),w
  3710  0682  02CD               	subwf	sprintf@width^(0+128),f
  3711  0683  0853               	movf	(sprintf@prec+1)^(0+128),w
  3712  0684  1C03               	skipc
  3713  0685  03CE               	decf	(sprintf@width+1)^(0+128),f
  3714  0686  02CE               	subwf	(sprintf@width+1)^(0+128),f
  3715  0687  2E8C               	goto	l5321
  3716  0688                     l5319:
  3717                           
  3718                           ;doprnt.c: 1377: else;doprnt.c: 1378: width = 0;
  3719  0688  1683               	bsf	3,5	;RP0=1, select bank1
  3720  0689  1303               	bcf	3,6	;RP1=0, select bank1
  3721  068A  01CD               	clrf	sprintf@width^(0+128)
  3722  068B  01CE               	clrf	(sprintf@width+1)^(0+128)
  3723  068C                     l5321:
  3724                           
  3725                           ;doprnt.c: 1379: };doprnt.c: 1407: if(width > c)
  3726  068C  084E               	movf	(sprintf@width+1)^(0+128),w
  3727  068D  3A80               	xorlw	128
  3728  068E  3C80               	sublw	128
  3729  068F  1D03               	skipz
  3730  0690  2E93               	goto	u7585
  3731  0691  084D               	movf	sprintf@width^(0+128),w
  3732  0692  0255               	subwf	sprintf@c^(0+128),w
  3733  0693                     u7585:
  3734  0693  1803               	skipnc
  3735  0694  2EA5               	goto	l5325
  3736                           
  3737                           ;doprnt.c: 1408: width -= c;
  3738  0695  1683               	bsf	3,5	;RP0=1, select bank1
  3739  0696  1303               	bcf	3,6	;RP1=0, select bank1
  3740  0697  0855               	movf	sprintf@c^(0+128),w
  3741  0698  1283               	bcf	3,5	;RP0=0, select bank0
  3742  0699  00E1               	movwf	??_sprintf
  3743  069A  01E2               	clrf	??_sprintf+1
  3744  069B  0861               	movf	??_sprintf,w
  3745  069C  1683               	bsf	3,5	;RP0=1, select bank1
  3746  069D  02CD               	subwf	sprintf@width^(0+128),f
  3747  069E  1283               	bcf	3,5	;RP0=0, select bank0
  3748  069F  0862               	movf	??_sprintf+1,w
  3749  06A0  1683               	bsf	3,5	;RP0=1, select bank1
  3750  06A1  1C03               	skipc
  3751  06A2  03CE               	decf	(sprintf@width+1)^(0+128),f
  3752  06A3  02CE               	subwf	(sprintf@width+1)^(0+128),f
  3753  06A4  2EA9               	goto	l5327
  3754  06A5                     l5325:
  3755                           
  3756                           ;doprnt.c: 1409: else;doprnt.c: 1410: width = 0;
  3757  06A5  1683               	bsf	3,5	;RP0=1, select bank1
  3758  06A6  1303               	bcf	3,6	;RP1=0, select bank1
  3759  06A7  01CD               	clrf	sprintf@width^(0+128)
  3760  06A8  01CE               	clrf	(sprintf@width+1)^(0+128)
  3761  06A9                     l5327:
  3762                           
  3763                           ;doprnt.c: 1413: if(flag & 0x04) {
  3764  06A9  1D4B               	btfss	sprintf@flag^(0+128),2
  3765  06AA  2ED0               	goto	l5343
  3766                           
  3767                           ;doprnt.c: 1418: if(flag & 0x03)
  3768  06AB  084B               	movf	sprintf@flag^(0+128),w
  3769  06AC  3903               	andlw	3
  3770  06AD  1903               	btfsc	3,2
  3771  06AE  2EBA               	goto	l5335
  3772                           
  3773                           ;doprnt.c: 1419: ((*sp++ = ('-')));
  3774  06AF  302D               	movlw	45
  3775  06B0  00FF               	movwf	127
  3776  06B1  0854               	movf	sprintf@sp^(0+128),w
  3777  06B2  0084               	movwf	4
  3778  06B3  087F               	movf	127,w
  3779  06B4  1383               	bcf	3,7	;select IRP bank0
  3780  06B5  0080               	movwf	0
  3781  06B6  3001               	movlw	1
  3782  06B7  00FF               	movwf	127
  3783  06B8  087F               	movf	127,w
  3784  06B9  07D4               	addwf	sprintf@sp^(0+128),f
  3785  06BA                     l5335:
  3786                           
  3787                           ;doprnt.c: 1441: if(width)
  3788  06BA  084D               	movf	sprintf@width^(0+128),w
  3789  06BB  044E               	iorwf	(sprintf@width+1)^(0+128),w
  3790  06BC  1903               	btfsc	3,2
  3791  06BD  282C               	goto	l5357
  3792                           
  3793                           ;doprnt.c: 1443: ((*sp++ = ('0')));
  3794  06BE  3030               	movlw	48
  3795  06BF  00FF               	movwf	127
  3796  06C0  0854               	movf	sprintf@sp^(0+128),w
  3797  06C1  0084               	movwf	4
  3798  06C2  087F               	movf	127,w
  3799  06C3  1383               	bcf	3,7	;select IRP bank0
  3800  06C4  0080               	movwf	0
  3801  06C5  3001               	movlw	1
  3802  06C6  00FF               	movwf	127
  3803  06C7  087F               	movf	127,w
  3804  06C8  07D4               	addwf	sprintf@sp^(0+128),f
  3805                           
  3806                           ;doprnt.c: 1444: while(--width);
  3807  06C9  30FF               	movlw	255
  3808  06CA  07CD               	addwf	sprintf@width^(0+128),f
  3809  06CB  1803               	skipnc
  3810  06CC  0ACE               	incf	(sprintf@width+1)^(0+128),f
  3811  06CD  30FF               	movlw	255
  3812  06CE  07CE               	addwf	(sprintf@width+1)^(0+128),f
  3813  06CF  2EBA               	goto	l5335
  3814  06D0                     l5343:
  3815                           
  3816                           ;doprnt.c: 1448: {;doprnt.c: 1450: if(width;doprnt.c: 1454: )
  3817  06D0  084D               	movf	sprintf@width^(0+128),w
  3818  06D1  044E               	iorwf	(sprintf@width+1)^(0+128),w
  3819  06D2  1903               	btfsc	3,2
  3820  06D3  2EE9               	goto	l5351
  3821  06D4                     l5345:
  3822                           
  3823                           ;doprnt.c: 1456: ((*sp++ = (' ')));
  3824  06D4  3020               	movlw	32
  3825  06D5  00FF               	movwf	127
  3826  06D6  0854               	movf	sprintf@sp^(0+128),w
  3827  06D7  0084               	movwf	4
  3828  06D8  087F               	movf	127,w
  3829  06D9  1383               	bcf	3,7	;select IRP bank0
  3830  06DA  0080               	movwf	0
  3831  06DB  3001               	movlw	1
  3832  06DC  00FF               	movwf	127
  3833  06DD  087F               	movf	127,w
  3834  06DE  07D4               	addwf	sprintf@sp^(0+128),f
  3835                           
  3836                           ;doprnt.c: 1457: while(--width);
  3837  06DF  30FF               	movlw	255
  3838  06E0  07CD               	addwf	sprintf@width^(0+128),f
  3839  06E1  1803               	skipnc
  3840  06E2  0ACE               	incf	(sprintf@width+1)^(0+128),f
  3841  06E3  30FF               	movlw	255
  3842  06E4  07CE               	addwf	(sprintf@width+1)^(0+128),f
  3843  06E5  084D               	movf	sprintf@width^(0+128),w
  3844  06E6  044E               	iorwf	(sprintf@width+1)^(0+128),w
  3845  06E7  1D03               	btfss	3,2
  3846  06E8  2ED4               	goto	l5345
  3847  06E9                     l5351:
  3848                           
  3849                           ;doprnt.c: 1464: if(flag & 0x03)
  3850  06E9  084B               	movf	sprintf@flag^(0+128),w
  3851  06EA  3903               	andlw	3
  3852  06EB  1903               	btfsc	3,2
  3853  06EC  282C               	goto	l5357
  3854                           
  3855                           ;doprnt.c: 1465: ((*sp++ = ('-')));
  3856  06ED  302D               	movlw	45
  3857  06EE                     L6:
  3858  06EE  00FF               	movwf	127
  3859  06EF  0854               	movf	sprintf@sp^(0+128),w
  3860  06F0  0084               	movwf	4
  3861  06F1  087F               	movf	127,w
  3862  06F2  1383               	bcf	3,7	;select IRP bank0
  3863  06F3  0080               	movwf	0
  3864  06F4  3001               	movlw	1
  3865  06F5  00FF               	movwf	127
  3866  06F6  087F               	movf	127,w
  3867  06F7  07D4               	addwf	sprintf@sp^(0+128),f
  3868  06F8  282C               	goto	l5357
  3869  06F9                     l5359:
  3870                           
  3871                           ;doprnt.c: 1564: *sp = 0;
  3872  06F9  0854               	movf	sprintf@sp^(0+128),w
  3873  06FA  0084               	movwf	4
  3874  06FB  1383               	bcf	3,7	;select IRP bank0
  3875  06FC  0180               	clrf	0
  3876  06FD  0008               	return
  3877  06FE                     __end_of_sprintf:
  3878                           
  3879                           	psect	text4
  3880  0D5A                     __ptext4:	
  3881 ;; *************** function _scale *****************
  3882 ;; Defined at:
  3883 ;;		line 433 in file "D:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c"
  3884 ;; Parameters:    Size  Location     Type
  3885 ;;  scl             1    wreg     char 
  3886 ;; Auto vars:     Size  Location     Type
  3887 ;;  scl             1   38[BANK0 ] char 
  3888 ;; Return value:  Size  Location     Type
  3889 ;;                  3   31[BANK0 ] char 
  3890 ;; Registers used:
  3891 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3892 ;; Tracked objects:
  3893 ;;		On entry : 300/100
  3894 ;;		On exit  : 300/0
  3895 ;;		Unchanged: 0/0
  3896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3897 ;;      Params:         0       4       0       0       0
  3898 ;;      Locals:         0       4       0       0       0
  3899 ;;      Temps:          0       0       0       0       0
  3900 ;;      Totals:         0       8       0       0       0
  3901 ;;Total ram usage:        8 bytes
  3902 ;; Hardware stack levels used:    1
  3903 ;; Hardware stack levels required when called:    3
  3904 ;; This function calls:
  3905 ;;		___awdiv
  3906 ;;		___awmod
  3907 ;;		___bmul
  3908 ;;		___ftmul
  3909 ;; This function is called by:
  3910 ;;		_sprintf
  3911 ;; This function uses a non-reentrant model
  3912 ;;
  3913                           
  3914                           
  3915                           ;psect for function _scale
  3916  0D5A                     _scale:
  3917                           
  3918                           ;incstack = 0
  3919                           ; Regs used in _scale: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3920                           ;scale@scl stored from wreg
  3921  0D5A  1283               	bcf	3,5	;RP0=0, select bank0
  3922  0D5B  00C6               	movwf	scale@scl
  3923                           
  3924                           ;doprnt.c: 436: if(scl < 0) {
  3925  0D5C  1FC6               	btfss	scale@scl,7
  3926  0D5D  2EB0               	goto	l4881
  3927                           
  3928                           ;doprnt.c: 437: scl = -scl;
  3929  0D5E  09C6               	comf	scale@scl,f
  3930  0D5F  0AC6               	incf	scale@scl,f
  3931                           
  3932                           ;doprnt.c: 438: if(scl>=110)
  3933  0D60  0846               	movf	scale@scl,w
  3934  0D61  3A80               	xorlw	128
  3935  0D62  3E12               	addlw	-238
  3936  0D63  1C03               	skipc
  3937  0D64  2E1F               	goto	l4871
  3938                           
  3939                           ;doprnt.c: 439: return _npowers_[(unsigned char)(scl/100+18)] * _npowers_[(unsigned char
      +                          )((scl%100)/10+9)] * _npowers_[(unsigned char)(scl%10)];
  3940  0D65  3003               	movlw	3
  3941  0D66  00FF               	movwf	127
  3942  0D67  087F               	movf	127,w
  3943  0D68  00A8               	movwf	___bmul@multiplicand
  3944  0D69  300A               	movlw	10
  3945  0D6A  00A0               	movwf	___awdiv@divisor
  3946  0D6B  3000               	movlw	0
  3947  0D6C  00A1               	movwf	___awdiv@divisor+1
  3948  0D6D  0846               	movf	scale@scl,w
  3949  0D6E  00F4               	movwf	___awmod@dividend
  3950  0D6F  01F5               	clrf	___awmod@dividend+1
  3951  0D70  1BF4               	btfsc	___awmod@dividend,7
  3952  0D71  03F5               	decf	___awmod@dividend+1,f
  3953  0D72  3064               	movlw	100
  3954  0D73  00F2               	movwf	___awmod@divisor
  3955  0D74  3000               	movlw	0
  3956  0D75  00F3               	movwf	___awmod@divisor+1
  3957  0D76  160A  158A  2600  120A  158A  	fcall	___awmod
  3958  0D7B  0873               	movf	?___awmod+1,w
  3959  0D7C  00A3               	movwf	___awdiv@dividend+1
  3960  0D7D  0872               	movf	?___awmod,w
  3961  0D7E  00A2               	movwf	___awdiv@dividend
  3962  0D7F  160A  158A  26EC  120A  158A  	fcall	___awdiv
  3963  0D84  0820               	movf	?___awdiv,w
  3964  0D85  3E09               	addlw	9
  3965  0D86  160A  158A  22FC  120A  158A  	fcall	___bmul
  3966  0D8B  3E39               	addlw	low (__npowers_| (0+32768))
  3967  0D8C  0084               	movwf	4
  3968  0D8D  3090               	movlw	high (__npowers_| (0+32768))
  3969  0D8E  1803               	skipnc
  3970  0D8F  3E01               	addlw	1
  3971  0D90  00FF               	movwf	127
  3972  0D91  160A  118A  2000  120A  158A  	fcall	stringtab
  3973  0D96  00B0               	movwf	___ftmul@f1
  3974  0D97  160A  118A  2000  120A  158A  	fcall	stringtab
  3975  0D9C  00B1               	movwf	___ftmul@f1+1
  3976  0D9D  160A  118A  2000  120A  158A  	fcall	stringtab
  3977  0DA2  00B2               	movwf	___ftmul@f1+2
  3978  0DA3  3003               	movlw	3
  3979  0DA4  00FF               	movwf	127
  3980  0DA5  087F               	movf	127,w
  3981  0DA6  00A8               	movwf	___bmul@multiplicand
  3982  0DA7  3064               	movlw	100
  3983  0DA8  00A0               	movwf	___awdiv@divisor
  3984  0DA9  3000               	movlw	0
  3985  0DAA  00A1               	movwf	___awdiv@divisor+1
  3986  0DAB  0846               	movf	scale@scl,w
  3987  0DAC  00A2               	movwf	___awdiv@dividend
  3988  0DAD  01A3               	clrf	___awdiv@dividend+1
  3989  0DAE  1BA2               	btfsc	___awdiv@dividend,7
  3990  0DAF  03A3               	decf	___awdiv@dividend+1,f
  3991  0DB0  160A  158A  26EC  120A  158A  	fcall	___awdiv
  3992  0DB5  0820               	movf	?___awdiv,w
  3993  0DB6  3E12               	addlw	18
  3994  0DB7  160A  158A  22FC  120A  158A  	fcall	___bmul
  3995  0DBC  3E39               	addlw	low (__npowers_| (0+32768))
  3996  0DBD  0084               	movwf	4
  3997  0DBE  3090               	movlw	high (__npowers_| (0+32768))
  3998  0DBF  1803               	skipnc
  3999  0DC0  3E01               	addlw	1
  4000  0DC1  00FF               	movwf	127
  4001  0DC2  160A  118A  2000  120A  158A  	fcall	stringtab
  4002  0DC7  00B3               	movwf	___ftmul@f2
  4003  0DC8  160A  118A  2000  120A  158A  	fcall	stringtab
  4004  0DCD  00B4               	movwf	___ftmul@f2+1
  4005  0DCE  160A  118A  2000  120A  158A  	fcall	stringtab
  4006  0DD3  00B5               	movwf	___ftmul@f2+2
  4007  0DD4  120A  158A  2022  120A  158A  	fcall	___ftmul
  4008  0DD9  0830               	movf	?___ftmul,w
  4009  0DDA  00C3               	movwf	_scale$1156
  4010  0DDB  0831               	movf	?___ftmul+1,w
  4011  0DDC  00C4               	movwf	_scale$1156+1
  4012  0DDD  0832               	movf	?___ftmul+2,w
  4013  0DDE  00C5               	movwf	_scale$1156+2
  4014                           
  4015                           ;doprnt.c: 439: return _npowers_[(unsigned char)(scl/100+18)] * _npowers_[(unsigned char
      +                          )((scl%100)/10+9)] * _npowers_[(unsigned char)(scl%10)];
  4016  0DDF  3003               	movlw	3
  4017  0DE0  00FF               	movwf	127
  4018  0DE1  087F               	movf	127,w
  4019  0DE2  00A8               	movwf	___bmul@multiplicand
  4020  0DE3  0846               	movf	scale@scl,w
  4021  0DE4  00F4               	movwf	___awmod@dividend
  4022  0DE5  01F5               	clrf	___awmod@dividend+1
  4023  0DE6  1BF4               	btfsc	___awmod@dividend,7
  4024  0DE7  03F5               	decf	___awmod@dividend+1,f
  4025  0DE8  300A               	movlw	10
  4026  0DE9  00F2               	movwf	___awmod@divisor
  4027  0DEA  3000               	movlw	0
  4028  0DEB  00F3               	movwf	___awmod@divisor+1
  4029  0DEC  160A  158A  2600  120A  158A  	fcall	___awmod
  4030  0DF1  0872               	movf	?___awmod,w
  4031  0DF2  160A  158A  22FC  120A  158A  	fcall	___bmul
  4032  0DF7  3E39               	addlw	low (__npowers_| (0+32768))
  4033  0DF8  0084               	movwf	4
  4034  0DF9  3090               	movlw	high (__npowers_| (0+32768))
  4035  0DFA  1803               	skipnc
  4036  0DFB  3E01               	addlw	1
  4037  0DFC  00FF               	movwf	127
  4038  0DFD  160A  118A  2000  120A  158A  	fcall	stringtab
  4039  0E02  00B0               	movwf	___ftmul@f1
  4040  0E03  160A  118A  2000  120A  158A  	fcall	stringtab
  4041  0E08  00B1               	movwf	___ftmul@f1+1
  4042  0E09  160A  118A  2000  120A  158A  	fcall	stringtab
  4043  0E0E  00B2               	movwf	___ftmul@f1+2
  4044  0E0F  0843               	movf	_scale$1156,w
  4045  0E10  00B3               	movwf	___ftmul@f2
  4046  0E11  0844               	movf	_scale$1156+1,w
  4047  0E12  00B4               	movwf	___ftmul@f2+1
  4048  0E13  0845               	movf	_scale$1156+2,w
  4049  0E14  00B5               	movwf	___ftmul@f2+2
  4050  0E15  120A  158A  2022   	fcall	___ftmul
  4051  0E18  0830               	movf	?___ftmul,w
  4052  0E19  00BF               	movwf	?_scale
  4053  0E1A  0831               	movf	?___ftmul+1,w
  4054  0E1B  00C0               	movwf	?_scale+1
  4055  0E1C  0832               	movf	?___ftmul+2,w
  4056  0E1D  00C1               	movwf	?_scale+2
  4057  0E1E  0008               	return
  4058  0E1F                     l4871:
  4059                           
  4060                           ;doprnt.c: 440: else if(scl > 10)
  4061  0E1F  0846               	movf	scale@scl,w
  4062  0E20  3A80               	xorlw	128
  4063  0E21  3E75               	addlw	-139
  4064  0E22  1C03               	skipc
  4065  0E23  2E8F               	goto	l4877
  4066                           
  4067                           ;doprnt.c: 441: return _npowers_[(unsigned char)(scl/10+9)] * _npowers_[(unsigned char)(
      +                          scl%10)];
  4068  0E24  3003               	movlw	3
  4069  0E25  00FF               	movwf	127
  4070  0E26  087F               	movf	127,w
  4071  0E27  00A8               	movwf	___bmul@multiplicand
  4072  0E28  0846               	movf	scale@scl,w
  4073  0E29  00F4               	movwf	___awmod@dividend
  4074  0E2A  01F5               	clrf	___awmod@dividend+1
  4075  0E2B  1BF4               	btfsc	___awmod@dividend,7
  4076  0E2C  03F5               	decf	___awmod@dividend+1,f
  4077  0E2D  300A               	movlw	10
  4078  0E2E  00F2               	movwf	___awmod@divisor
  4079  0E2F  3000               	movlw	0
  4080  0E30  00F3               	movwf	___awmod@divisor+1
  4081  0E31  160A  158A  2600  120A  158A  	fcall	___awmod
  4082  0E36  0872               	movf	?___awmod,w
  4083  0E37  160A  158A  22FC  120A  158A  	fcall	___bmul
  4084  0E3C  3E39               	addlw	low (__npowers_| (0+32768))
  4085  0E3D  0084               	movwf	4
  4086  0E3E  3090               	movlw	high (__npowers_| (0+32768))
  4087  0E3F  1803               	skipnc
  4088  0E40  3E01               	addlw	1
  4089  0E41  00FF               	movwf	127
  4090  0E42  160A  118A  2000  120A  158A  	fcall	stringtab
  4091  0E47  00B0               	movwf	___ftmul@f1
  4092  0E48  160A  118A  2000  120A  158A  	fcall	stringtab
  4093  0E4D  00B1               	movwf	___ftmul@f1+1
  4094  0E4E  160A  118A  2000  120A  158A  	fcall	stringtab
  4095  0E53  00B2               	movwf	___ftmul@f1+2
  4096  0E54  3003               	movlw	3
  4097  0E55  00FF               	movwf	127
  4098  0E56  087F               	movf	127,w
  4099  0E57  00A8               	movwf	___bmul@multiplicand
  4100  0E58  300A               	movlw	10
  4101  0E59  00A0               	movwf	___awdiv@divisor
  4102  0E5A  3000               	movlw	0
  4103  0E5B  00A1               	movwf	___awdiv@divisor+1
  4104  0E5C  0846               	movf	scale@scl,w
  4105  0E5D  00A2               	movwf	___awdiv@dividend
  4106  0E5E  01A3               	clrf	___awdiv@dividend+1
  4107  0E5F  1BA2               	btfsc	___awdiv@dividend,7
  4108  0E60  03A3               	decf	___awdiv@dividend+1,f
  4109  0E61  160A  158A  26EC  120A  158A  	fcall	___awdiv
  4110  0E66  0820               	movf	?___awdiv,w
  4111  0E67  3E09               	addlw	9
  4112  0E68  160A  158A  22FC  120A  158A  	fcall	___bmul
  4113  0E6D  3E39               	addlw	low (__npowers_| (0+32768))
  4114  0E6E  0084               	movwf	4
  4115  0E6F  3090               	movlw	high (__npowers_| (0+32768))
  4116  0E70  1803               	skipnc
  4117  0E71  3E01               	addlw	1
  4118  0E72  00FF               	movwf	127
  4119  0E73  160A  118A  2000  120A  158A  	fcall	stringtab
  4120  0E78  00B3               	movwf	___ftmul@f2
  4121  0E79  160A  118A  2000  120A  158A  	fcall	stringtab
  4122  0E7E  00B4               	movwf	___ftmul@f2+1
  4123  0E7F  160A  118A  2000  120A  158A  	fcall	stringtab
  4124  0E84  00B5               	movwf	___ftmul@f2+2
  4125  0E85  120A  158A  2022   	fcall	___ftmul
  4126  0E88  0830               	movf	?___ftmul,w
  4127  0E89  00BF               	movwf	?_scale
  4128  0E8A  0831               	movf	?___ftmul+1,w
  4129  0E8B  00C0               	movwf	?_scale+1
  4130  0E8C  0832               	movf	?___ftmul+2,w
  4131  0E8D  00C1               	movwf	?_scale+2
  4132  0E8E  0008               	return
  4133  0E8F                     l4877:
  4134                           
  4135                           ;doprnt.c: 442: return _npowers_[(unsigned char)scl];
  4136  0E8F  3003               	movlw	3
  4137  0E90  00FF               	movwf	127
  4138  0E91  087F               	movf	127,w
  4139  0E92  00A8               	movwf	___bmul@multiplicand
  4140  0E93  0846               	movf	scale@scl,w
  4141  0E94  160A  158A  22FC  120A  158A  	fcall	___bmul
  4142  0E99  3E39               	addlw	low (__npowers_| (0+32768))
  4143  0E9A  0084               	movwf	4
  4144  0E9B  3090               	movlw	high (__npowers_| (0+32768))
  4145  0E9C  1803               	skipnc
  4146  0E9D  3E01               	addlw	1
  4147  0E9E  00FF               	movwf	127
  4148  0E9F  160A  118A  2000  120A  158A  	fcall	stringtab
  4149  0EA4  00BF               	movwf	?_scale
  4150  0EA5  160A  118A  2000  120A  158A  	fcall	stringtab
  4151  0EAA  00C0               	movwf	?_scale+1
  4152  0EAB  160A  118A  2000   	fcall	stringtab
  4153  0EAE  00C1               	movwf	?_scale+2
  4154  0EAF  0008               	return
  4155  0EB0                     l4881:
  4156                           
  4157                           ;doprnt.c: 443: };doprnt.c: 444: if(scl>=110)
  4158  0EB0  0846               	movf	scale@scl,w
  4159  0EB1  3A80               	xorlw	128
  4160  0EB2  3E12               	addlw	-238
  4161  0EB3  1C03               	skipc
  4162  0EB4  2F6F               	goto	l4889
  4163                           
  4164                           ;doprnt.c: 445: return _powers_[(unsigned char)(scl/100+18)] * _powers_[(unsigned char)(
      +                          (scl%100)/10+9)] * _powers_[(unsigned char)(scl%10)];
  4165  0EB5  3003               	movlw	3
  4166  0EB6  00FF               	movwf	127
  4167  0EB7  087F               	movf	127,w
  4168  0EB8  00A8               	movwf	___bmul@multiplicand
  4169  0EB9  300A               	movlw	10
  4170  0EBA  00A0               	movwf	___awdiv@divisor
  4171  0EBB  3000               	movlw	0
  4172  0EBC  00A1               	movwf	___awdiv@divisor+1
  4173  0EBD  0846               	movf	scale@scl,w
  4174  0EBE  00F4               	movwf	___awmod@dividend
  4175  0EBF  01F5               	clrf	___awmod@dividend+1
  4176  0EC0  1BF4               	btfsc	___awmod@dividend,7
  4177  0EC1  03F5               	decf	___awmod@dividend+1,f
  4178  0EC2  3064               	movlw	100
  4179  0EC3  00F2               	movwf	___awmod@divisor
  4180  0EC4  3000               	movlw	0
  4181  0EC5  00F3               	movwf	___awmod@divisor+1
  4182  0EC6  160A  158A  2600  120A  158A  	fcall	___awmod
  4183  0ECB  0873               	movf	?___awmod+1,w
  4184  0ECC  00A3               	movwf	___awdiv@dividend+1
  4185  0ECD  0872               	movf	?___awmod,w
  4186  0ECE  00A2               	movwf	___awdiv@dividend
  4187  0ECF  160A  158A  26EC  120A  158A  	fcall	___awdiv
  4188  0ED4  0820               	movf	?___awdiv,w
  4189  0ED5  3E09               	addlw	9
  4190  0ED6  160A  158A  22FC  120A  158A  	fcall	___bmul
  4191  0EDB  3E12               	addlw	low (__powers_| (0+32768))
  4192  0EDC  0084               	movwf	4
  4193  0EDD  3090               	movlw	high (__powers_| (0+32768))
  4194  0EDE  1803               	skipnc
  4195  0EDF  3E01               	addlw	1
  4196  0EE0  00FF               	movwf	127
  4197  0EE1  160A  118A  2000  120A  158A  	fcall	stringtab
  4198  0EE6  00B0               	movwf	___ftmul@f1
  4199  0EE7  160A  118A  2000  120A  158A  	fcall	stringtab
  4200  0EEC  00B1               	movwf	___ftmul@f1+1
  4201  0EED  160A  118A  2000  120A  158A  	fcall	stringtab
  4202  0EF2  00B2               	movwf	___ftmul@f1+2
  4203  0EF3  3003               	movlw	3
  4204  0EF4  00FF               	movwf	127
  4205  0EF5  087F               	movf	127,w
  4206  0EF6  00A8               	movwf	___bmul@multiplicand
  4207  0EF7  3064               	movlw	100
  4208  0EF8  00A0               	movwf	___awdiv@divisor
  4209  0EF9  3000               	movlw	0
  4210  0EFA  00A1               	movwf	___awdiv@divisor+1
  4211  0EFB  0846               	movf	scale@scl,w
  4212  0EFC  00A2               	movwf	___awdiv@dividend
  4213  0EFD  01A3               	clrf	___awdiv@dividend+1
  4214  0EFE  1BA2               	btfsc	___awdiv@dividend,7
  4215  0EFF  03A3               	decf	___awdiv@dividend+1,f
  4216  0F00  160A  158A  26EC  120A  158A  	fcall	___awdiv
  4217  0F05  0820               	movf	?___awdiv,w
  4218  0F06  3E12               	addlw	18
  4219  0F07  160A  158A  22FC  120A  158A  	fcall	___bmul
  4220  0F0C  3E12               	addlw	low (__powers_| (0+32768))
  4221  0F0D  0084               	movwf	4
  4222  0F0E  3090               	movlw	high (__powers_| (0+32768))
  4223  0F0F  1803               	skipnc
  4224  0F10  3E01               	addlw	1
  4225  0F11  00FF               	movwf	127
  4226  0F12  160A  118A  2000  120A  158A  	fcall	stringtab
  4227  0F17  00B3               	movwf	___ftmul@f2
  4228  0F18  160A  118A  2000  120A  158A  	fcall	stringtab
  4229  0F1D  00B4               	movwf	___ftmul@f2+1
  4230  0F1E  160A  118A  2000  120A  158A  	fcall	stringtab
  4231  0F23  00B5               	movwf	___ftmul@f2+2
  4232  0F24  120A  158A  2022  120A  158A  	fcall	___ftmul
  4233  0F29  0830               	movf	?___ftmul,w
  4234  0F2A  00C3               	movwf	_scale$1156
  4235  0F2B  0831               	movf	?___ftmul+1,w
  4236  0F2C  00C4               	movwf	_scale$1156+1
  4237  0F2D  0832               	movf	?___ftmul+2,w
  4238  0F2E  00C5               	movwf	_scale$1156+2
  4239                           
  4240                           ;doprnt.c: 445: return _powers_[(unsigned char)(scl/100+18)] * _powers_[(unsigned char)(
      +                          (scl%100)/10+9)] * _powers_[(unsigned char)(scl%10)];
  4241  0F2F  3003               	movlw	3
  4242  0F30  00FF               	movwf	127
  4243  0F31  087F               	movf	127,w
  4244  0F32  00A8               	movwf	___bmul@multiplicand
  4245  0F33  0846               	movf	scale@scl,w
  4246  0F34  00F4               	movwf	___awmod@dividend
  4247  0F35  01F5               	clrf	___awmod@dividend+1
  4248  0F36  1BF4               	btfsc	___awmod@dividend,7
  4249  0F37  03F5               	decf	___awmod@dividend+1,f
  4250  0F38  300A               	movlw	10
  4251  0F39  00F2               	movwf	___awmod@divisor
  4252  0F3A  3000               	movlw	0
  4253  0F3B  00F3               	movwf	___awmod@divisor+1
  4254  0F3C  160A  158A  2600  120A  158A  	fcall	___awmod
  4255  0F41  0872               	movf	?___awmod,w
  4256  0F42  160A  158A  22FC  120A  158A  	fcall	___bmul
  4257  0F47  3E12               	addlw	low (__powers_| (0+32768))
  4258  0F48  0084               	movwf	4
  4259  0F49  3090               	movlw	high (__powers_| (0+32768))
  4260  0F4A  1803               	skipnc
  4261  0F4B  3E01               	addlw	1
  4262  0F4C  00FF               	movwf	127
  4263  0F4D  160A  118A  2000  120A  158A  	fcall	stringtab
  4264  0F52  00B0               	movwf	___ftmul@f1
  4265  0F53  160A  118A  2000  120A  158A  	fcall	stringtab
  4266  0F58  00B1               	movwf	___ftmul@f1+1
  4267  0F59  160A  118A  2000  120A  158A  	fcall	stringtab
  4268  0F5E  00B2               	movwf	___ftmul@f1+2
  4269  0F5F  0843               	movf	_scale$1156,w
  4270  0F60  00B3               	movwf	___ftmul@f2
  4271  0F61  0844               	movf	_scale$1156+1,w
  4272  0F62  00B4               	movwf	___ftmul@f2+1
  4273  0F63  0845               	movf	_scale$1156+2,w
  4274  0F64  00B5               	movwf	___ftmul@f2+2
  4275  0F65  120A  158A  2022   	fcall	___ftmul
  4276  0F68  0830               	movf	?___ftmul,w
  4277  0F69  00BF               	movwf	?_scale
  4278  0F6A  0831               	movf	?___ftmul+1,w
  4279  0F6B  00C0               	movwf	?_scale+1
  4280  0F6C  0832               	movf	?___ftmul+2,w
  4281  0F6D  00C1               	movwf	?_scale+2
  4282  0F6E  0008               	return
  4283  0F6F                     l4889:
  4284                           
  4285                           ;doprnt.c: 446: else if(scl > 10)
  4286  0F6F  0846               	movf	scale@scl,w
  4287  0F70  3A80               	xorlw	128
  4288  0F71  3E75               	addlw	-139
  4289  0F72  1C03               	skipc
  4290  0F73  2FDF               	goto	l4895
  4291                           
  4292                           ;doprnt.c: 447: return _powers_[(unsigned char)(scl/10+9)] * _powers_[(unsigned char)(sc
      +                          l%10)];
  4293  0F74  3003               	movlw	3
  4294  0F75  00FF               	movwf	127
  4295  0F76  087F               	movf	127,w
  4296  0F77  00A8               	movwf	___bmul@multiplicand
  4297  0F78  0846               	movf	scale@scl,w
  4298  0F79  00F4               	movwf	___awmod@dividend
  4299  0F7A  01F5               	clrf	___awmod@dividend+1
  4300  0F7B  1BF4               	btfsc	___awmod@dividend,7
  4301  0F7C  03F5               	decf	___awmod@dividend+1,f
  4302  0F7D  300A               	movlw	10
  4303  0F7E  00F2               	movwf	___awmod@divisor
  4304  0F7F  3000               	movlw	0
  4305  0F80  00F3               	movwf	___awmod@divisor+1
  4306  0F81  160A  158A  2600  120A  158A  	fcall	___awmod
  4307  0F86  0872               	movf	?___awmod,w
  4308  0F87  160A  158A  22FC  120A  158A  	fcall	___bmul
  4309  0F8C  3E12               	addlw	low (__powers_| (0+32768))
  4310  0F8D  0084               	movwf	4
  4311  0F8E  3090               	movlw	high (__powers_| (0+32768))
  4312  0F8F  1803               	skipnc
  4313  0F90  3E01               	addlw	1
  4314  0F91  00FF               	movwf	127
  4315  0F92  160A  118A  2000  120A  158A  	fcall	stringtab
  4316  0F97  00B0               	movwf	___ftmul@f1
  4317  0F98  160A  118A  2000  120A  158A  	fcall	stringtab
  4318  0F9D  00B1               	movwf	___ftmul@f1+1
  4319  0F9E  160A  118A  2000  120A  158A  	fcall	stringtab
  4320  0FA3  00B2               	movwf	___ftmul@f1+2
  4321  0FA4  3003               	movlw	3
  4322  0FA5  00FF               	movwf	127
  4323  0FA6  087F               	movf	127,w
  4324  0FA7  00A8               	movwf	___bmul@multiplicand
  4325  0FA8  300A               	movlw	10
  4326  0FA9  00A0               	movwf	___awdiv@divisor
  4327  0FAA  3000               	movlw	0
  4328  0FAB  00A1               	movwf	___awdiv@divisor+1
  4329  0FAC  0846               	movf	scale@scl,w
  4330  0FAD  00A2               	movwf	___awdiv@dividend
  4331  0FAE  01A3               	clrf	___awdiv@dividend+1
  4332  0FAF  1BA2               	btfsc	___awdiv@dividend,7
  4333  0FB0  03A3               	decf	___awdiv@dividend+1,f
  4334  0FB1  160A  158A  26EC  120A  158A  	fcall	___awdiv
  4335  0FB6  0820               	movf	?___awdiv,w
  4336  0FB7  3E09               	addlw	9
  4337  0FB8  160A  158A  22FC  120A  158A  	fcall	___bmul
  4338  0FBD  3E12               	addlw	low (__powers_| (0+32768))
  4339  0FBE  0084               	movwf	4
  4340  0FBF  3090               	movlw	high (__powers_| (0+32768))
  4341  0FC0  1803               	skipnc
  4342  0FC1  3E01               	addlw	1
  4343  0FC2  00FF               	movwf	127
  4344  0FC3  160A  118A  2000  120A  158A  	fcall	stringtab
  4345  0FC8  00B3               	movwf	___ftmul@f2
  4346  0FC9  160A  118A  2000  120A  158A  	fcall	stringtab
  4347  0FCE  00B4               	movwf	___ftmul@f2+1
  4348  0FCF  160A  118A  2000  120A  158A  	fcall	stringtab
  4349  0FD4  00B5               	movwf	___ftmul@f2+2
  4350  0FD5  120A  158A  2022   	fcall	___ftmul
  4351  0FD8  0830               	movf	?___ftmul,w
  4352  0FD9  00BF               	movwf	?_scale
  4353  0FDA  0831               	movf	?___ftmul+1,w
  4354  0FDB  00C0               	movwf	?_scale+1
  4355  0FDC  0832               	movf	?___ftmul+2,w
  4356  0FDD  00C1               	movwf	?_scale+2
  4357  0FDE  0008               	return
  4358  0FDF                     l4895:
  4359                           
  4360                           ;doprnt.c: 448: return _powers_[(unsigned char)scl];
  4361  0FDF  3003               	movlw	3
  4362  0FE0  00FF               	movwf	127
  4363  0FE1  087F               	movf	127,w
  4364  0FE2  00A8               	movwf	___bmul@multiplicand
  4365  0FE3  0846               	movf	scale@scl,w
  4366  0FE4  160A  158A  22FC  120A  158A  	fcall	___bmul
  4367  0FE9  3E12               	addlw	low (__powers_| (0+32768))
  4368  0FEA  0084               	movwf	4
  4369  0FEB  3090               	movlw	high (__powers_| (0+32768))
  4370  0FEC  1803               	skipnc
  4371  0FED  3E01               	addlw	1
  4372  0FEE  00FF               	movwf	127
  4373  0FEF  160A  118A  2000  120A  158A  	fcall	stringtab
  4374  0FF4  00BF               	movwf	?_scale
  4375  0FF5  160A  118A  2000  120A  158A  	fcall	stringtab
  4376  0FFA  00C0               	movwf	?_scale+1
  4377  0FFB  160A  118A  2000   	fcall	stringtab
  4378  0FFE  00C1               	movwf	?_scale+2
  4379  0FFF  0008               	return
  4380  1000                     __end_of_scale:
  4381                           
  4382                           	psect	text5
  4383  1E00                     __ptext5:	
  4384 ;; *************** function ___awmod *****************
  4385 ;; Defined at:
  4386 ;;		line 5 in file "D:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\awmod.c"
  4387 ;; Parameters:    Size  Location     Type
  4388 ;;  divisor         2    2[COMMON] int 
  4389 ;;  dividend        2    4[COMMON] int 
  4390 ;; Auto vars:     Size  Location     Type
  4391 ;;  sign            1    7[COMMON] unsigned char 
  4392 ;;  counter         1    6[COMMON] unsigned char 
  4393 ;; Return value:  Size  Location     Type
  4394 ;;                  2    2[COMMON] int 
  4395 ;; Registers used:
  4396 ;;		wreg, status,2, status,0, btemp+1
  4397 ;; Tracked objects:
  4398 ;;		On entry : 300/0
  4399 ;;		On exit  : 300/0
  4400 ;;		Unchanged: 300/0
  4401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4402 ;;      Params:         4       0       0       0       0
  4403 ;;      Locals:         2       0       0       0       0
  4404 ;;      Temps:          0       0       0       0       0
  4405 ;;      Totals:         6       0       0       0       0
  4406 ;;Total ram usage:        6 bytes
  4407 ;; Hardware stack levels used:    1
  4408 ;; Hardware stack levels required when called:    1
  4409 ;; This function calls:
  4410 ;;		Nothing
  4411 ;; This function is called by:
  4412 ;;		_scale
  4413 ;; This function uses a non-reentrant model
  4414 ;;
  4415                           
  4416                           
  4417                           ;psect for function ___awmod
  4418  1E00                     ___awmod:
  4419                           
  4420                           ;incstack = 0
  4421                           ; Regs used in ___awmod: [wreg+status,2+status,0+btemp+1]
  4422  1E00  01F7               	clrf	___awmod@sign
  4423  1E01  1FF5               	btfss	___awmod@dividend+1,7
  4424  1E02  2E0A               	goto	l3237
  4425  1E03  09F4               	comf	___awmod@dividend,f
  4426  1E04  09F5               	comf	___awmod@dividend+1,f
  4427  1E05  0AF4               	incf	___awmod@dividend,f
  4428  1E06  1903               	skipnz
  4429  1E07  0AF5               	incf	___awmod@dividend+1,f
  4430  1E08  01F7               	clrf	___awmod@sign
  4431  1E09  0AF7               	incf	___awmod@sign,f
  4432  1E0A                     l3237:
  4433  1E0A  1FF3               	btfss	___awmod@divisor+1,7
  4434  1E0B  2E11               	goto	l3241
  4435  1E0C  09F2               	comf	___awmod@divisor,f
  4436  1E0D  09F3               	comf	___awmod@divisor+1,f
  4437  1E0E  0AF2               	incf	___awmod@divisor,f
  4438  1E0F  1903               	skipnz
  4439  1E10  0AF3               	incf	___awmod@divisor+1,f
  4440  1E11                     l3241:
  4441  1E11  0872               	movf	___awmod@divisor,w
  4442  1E12  0473               	iorwf	___awmod@divisor+1,w
  4443  1E13  1903               	btfsc	3,2
  4444  1E14  2E3E               	goto	l3259
  4445  1E15  01F6               	clrf	___awmod@counter
  4446  1E16  0AF6               	incf	___awmod@counter,f
  4447  1E17                     l3249:
  4448  1E17  1BF3               	btfsc	___awmod@divisor+1,7
  4449  1E18  2E25               	goto	l3251
  4450  1E19  3001               	movlw	1
  4451  1E1A                     u4035:
  4452  1E1A  1003               	clrc
  4453  1E1B  0DF2               	rlf	___awmod@divisor,f
  4454  1E1C  0DF3               	rlf	___awmod@divisor+1,f
  4455  1E1D  3EFF               	addlw	-1
  4456  1E1E  1D03               	skipz
  4457  1E1F  2E1A               	goto	u4035
  4458  1E20  3001               	movlw	1
  4459  1E21  00FF               	movwf	127
  4460  1E22  087F               	movf	127,w
  4461  1E23  07F6               	addwf	___awmod@counter,f
  4462  1E24  2E17               	goto	l3249
  4463  1E25                     l3251:
  4464  1E25  0873               	movf	___awmod@divisor+1,w
  4465  1E26  0275               	subwf	___awmod@dividend+1,w
  4466  1E27  1D03               	skipz
  4467  1E28  2E2B               	goto	u4055
  4468  1E29  0872               	movf	___awmod@divisor,w
  4469  1E2A  0274               	subwf	___awmod@dividend,w
  4470  1E2B                     u4055:
  4471  1E2B  1C03               	skipc
  4472  1E2C  2E33               	goto	l3255
  4473  1E2D  0872               	movf	___awmod@divisor,w
  4474  1E2E  02F4               	subwf	___awmod@dividend,f
  4475  1E2F  0873               	movf	___awmod@divisor+1,w
  4476  1E30  1C03               	skipc
  4477  1E31  03F5               	decf	___awmod@dividend+1,f
  4478  1E32  02F5               	subwf	___awmod@dividend+1,f
  4479  1E33                     l3255:
  4480  1E33  3001               	movlw	1
  4481  1E34                     u4065:
  4482  1E34  1003               	clrc
  4483  1E35  0CF3               	rrf	___awmod@divisor+1,f
  4484  1E36  0CF2               	rrf	___awmod@divisor,f
  4485  1E37  3EFF               	addlw	-1
  4486  1E38  1D03               	skipz
  4487  1E39  2E34               	goto	u4065
  4488  1E3A  3001               	movlw	1
  4489  1E3B  02F6               	subwf	___awmod@counter,f
  4490  1E3C  1D03               	btfss	3,2
  4491  1E3D  2E25               	goto	l3251
  4492  1E3E                     l3259:
  4493  1E3E  0877               	movf	___awmod@sign,w
  4494  1E3F  1903               	btfsc	3,2
  4495  1E40  2E46               	goto	l3263
  4496  1E41  09F4               	comf	___awmod@dividend,f
  4497  1E42  09F5               	comf	___awmod@dividend+1,f
  4498  1E43  0AF4               	incf	___awmod@dividend,f
  4499  1E44  1903               	skipnz
  4500  1E45  0AF5               	incf	___awmod@dividend+1,f
  4501  1E46                     l3263:
  4502  1E46  0875               	movf	___awmod@dividend+1,w
  4503  1E47  00F3               	movwf	?___awmod+1
  4504  1E48  0874               	movf	___awmod@dividend,w
  4505  1E49  00F2               	movwf	?___awmod
  4506  1E4A  0008               	return
  4507  1E4B                     __end_of___awmod:
  4508                           
  4509                           	psect	text6
  4510  1EEC                     __ptext6:	
  4511 ;; *************** function ___awdiv *****************
  4512 ;; Defined at:
  4513 ;;		line 5 in file "D:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\awdiv.c"
  4514 ;; Parameters:    Size  Location     Type
  4515 ;;  divisor         2    0[BANK0 ] int 
  4516 ;;  dividend        2    2[BANK0 ] int 
  4517 ;; Auto vars:     Size  Location     Type
  4518 ;;  quotient        2    6[BANK0 ] int 
  4519 ;;  sign            1    5[BANK0 ] unsigned char 
  4520 ;;  counter         1    4[BANK0 ] unsigned char 
  4521 ;; Return value:  Size  Location     Type
  4522 ;;                  2    0[BANK0 ] int 
  4523 ;; Registers used:
  4524 ;;		wreg, status,2, status,0, btemp+1
  4525 ;; Tracked objects:
  4526 ;;		On entry : 300/0
  4527 ;;		On exit  : 300/0
  4528 ;;		Unchanged: 0/0
  4529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4530 ;;      Params:         0       4       0       0       0
  4531 ;;      Locals:         0       4       0       0       0
  4532 ;;      Temps:          0       0       0       0       0
  4533 ;;      Totals:         0       8       0       0       0
  4534 ;;Total ram usage:        8 bytes
  4535 ;; Hardware stack levels used:    1
  4536 ;; Hardware stack levels required when called:    1
  4537 ;; This function calls:
  4538 ;;		Nothing
  4539 ;; This function is called by:
  4540 ;;		_scale
  4541 ;;		_sprintf
  4542 ;; This function uses a non-reentrant model
  4543 ;;
  4544                           
  4545                           
  4546                           ;psect for function ___awdiv
  4547  1EEC                     ___awdiv:
  4548                           
  4549                           ;incstack = 0
  4550                           ; Regs used in ___awdiv: [wreg+status,2+status,0+btemp+1]
  4551  1EEC  01A5               	clrf	___awdiv@sign
  4552  1EED  1FA1               	btfss	___awdiv@divisor+1,7
  4553  1EEE  2EF6               	goto	l4617
  4554  1EEF  09A0               	comf	___awdiv@divisor,f
  4555  1EF0  09A1               	comf	___awdiv@divisor+1,f
  4556  1EF1  0AA0               	incf	___awdiv@divisor,f
  4557  1EF2  1903               	skipnz
  4558  1EF3  0AA1               	incf	___awdiv@divisor+1,f
  4559  1EF4  01A5               	clrf	___awdiv@sign
  4560  1EF5  0AA5               	incf	___awdiv@sign,f
  4561  1EF6                     l4617:
  4562  1EF6  1FA3               	btfss	___awdiv@dividend+1,7
  4563  1EF7  2F01               	goto	l4623
  4564  1EF8  09A2               	comf	___awdiv@dividend,f
  4565  1EF9  09A3               	comf	___awdiv@dividend+1,f
  4566  1EFA  0AA2               	incf	___awdiv@dividend,f
  4567  1EFB  1903               	skipnz
  4568  1EFC  0AA3               	incf	___awdiv@dividend+1,f
  4569  1EFD  3001               	movlw	1
  4570  1EFE  00FF               	movwf	127
  4571  1EFF  087F               	movf	127,w
  4572  1F00  06A5               	xorwf	___awdiv@sign,f
  4573  1F01                     l4623:
  4574  1F01  01A6               	clrf	___awdiv@quotient
  4575  1F02  01A7               	clrf	___awdiv@quotient+1
  4576  1F03  0820               	movf	___awdiv@divisor,w
  4577  1F04  0421               	iorwf	___awdiv@divisor+1,w
  4578  1F05  1903               	btfsc	3,2
  4579  1F06  2F38               	goto	l4645
  4580  1F07  01A4               	clrf	___awdiv@counter
  4581  1F08  0AA4               	incf	___awdiv@counter,f
  4582  1F09                     l4633:
  4583  1F09  1BA1               	btfsc	___awdiv@divisor+1,7
  4584  1F0A  2F17               	goto	l4635
  4585  1F0B  3001               	movlw	1
  4586  1F0C                     u6365:
  4587  1F0C  1003               	clrc
  4588  1F0D  0DA0               	rlf	___awdiv@divisor,f
  4589  1F0E  0DA1               	rlf	___awdiv@divisor+1,f
  4590  1F0F  3EFF               	addlw	-1
  4591  1F10  1D03               	skipz
  4592  1F11  2F0C               	goto	u6365
  4593  1F12  3001               	movlw	1
  4594  1F13  00FF               	movwf	127
  4595  1F14  087F               	movf	127,w
  4596  1F15  07A4               	addwf	___awdiv@counter,f
  4597  1F16  2F09               	goto	l4633
  4598  1F17                     l4635:
  4599  1F17  3001               	movlw	1
  4600  1F18                     u6385:
  4601  1F18  1003               	clrc
  4602  1F19  0DA6               	rlf	___awdiv@quotient,f
  4603  1F1A  0DA7               	rlf	___awdiv@quotient+1,f
  4604  1F1B  3EFF               	addlw	-1
  4605  1F1C  1D03               	skipz
  4606  1F1D  2F18               	goto	u6385
  4607  1F1E  0821               	movf	___awdiv@divisor+1,w
  4608  1F1F  0223               	subwf	___awdiv@dividend+1,w
  4609  1F20  1D03               	skipz
  4610  1F21  2F24               	goto	u6395
  4611  1F22  0820               	movf	___awdiv@divisor,w
  4612  1F23  0222               	subwf	___awdiv@dividend,w
  4613  1F24                     u6395:
  4614  1F24  1C03               	skipc
  4615  1F25  2F2D               	goto	l4641
  4616  1F26  0820               	movf	___awdiv@divisor,w
  4617  1F27  02A2               	subwf	___awdiv@dividend,f
  4618  1F28  0821               	movf	___awdiv@divisor+1,w
  4619  1F29  1C03               	skipc
  4620  1F2A  03A3               	decf	___awdiv@dividend+1,f
  4621  1F2B  02A3               	subwf	___awdiv@dividend+1,f
  4622  1F2C  1426               	bsf	___awdiv@quotient,0
  4623  1F2D                     l4641:
  4624  1F2D  3001               	movlw	1
  4625  1F2E                     u6405:
  4626  1F2E  1003               	clrc
  4627  1F2F  0CA1               	rrf	___awdiv@divisor+1,f
  4628  1F30  0CA0               	rrf	___awdiv@divisor,f
  4629  1F31  3EFF               	addlw	-1
  4630  1F32  1D03               	skipz
  4631  1F33  2F2E               	goto	u6405
  4632  1F34  3001               	movlw	1
  4633  1F35  02A4               	subwf	___awdiv@counter,f
  4634  1F36  1D03               	btfss	3,2
  4635  1F37  2F17               	goto	l4635
  4636  1F38                     l4645:
  4637  1F38  0825               	movf	___awdiv@sign,w
  4638  1F39  1903               	btfsc	3,2
  4639  1F3A  2F40               	goto	l4649
  4640  1F3B  09A6               	comf	___awdiv@quotient,f
  4641  1F3C  09A7               	comf	___awdiv@quotient+1,f
  4642  1F3D  0AA6               	incf	___awdiv@quotient,f
  4643  1F3E  1903               	skipnz
  4644  1F3F  0AA7               	incf	___awdiv@quotient+1,f
  4645  1F40                     l4649:
  4646  1F40  0827               	movf	___awdiv@quotient+1,w
  4647  1F41  00A1               	movwf	?___awdiv+1
  4648  1F42  0826               	movf	___awdiv@quotient,w
  4649  1F43  00A0               	movwf	?___awdiv
  4650  1F44  0008               	return
  4651  1F45                     __end_of___awdiv:
  4652                           
  4653                           	psect	text7
  4654  1ACE                     __ptext7:	
  4655 ;; *************** function _isdigit *****************
  4656 ;; Defined at:
  4657 ;;		line 8 in file "D:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\isdigit.c"
  4658 ;; Parameters:    Size  Location     Type
  4659 ;;  c               1    wreg     unsigned char 
  4660 ;; Auto vars:     Size  Location     Type
  4661 ;;  c               1    3[COMMON] unsigned char 
  4662 ;; Return value:  Size  Location     Type
  4663 ;;		None               void
  4664 ;; Registers used:
  4665 ;;		wreg, status,2, status,0
  4666 ;; Tracked objects:
  4667 ;;		On entry : 300/0
  4668 ;;		On exit  : 300/0
  4669 ;;		Unchanged: 300/0
  4670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4671 ;;      Params:         0       0       0       0       0
  4672 ;;      Locals:         2       0       0       0       0
  4673 ;;      Temps:          0       0       0       0       0
  4674 ;;      Totals:         2       0       0       0       0
  4675 ;;Total ram usage:        2 bytes
  4676 ;; Hardware stack levels used:    1
  4677 ;; Hardware stack levels required when called:    1
  4678 ;; This function calls:
  4679 ;;		Nothing
  4680 ;; This function is called by:
  4681 ;;		_sprintf
  4682 ;; This function uses a non-reentrant model
  4683 ;;
  4684                           
  4685                           
  4686                           ;psect for function _isdigit
  4687  1ACE                     _isdigit:
  4688                           
  4689                           ;incstack = 0
  4690                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  4691                           ;isdigit@c stored from wreg
  4692  1ACE  00F3               	movwf	isdigit@c
  4693  1ACF  01F2               	clrf	_isdigit$895
  4694  1AD0  303A               	movlw	58
  4695  1AD1  0273               	subwf	isdigit@c,w
  4696  1AD2  1803               	skipnc
  4697  1AD3  2ADA               	goto	l3549
  4698  1AD4  3030               	movlw	48
  4699  1AD5  0273               	subwf	isdigit@c,w
  4700  1AD6  1C03               	skipc
  4701  1AD7  2ADA               	goto	l3549
  4702  1AD8  01F2               	clrf	_isdigit$895
  4703  1AD9  0AF2               	incf	_isdigit$895,f
  4704  1ADA                     l3549:
  4705  1ADA  0C72               	rrf	_isdigit$895,w
  4706  1ADB  0008               	return
  4707  1ADC                     __end_of_isdigit:
  4708                           
  4709                           	psect	text8
  4710  0A37                     __ptext8:	
  4711 ;; *************** function _fround *****************
  4712 ;; Defined at:
  4713 ;;		line 417 in file "D:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c"
  4714 ;; Parameters:    Size  Location     Type
  4715 ;;  prec            1    wreg     unsigned char 
  4716 ;; Auto vars:     Size  Location     Type
  4717 ;;  prec            1   41[BANK0 ] unsigned char 
  4718 ;; Return value:  Size  Location     Type
  4719 ;;                  3   31[BANK0 ] unsigned char 
  4720 ;; Registers used:
  4721 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4722 ;; Tracked objects:
  4723 ;;		On entry : 300/100
  4724 ;;		On exit  : 300/0
  4725 ;;		Unchanged: 0/0
  4726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4727 ;;      Params:         0       4       0       0       0
  4728 ;;      Locals:         0       7       0       0       0
  4729 ;;      Temps:          0       0       0       0       0
  4730 ;;      Totals:         0      11       0       0       0
  4731 ;;Total ram usage:       11 bytes
  4732 ;; Hardware stack levels used:    1
  4733 ;; Hardware stack levels required when called:    3
  4734 ;; This function calls:
  4735 ;;		___bmul
  4736 ;;		___ftmul
  4737 ;;		___lbdiv
  4738 ;;		___lbmod
  4739 ;; This function is called by:
  4740 ;;		_sprintf
  4741 ;; This function uses a non-reentrant model
  4742 ;;
  4743                           
  4744                           
  4745                           ;psect for function _fround
  4746  0A37                     _fround:
  4747                           
  4748                           ;incstack = 0
  4749                           ; Regs used in _fround: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4750                           ;fround@prec stored from wreg
  4751  0A37  1283               	bcf	3,5	;RP0=0, select bank0
  4752  0A38  00C9               	movwf	fround@prec
  4753                           
  4754                           ;doprnt.c: 421: if(prec>=110)
  4755  0A39  306E               	movlw	110
  4756  0A3A  0249               	subwf	fround@prec,w
  4757  0A3B  1C03               	skipc
  4758  0A3C  2AF9               	goto	l4847
  4759                           
  4760                           ;doprnt.c: 422: return 0.5 * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * 
      +                          _npowers_[prec%10U];
  4761  0A3D  3003               	movlw	3
  4762  0A3E  00FF               	movwf	127
  4763  0A3F  087F               	movf	127,w
  4764  0A40  00A8               	movwf	___bmul@multiplicand
  4765  0A41  300A               	movlw	10
  4766  0A42  00FF               	movwf	127
  4767  0A43  087F               	movf	127,w
  4768  0A44  00F8               	movwf	___lbdiv@divisor
  4769  0A45  3064               	movlw	100
  4770  0A46  00FF               	movwf	127
  4771  0A47  087F               	movf	127,w
  4772  0A48  00F2               	movwf	___lbmod@divisor
  4773  0A49  0849               	movf	fround@prec,w
  4774  0A4A  160A  158A  23C6  120A  158A  	fcall	___lbmod
  4775  0A4F  120A  158A  2001  120A  158A  	fcall	___lbdiv
  4776  0A54  160A  158A  22FC  120A  158A  	fcall	___bmul
  4777  0A59  3E54               	addlw	low ((__npowers_| (0+32768)+27))
  4778  0A5A  0084               	movwf	4
  4779  0A5B  3090               	movlw	high ((__npowers_| (0+32768)+27))
  4780  0A5C  1803               	skipnc
  4781  0A5D  3E01               	addlw	1
  4782  0A5E  00FF               	movwf	127
  4783  0A5F  160A  118A  2000  120A  158A  	fcall	stringtab
  4784  0A64  00B0               	movwf	___ftmul@f1
  4785  0A65  160A  118A  2000  120A  158A  	fcall	stringtab
  4786  0A6A  00B1               	movwf	___ftmul@f1+1
  4787  0A6B  160A  118A  2000  120A  158A  	fcall	stringtab
  4788  0A70  00B2               	movwf	___ftmul@f1+2
  4789  0A71  3003               	movlw	3
  4790  0A72  00FF               	movwf	127
  4791  0A73  087F               	movf	127,w
  4792  0A74  00A8               	movwf	___bmul@multiplicand
  4793  0A75  3064               	movlw	100
  4794  0A76  00FF               	movwf	127
  4795  0A77  087F               	movf	127,w
  4796  0A78  00F8               	movwf	___lbdiv@divisor
  4797  0A79  0849               	movf	fround@prec,w
  4798  0A7A  120A  158A  2001  120A  158A  	fcall	___lbdiv
  4799  0A7F  160A  158A  22FC  120A  158A  	fcall	___bmul
  4800  0A84  3E6F               	addlw	low ((__npowers_| (0+32768)+54))
  4801  0A85  0084               	movwf	4
  4802  0A86  3090               	movlw	high ((__npowers_| (0+32768)+54))
  4803  0A87  1803               	skipnc
  4804  0A88  3E01               	addlw	1
  4805  0A89  00FF               	movwf	127
  4806  0A8A  160A  118A  2000  120A  158A  	fcall	stringtab
  4807  0A8F  00B3               	movwf	___ftmul@f2
  4808  0A90  160A  118A  2000  120A  158A  	fcall	stringtab
  4809  0A95  00B4               	movwf	___ftmul@f2+1
  4810  0A96  160A  118A  2000  120A  158A  	fcall	stringtab
  4811  0A9B  00B5               	movwf	___ftmul@f2+2
  4812  0A9C  120A  158A  2022  120A  158A  	fcall	___ftmul
  4813  0AA1  0830               	movf	?___ftmul,w
  4814  0AA2  00C6               	movwf	_fround$1154
  4815  0AA3  0831               	movf	?___ftmul+1,w
  4816  0AA4  00C7               	movwf	_fround$1154+1
  4817  0AA5  0832               	movf	?___ftmul+2,w
  4818  0AA6  00C8               	movwf	_fround$1154+2
  4819                           
  4820                           ;doprnt.c: 422: return 0.5 * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * 
      +                          _npowers_[prec%10U];
  4821  0AA7  3003               	movlw	3
  4822  0AA8  00FF               	movwf	127
  4823  0AA9  087F               	movf	127,w
  4824  0AAA  00A8               	movwf	___bmul@multiplicand
  4825  0AAB  300A               	movlw	10
  4826  0AAC  00FF               	movwf	127
  4827  0AAD  087F               	movf	127,w
  4828  0AAE  00F2               	movwf	___lbmod@divisor
  4829  0AAF  0849               	movf	fround@prec,w
  4830  0AB0  160A  158A  23C6  120A  158A  	fcall	___lbmod
  4831  0AB5  160A  158A  22FC  120A  158A  	fcall	___bmul
  4832  0ABA  3E39               	addlw	low (__npowers_| (0+32768))
  4833  0ABB  0084               	movwf	4
  4834  0ABC  3090               	movlw	high (__npowers_| (0+32768))
  4835  0ABD  1803               	skipnc
  4836  0ABE  3E01               	addlw	1
  4837  0ABF  00FF               	movwf	127
  4838  0AC0  160A  118A  2000  120A  158A  	fcall	stringtab
  4839  0AC5  00B0               	movwf	___ftmul@f1
  4840  0AC6  160A  118A  2000  120A  158A  	fcall	stringtab
  4841  0ACB  00B1               	movwf	___ftmul@f1+1
  4842  0ACC  160A  118A  2000  120A  158A  	fcall	stringtab
  4843  0AD1  00B2               	movwf	___ftmul@f1+2
  4844  0AD2  0846               	movf	_fround$1154,w
  4845  0AD3  00B3               	movwf	___ftmul@f2
  4846  0AD4  0847               	movf	_fround$1154+1,w
  4847  0AD5  00B4               	movwf	___ftmul@f2+1
  4848  0AD6  0848               	movf	_fround$1154+2,w
  4849  0AD7  00B5               	movwf	___ftmul@f2+2
  4850  0AD8  120A  158A  2022  120A  158A  	fcall	___ftmul
  4851  0ADD  0830               	movf	?___ftmul,w
  4852  0ADE  00C3               	movwf	_fround$1155
  4853  0ADF  0831               	movf	?___ftmul+1,w
  4854  0AE0  00C4               	movwf	_fround$1155+1
  4855  0AE1  0832               	movf	?___ftmul+2,w
  4856  0AE2  00C5               	movwf	_fround$1155+2
  4857                           
  4858                           ;doprnt.c: 422: return 0.5 * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * 
      +                          _npowers_[prec%10U];
  4859  0AE3  3000               	movlw	0
  4860  0AE4  00B0               	movwf	___ftmul@f1
  4861  0AE5  3000               	movlw	0
  4862  0AE6  00B1               	movwf	___ftmul@f1+1
  4863  0AE7  303F               	movlw	63
  4864  0AE8  00B2               	movwf	___ftmul@f1+2
  4865  0AE9  0843               	movf	_fround$1155,w
  4866  0AEA  00B3               	movwf	___ftmul@f2
  4867  0AEB  0844               	movf	_fround$1155+1,w
  4868  0AEC  00B4               	movwf	___ftmul@f2+1
  4869  0AED  0845               	movf	_fround$1155+2,w
  4870  0AEE  00B5               	movwf	___ftmul@f2+2
  4871  0AEF  120A  158A  2022   	fcall	___ftmul
  4872  0AF2  0830               	movf	?___ftmul,w
  4873  0AF3  00BF               	movwf	?_fround
  4874  0AF4  0831               	movf	?___ftmul+1,w
  4875  0AF5  00C0               	movwf	?_fround+1
  4876  0AF6  0832               	movf	?___ftmul+2,w
  4877  0AF7  00C1               	movwf	?_fround+2
  4878  0AF8  0008               	return
  4879  0AF9                     l4847:
  4880                           
  4881                           ;doprnt.c: 423: else if(prec > 10)
  4882  0AF9  300B               	movlw	11
  4883  0AFA  0249               	subwf	fround@prec,w
  4884  0AFB  1C03               	skipc
  4885  0AFC  2B74               	goto	l4855
  4886                           
  4887                           ;doprnt.c: 424: return 0.5 * _npowers_[prec/10U+9U] * _npowers_[prec%10U];
  4888  0AFD  3003               	movlw	3
  4889  0AFE  00FF               	movwf	127
  4890  0AFF  087F               	movf	127,w
  4891  0B00  00A8               	movwf	___bmul@multiplicand
  4892  0B01  300A               	movlw	10
  4893  0B02  00FF               	movwf	127
  4894  0B03  087F               	movf	127,w
  4895  0B04  00F2               	movwf	___lbmod@divisor
  4896  0B05  0849               	movf	fround@prec,w
  4897  0B06  160A  158A  23C6  120A  158A  	fcall	___lbmod
  4898  0B0B  160A  158A  22FC  120A  158A  	fcall	___bmul
  4899  0B10  3E39               	addlw	low (__npowers_| (0+32768))
  4900  0B11  0084               	movwf	4
  4901  0B12  3090               	movlw	high (__npowers_| (0+32768))
  4902  0B13  1803               	skipnc
  4903  0B14  3E01               	addlw	1
  4904  0B15  00FF               	movwf	127
  4905  0B16  160A  118A  2000  120A  158A  	fcall	stringtab
  4906  0B1B  00B0               	movwf	___ftmul@f1
  4907  0B1C  160A  118A  2000  120A  158A  	fcall	stringtab
  4908  0B21  00B1               	movwf	___ftmul@f1+1
  4909  0B22  160A  118A  2000  120A  158A  	fcall	stringtab
  4910  0B27  00B2               	movwf	___ftmul@f1+2
  4911  0B28  3003               	movlw	3
  4912  0B29  00FF               	movwf	127
  4913  0B2A  087F               	movf	127,w
  4914  0B2B  00A8               	movwf	___bmul@multiplicand
  4915  0B2C  300A               	movlw	10
  4916  0B2D  00FF               	movwf	127
  4917  0B2E  087F               	movf	127,w
  4918  0B2F  00F8               	movwf	___lbdiv@divisor
  4919  0B30  0849               	movf	fround@prec,w
  4920  0B31  120A  158A  2001  120A  158A  	fcall	___lbdiv
  4921  0B36  160A  158A  22FC  120A  158A  	fcall	___bmul
  4922  0B3B  3E54               	addlw	low ((__npowers_| (0+32768)+27))
  4923  0B3C  0084               	movwf	4
  4924  0B3D  3090               	movlw	high ((__npowers_| (0+32768)+27))
  4925  0B3E  1803               	skipnc
  4926  0B3F  3E01               	addlw	1
  4927  0B40  00FF               	movwf	127
  4928  0B41  160A  118A  2000  120A  158A  	fcall	stringtab
  4929  0B46  00B3               	movwf	___ftmul@f2
  4930  0B47  160A  118A  2000  120A  158A  	fcall	stringtab
  4931  0B4C  00B4               	movwf	___ftmul@f2+1
  4932  0B4D  160A  118A  2000  120A  158A  	fcall	stringtab
  4933  0B52  00B5               	movwf	___ftmul@f2+2
  4934  0B53  120A  158A  2022  120A  158A  	fcall	___ftmul
  4935  0B58  0830               	movf	?___ftmul,w
  4936  0B59  00C6               	movwf	_fround$1154
  4937  0B5A  0831               	movf	?___ftmul+1,w
  4938  0B5B  00C7               	movwf	_fround$1154+1
  4939  0B5C  0832               	movf	?___ftmul+2,w
  4940  0B5D  00C8               	movwf	_fround$1154+2
  4941                           
  4942                           ;doprnt.c: 424: return 0.5 * _npowers_[prec/10U+9U] * _npowers_[prec%10U];
  4943  0B5E  3000               	movlw	0
  4944  0B5F  00B0               	movwf	___ftmul@f1
  4945  0B60  3000               	movlw	0
  4946  0B61  00B1               	movwf	___ftmul@f1+1
  4947  0B62  303F               	movlw	63
  4948  0B63  00B2               	movwf	___ftmul@f1+2
  4949  0B64  0846               	movf	_fround$1154,w
  4950  0B65  00B3               	movwf	___ftmul@f2
  4951  0B66  0847               	movf	_fround$1154+1,w
  4952  0B67  00B4               	movwf	___ftmul@f2+1
  4953  0B68  0848               	movf	_fround$1154+2,w
  4954  0B69  00B5               	movwf	___ftmul@f2+2
  4955  0B6A  120A  158A  2022   	fcall	___ftmul
  4956  0B6D  0830               	movf	?___ftmul,w
  4957  0B6E  00BF               	movwf	?_fround
  4958  0B6F  0831               	movf	?___ftmul+1,w
  4959  0B70  00C0               	movwf	?_fround+1
  4960  0B71  0832               	movf	?___ftmul+2,w
  4961  0B72  00C1               	movwf	?_fround+2
  4962  0B73  0008               	return
  4963  0B74                     l4855:
  4964                           
  4965                           ;doprnt.c: 425: return 0.5 * _npowers_[prec];
  4966  0B74  3000               	movlw	0
  4967  0B75  00B0               	movwf	___ftmul@f1
  4968  0B76  3000               	movlw	0
  4969  0B77  00B1               	movwf	___ftmul@f1+1
  4970  0B78  303F               	movlw	63
  4971  0B79  00B2               	movwf	___ftmul@f1+2
  4972  0B7A  3003               	movlw	3
  4973  0B7B  00FF               	movwf	127
  4974  0B7C  087F               	movf	127,w
  4975  0B7D  00A8               	movwf	___bmul@multiplicand
  4976  0B7E  0849               	movf	fround@prec,w
  4977  0B7F  160A  158A  22FC  120A  158A  	fcall	___bmul
  4978  0B84  3E39               	addlw	low (__npowers_| (0+32768))
  4979  0B85  0084               	movwf	4
  4980  0B86  3090               	movlw	high (__npowers_| (0+32768))
  4981  0B87  1803               	skipnc
  4982  0B88  3E01               	addlw	1
  4983  0B89  00FF               	movwf	127
  4984  0B8A  160A  118A  2000  120A  158A  	fcall	stringtab
  4985  0B8F  00B3               	movwf	___ftmul@f2
  4986  0B90  160A  118A  2000  120A  158A  	fcall	stringtab
  4987  0B95  00B4               	movwf	___ftmul@f2+1
  4988  0B96  160A  118A  2000  120A  158A  	fcall	stringtab
  4989  0B9B  00B5               	movwf	___ftmul@f2+2
  4990  0B9C  120A  158A  2022   	fcall	___ftmul
  4991  0B9F  0830               	movf	?___ftmul,w
  4992  0BA0  00BF               	movwf	?_fround
  4993  0BA1  0831               	movf	?___ftmul+1,w
  4994  0BA2  00C0               	movwf	?_fround+1
  4995  0BA3  0832               	movf	?___ftmul+2,w
  4996  0BA4  00C1               	movwf	?_fround+2
  4997  0BA5  0008               	return
  4998  0BA6                     __end_of_fround:
  4999                           
  5000                           	psect	text9
  5001  1BC6                     __ptext9:	
  5002 ;; *************** function ___lbmod *****************
  5003 ;; Defined at:
  5004 ;;		line 4 in file "D:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\lbmod.c"
  5005 ;; Parameters:    Size  Location     Type
  5006 ;;  dividend        1    wreg     unsigned char 
  5007 ;;  divisor         1    2[COMMON] unsigned char 
  5008 ;; Auto vars:     Size  Location     Type
  5009 ;;  dividend        1    5[COMMON] unsigned char 
  5010 ;;  rem             1    7[COMMON] unsigned char 
  5011 ;;  counter         1    6[COMMON] unsigned char 
  5012 ;; Return value:  Size  Location     Type
  5013 ;;                  1    wreg      unsigned char 
  5014 ;; Registers used:
  5015 ;;		wreg, status,2, status,0, btemp+1
  5016 ;; Tracked objects:
  5017 ;;		On entry : 300/0
  5018 ;;		On exit  : 300/0
  5019 ;;		Unchanged: 300/0
  5020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5021 ;;      Params:         1       0       0       0       0
  5022 ;;      Locals:         3       0       0       0       0
  5023 ;;      Temps:          2       0       0       0       0
  5024 ;;      Totals:         6       0       0       0       0
  5025 ;;Total ram usage:        6 bytes
  5026 ;; Hardware stack levels used:    1
  5027 ;; Hardware stack levels required when called:    1
  5028 ;; This function calls:
  5029 ;;		Nothing
  5030 ;; This function is called by:
  5031 ;;		_fround
  5032 ;; This function uses a non-reentrant model
  5033 ;;
  5034                           
  5035                           
  5036                           ;psect for function ___lbmod
  5037  1BC6                     ___lbmod:
  5038                           
  5039                           ;incstack = 0
  5040                           ; Regs used in ___lbmod: [wreg+status,2+status,0+btemp+1]
  5041                           ;___lbmod@dividend stored from wreg
  5042  1BC6  00F5               	movwf	___lbmod@dividend
  5043  1BC7  3008               	movlw	8
  5044  1BC8  00FF               	movwf	127
  5045  1BC9  087F               	movf	127,w
  5046  1BCA  00F6               	movwf	___lbmod@counter
  5047  1BCB  01F7               	clrf	___lbmod@rem
  5048  1BCC                     l3429:
  5049  1BCC  0875               	movf	___lbmod@dividend,w
  5050  1BCD  00F3               	movwf	??___lbmod
  5051  1BCE  3007               	movlw	7
  5052  1BCF                     u4495:
  5053  1BCF  1003               	clrc
  5054  1BD0  0CF3               	rrf	??___lbmod,f
  5055  1BD1  3EFF               	addlw	-1
  5056  1BD2  1D03               	skipz
  5057  1BD3  2BCF               	goto	u4495
  5058  1BD4  0877               	movf	___lbmod@rem,w
  5059  1BD5  00F4               	movwf	??___lbmod+1
  5060  1BD6  0774               	addwf	??___lbmod+1,w
  5061  1BD7  0473               	iorwf	??___lbmod,w
  5062  1BD8  00FF               	movwf	127
  5063  1BD9  087F               	movf	127,w
  5064  1BDA  00F7               	movwf	___lbmod@rem
  5065  1BDB  1003               	clrc
  5066  1BDC  0DF5               	rlf	___lbmod@dividend,f
  5067  1BDD  0872               	movf	___lbmod@divisor,w
  5068  1BDE  0277               	subwf	___lbmod@rem,w
  5069  1BDF  1C03               	skipc
  5070  1BE0  2BE3               	goto	l965
  5071  1BE1  0872               	movf	___lbmod@divisor,w
  5072  1BE2  02F7               	subwf	___lbmod@rem,f
  5073  1BE3                     l965:
  5074  1BE3  3001               	movlw	1
  5075  1BE4  02F6               	subwf	___lbmod@counter,f
  5076  1BE5  1D03               	btfss	3,2
  5077  1BE6  2BCC               	goto	l3429
  5078  1BE7  0877               	movf	___lbmod@rem,w
  5079  1BE8  0008               	return
  5080  1BE9                     __end_of___lbmod:
  5081                           
  5082                           	psect	text10
  5083  0801                     __ptext10:	
  5084 ;; *************** function ___lbdiv *****************
  5085 ;; Defined at:
  5086 ;;		line 4 in file "D:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\lbdiv.c"
  5087 ;; Parameters:    Size  Location     Type
  5088 ;;  dividend        1    wreg     unsigned char 
  5089 ;;  divisor         1    8[COMMON] unsigned char 
  5090 ;; Auto vars:     Size  Location     Type
  5091 ;;  dividend        1    0[BANK0 ] unsigned char 
  5092 ;;  quotient        1    2[BANK0 ] unsigned char 
  5093 ;;  counter         1    1[BANK0 ] unsigned char 
  5094 ;; Return value:  Size  Location     Type
  5095 ;;                  1    wreg      unsigned char 
  5096 ;; Registers used:
  5097 ;;		wreg, status,2, status,0, btemp+1
  5098 ;; Tracked objects:
  5099 ;;		On entry : 300/0
  5100 ;;		On exit  : 300/0
  5101 ;;		Unchanged: 0/0
  5102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5103 ;;      Params:         1       0       0       0       0
  5104 ;;      Locals:         0       3       0       0       0
  5105 ;;      Temps:          0       0       0       0       0
  5106 ;;      Totals:         1       3       0       0       0
  5107 ;;Total ram usage:        4 bytes
  5108 ;; Hardware stack levels used:    1
  5109 ;; Hardware stack levels required when called:    1
  5110 ;; This function calls:
  5111 ;;		Nothing
  5112 ;; This function is called by:
  5113 ;;		_fround
  5114 ;; This function uses a non-reentrant model
  5115 ;;
  5116                           
  5117                           
  5118                           ;psect for function ___lbdiv
  5119  0801                     ___lbdiv:
  5120                           
  5121                           ;incstack = 0
  5122                           ; Regs used in ___lbdiv: [wreg+status,2+status,0+btemp+1]
  5123                           ;___lbdiv@dividend stored from wreg
  5124  0801  00A0               	movwf	___lbdiv@dividend
  5125  0802  01A2               	clrf	___lbdiv@quotient
  5126  0803  0878               	movf	___lbdiv@divisor,w
  5127  0804  1903               	btfsc	3,2
  5128  0805  2820               	goto	l4807
  5129  0806  01A1               	clrf	___lbdiv@counter
  5130  0807  0AA1               	incf	___lbdiv@counter,f
  5131  0808                     l4795:
  5132  0808  1BF8               	btfsc	___lbdiv@divisor,7
  5133  0809  2811               	goto	l4797
  5134  080A  1003               	clrc
  5135  080B  0DF8               	rlf	___lbdiv@divisor,f
  5136  080C  3001               	movlw	1
  5137  080D  00FF               	movwf	127
  5138  080E  087F               	movf	127,w
  5139  080F  07A1               	addwf	___lbdiv@counter,f
  5140  0810  2808               	goto	l4795
  5141  0811                     l4797:
  5142  0811  1003               	clrc
  5143  0812  0DA2               	rlf	___lbdiv@quotient,f
  5144  0813  0878               	movf	___lbdiv@divisor,w
  5145  0814  0220               	subwf	___lbdiv@dividend,w
  5146  0815  1C03               	skipc
  5147  0816  281B               	goto	L7
  5148  0817  0878               	movf	___lbdiv@divisor,w
  5149  0818  02A0               	subwf	___lbdiv@dividend,f
  5150  0819  1422               	bsf	___lbdiv@quotient,0
  5151  081A  1003               	clrc
  5152  081B                     L7:
  5153  081B  0CF8               	rrf	___lbdiv@divisor,f
  5154  081C  3001               	movlw	1
  5155  081D  02A1               	subwf	___lbdiv@counter,f
  5156  081E  1D03               	btfss	3,2
  5157  081F  2811               	goto	l4797
  5158  0820                     l4807:
  5159  0820  0822               	movf	___lbdiv@quotient,w
  5160  0821  0008               	return
  5161  0822                     __end_of___lbdiv:
  5162                           
  5163                           	psect	text11
  5164  1AFC                     __ptext11:	
  5165 ;; *************** function ___bmul *****************
  5166 ;; Defined at:
  5167 ;;		line 4 in file "D:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\Umul8.c"
  5168 ;; Parameters:    Size  Location     Type
  5169 ;;  multiplier      1    wreg     unsigned char 
  5170 ;;  multiplicand    1    8[BANK0 ] unsigned char 
  5171 ;; Auto vars:     Size  Location     Type
  5172 ;;  multiplier      1   10[COMMON] unsigned char 
  5173 ;;  product         1    9[COMMON] unsigned char 
  5174 ;; Return value:  Size  Location     Type
  5175 ;;                  1    wreg      unsigned char 
  5176 ;; Registers used:
  5177 ;;		wreg, status,2, status,0, btemp+1
  5178 ;; Tracked objects:
  5179 ;;		On entry : 300/0
  5180 ;;		On exit  : 300/0
  5181 ;;		Unchanged: 0/0
  5182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5183 ;;      Params:         0       1       0       0       0
  5184 ;;      Locals:         2       0       0       0       0
  5185 ;;      Temps:          0       0       0       0       0
  5186 ;;      Totals:         2       1       0       0       0
  5187 ;;Total ram usage:        3 bytes
  5188 ;; Hardware stack levels used:    1
  5189 ;; Hardware stack levels required when called:    1
  5190 ;; This function calls:
  5191 ;;		Nothing
  5192 ;; This function is called by:
  5193 ;;		_fround
  5194 ;;		_scale
  5195 ;; This function uses a non-reentrant model
  5196 ;;
  5197                           
  5198                           
  5199                           ;psect for function ___bmul
  5200  1AFC                     ___bmul:
  5201                           
  5202                           ;incstack = 0
  5203                           ; Regs used in ___bmul: [wreg+status,2+status,0+btemp+1]
  5204                           ;___bmul@multiplier stored from wreg
  5205  1AFC  00FA               	movwf	___bmul@multiplier
  5206  1AFD  01F9               	clrf	___bmul@product
  5207  1AFE                     l4595:
  5208  1AFE  1C7A               	btfss	___bmul@multiplier,0
  5209  1AFF  2B04               	goto	l4599
  5210  1B00  0828               	movf	___bmul@multiplicand,w
  5211  1B01  00FF               	movwf	127
  5212  1B02  087F               	movf	127,w
  5213  1B03  07F9               	addwf	___bmul@product,f
  5214  1B04                     l4599:
  5215  1B04  1003               	clrc
  5216  1B05  0DA8               	rlf	___bmul@multiplicand,f
  5217  1B06  1003               	clrc
  5218  1B07  0CFA               	rrf	___bmul@multiplier,f
  5219  1B08  087A               	movf	___bmul@multiplier,w
  5220  1B09  1D03               	btfss	3,2
  5221  1B0A  2AFE               	goto	l4595
  5222  1B0B  0879               	movf	___bmul@product,w
  5223  1B0C  0008               	return
  5224  1B0D                     __end_of___bmul:
  5225                           
  5226                           	psect	text12
  5227  153B                     __ptext12:	
  5228 ;; *************** function __tdiv_to_l_ *****************
  5229 ;; Defined at:
  5230 ;;		line 60 in file "D:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\ftdivl.c"
  5231 ;; Parameters:    Size  Location     Type
  5232 ;;  f1              3    2[COMMON] float 
  5233 ;;  f2              3    5[COMMON] float 
  5234 ;; Auto vars:     Size  Location     Type
  5235 ;;  quot            4    0[BANK0 ] unsigned long 
  5236 ;;  exp1            1    5[BANK0 ] unsigned char 
  5237 ;;  cntr            1    4[BANK0 ] unsigned char 
  5238 ;; Return value:  Size  Location     Type
  5239 ;;                  4    2[COMMON] unsigned long 
  5240 ;; Registers used:
  5241 ;;		wreg, status,2, status,0, btemp+1
  5242 ;; Tracked objects:
  5243 ;;		On entry : 300/100
  5244 ;;		On exit  : 300/0
  5245 ;;		Unchanged: 0/0
  5246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5247 ;;      Params:         6       0       0       0       0
  5248 ;;      Locals:         0       6       0       0       0
  5249 ;;      Temps:          3       0       0       0       0
  5250 ;;      Totals:         9       6       0       0       0
  5251 ;;Total ram usage:       15 bytes
  5252 ;; Hardware stack levels used:    1
  5253 ;; Hardware stack levels required when called:    1
  5254 ;; This function calls:
  5255 ;;		Nothing
  5256 ;; This function is called by:
  5257 ;;		_sprintf
  5258 ;; This function uses a non-reentrant model
  5259 ;;
  5260                           
  5261                           
  5262                           ;psect for function __tdiv_to_l_
  5263  153B                     __tdiv_to_l_:
  5264                           
  5265                           ;incstack = 0
  5266                           ; Regs used in __tdiv_to_l_: [wreg+status,2+status,0+btemp+1]
  5267  153B  0872               	movf	__tdiv_to_l_@f1,w
  5268  153C  00F8               	movwf	??__tdiv_to_l_
  5269  153D  0873               	movf	__tdiv_to_l_@f1+1,w
  5270  153E  00F9               	movwf	??__tdiv_to_l_+1
  5271  153F  0874               	movf	__tdiv_to_l_@f1+2,w
  5272  1540  00FA               	movwf	??__tdiv_to_l_+2
  5273  1541  1003               	clrc
  5274  1542  0D79               	rlf	??__tdiv_to_l_+1,w
  5275  1543  0D7A               	rlf	??__tdiv_to_l_+2,w
  5276  1544  00FF               	movwf	127
  5277  1545  087F               	movf	127,w
  5278  1546  1283               	bcf	3,5	;RP0=0, select bank0
  5279  1547  00A5               	movwf	__tdiv_to_l_@exp1
  5280  1548  0825               	movf	__tdiv_to_l_@exp1,w
  5281  1549  1D03               	btfss	3,2
  5282  154A  2D54               	goto	l3559
  5283  154B                     l3555:
  5284  154B  3000               	movlw	0
  5285  154C  00F5               	movwf	?__tdiv_to_l_+3
  5286  154D  3000               	movlw	0
  5287  154E  00F4               	movwf	?__tdiv_to_l_+2
  5288  154F  3000               	movlw	0
  5289  1550  00F3               	movwf	?__tdiv_to_l_+1
  5290  1551  3000               	movlw	0
  5291  1552  00F2               	movwf	?__tdiv_to_l_
  5292  1553  0008               	return
  5293  1554                     l3559:
  5294  1554  0875               	movf	__tdiv_to_l_@f2,w
  5295  1555  00F8               	movwf	??__tdiv_to_l_
  5296  1556  0876               	movf	__tdiv_to_l_@f2+1,w
  5297  1557  00F9               	movwf	??__tdiv_to_l_+1
  5298  1558  0877               	movf	__tdiv_to_l_@f2+2,w
  5299  1559  00FA               	movwf	??__tdiv_to_l_+2
  5300  155A  1003               	clrc
  5301  155B  0D79               	rlf	??__tdiv_to_l_+1,w
  5302  155C  0D7A               	rlf	??__tdiv_to_l_+2,w
  5303  155D  00FF               	movwf	127
  5304  155E  087F               	movf	127,w
  5305  155F  00A4               	movwf	__tdiv_to_l_@cntr
  5306  1560  0824               	movf	__tdiv_to_l_@cntr,w
  5307  1561  1903               	btfsc	3,2
  5308  1562  2D4B               	goto	l3555
  5309  1563  17F3               	bsf	__tdiv_to_l_@f1+1,7
  5310  1564  30FF               	movlw	255
  5311  1565  05F2               	andwf	__tdiv_to_l_@f1,f
  5312  1566  30FF               	movlw	255
  5313  1567  05F3               	andwf	__tdiv_to_l_@f1+1,f
  5314  1568  3000               	movlw	0
  5315  1569  05F4               	andwf	__tdiv_to_l_@f1+2,f
  5316  156A  17F6               	bsf	__tdiv_to_l_@f2+1,7
  5317  156B  30FF               	movlw	255
  5318  156C  05F5               	andwf	__tdiv_to_l_@f2,f
  5319  156D  30FF               	movlw	255
  5320  156E  05F6               	andwf	__tdiv_to_l_@f2+1,f
  5321  156F  3000               	movlw	0
  5322  1570  05F7               	andwf	__tdiv_to_l_@f2+2,f
  5323  1571  3000               	movlw	0
  5324  1572  00A3               	movwf	__tdiv_to_l_@quot+3
  5325  1573  3000               	movlw	0
  5326  1574  00A2               	movwf	__tdiv_to_l_@quot+2
  5327  1575  3000               	movlw	0
  5328  1576  00A1               	movwf	__tdiv_to_l_@quot+1
  5329  1577  3000               	movlw	0
  5330  1578  00A0               	movwf	__tdiv_to_l_@quot
  5331  1579  307F               	movlw	127
  5332  157A  02A5               	subwf	__tdiv_to_l_@exp1,f
  5333  157B  3098               	movlw	152
  5334  157C  0724               	addwf	__tdiv_to_l_@cntr,w
  5335  157D  00F8               	movwf	??__tdiv_to_l_
  5336  157E  0878               	movf	??__tdiv_to_l_,w
  5337  157F  02A5               	subwf	__tdiv_to_l_@exp1,f
  5338  1580  3018               	movlw	24
  5339  1581  00FF               	movwf	127
  5340  1582  087F               	movf	127,w
  5341  1583  00A4               	movwf	__tdiv_to_l_@cntr
  5342  1584                     l3575:
  5343  1584  3001               	movlw	1
  5344  1585  00F8               	movwf	??__tdiv_to_l_
  5345  1586                     u4665:
  5346  1586  1003               	clrc
  5347  1587  0DA0               	rlf	__tdiv_to_l_@quot,f
  5348  1588  0DA1               	rlf	__tdiv_to_l_@quot+1,f
  5349  1589  0DA2               	rlf	__tdiv_to_l_@quot+2,f
  5350  158A  0DA3               	rlf	__tdiv_to_l_@quot+3,f
  5351  158B  0BF8               	decfsz	??__tdiv_to_l_,f
  5352  158C  2D86               	goto	u4665
  5353  158D  0877               	movf	__tdiv_to_l_@f2+2,w
  5354  158E  0274               	subwf	__tdiv_to_l_@f1+2,w
  5355  158F  1D03               	skipz
  5356  1590  2D97               	goto	u4675
  5357  1591  0876               	movf	__tdiv_to_l_@f2+1,w
  5358  1592  0273               	subwf	__tdiv_to_l_@f1+1,w
  5359  1593  1D03               	skipz
  5360  1594  2D97               	goto	u4675
  5361  1595  0875               	movf	__tdiv_to_l_@f2,w
  5362  1596  0272               	subwf	__tdiv_to_l_@f1,w
  5363  1597                     u4675:
  5364  1597  1C03               	skipc
  5365  1598  2DA4               	goto	l3583
  5366  1599  0875               	movf	__tdiv_to_l_@f2,w
  5367  159A  02F2               	subwf	__tdiv_to_l_@f1,f
  5368  159B  0876               	movf	__tdiv_to_l_@f2+1,w
  5369  159C  1C03               	skipc
  5370  159D  0F76               	incfsz	__tdiv_to_l_@f2+1,w
  5371  159E  02F3               	subwf	__tdiv_to_l_@f1+1,f
  5372  159F  0877               	movf	__tdiv_to_l_@f2+2,w
  5373  15A0  1C03               	skipc
  5374  15A1  0A77               	incf	__tdiv_to_l_@f2+2,w
  5375  15A2  02F4               	subwf	__tdiv_to_l_@f1+2,f
  5376  15A3  1420               	bsf	__tdiv_to_l_@quot,0
  5377  15A4                     l3583:
  5378  15A4  3001               	movlw	1
  5379  15A5                     u4685:
  5380  15A5  1003               	clrc
  5381  15A6  0DF2               	rlf	__tdiv_to_l_@f1,f
  5382  15A7  0DF3               	rlf	__tdiv_to_l_@f1+1,f
  5383  15A8  0DF4               	rlf	__tdiv_to_l_@f1+2,f
  5384  15A9  3EFF               	addlw	-1
  5385  15AA  1D03               	skipz
  5386  15AB  2DA5               	goto	u4685
  5387  15AC  3001               	movlw	1
  5388  15AD  02A4               	subwf	__tdiv_to_l_@cntr,f
  5389  15AE  1D03               	btfss	3,2
  5390  15AF  2D84               	goto	l3575
  5391  15B0  1FA5               	btfss	__tdiv_to_l_@exp1,7
  5392  15B1  2DC7               	goto	l3597
  5393  15B2  0825               	movf	__tdiv_to_l_@exp1,w
  5394  15B3  3A80               	xorlw	128
  5395  15B4  3E97               	addlw	151
  5396  15B5  1C03               	btfss	3,0
  5397  15B6  2D4B               	goto	l3555
  5398  15B7                     l3593:
  5399  15B7  3001               	movlw	1
  5400  15B8                     u4725:
  5401  15B8  1003               	clrc
  5402  15B9  0CA3               	rrf	__tdiv_to_l_@quot+3,f
  5403  15BA  0CA2               	rrf	__tdiv_to_l_@quot+2,f
  5404  15BB  0CA1               	rrf	__tdiv_to_l_@quot+1,f
  5405  15BC  0CA0               	rrf	__tdiv_to_l_@quot,f
  5406  15BD  3EFF               	addlw	-1
  5407  15BE  1D03               	skipz
  5408  15BF  2DB8               	goto	u4725
  5409  15C0  3001               	movlw	1
  5410  15C1  00FF               	movwf	127
  5411  15C2  087F               	movf	127,w
  5412  15C3  07A5               	addwf	__tdiv_to_l_@exp1,f
  5413  15C4  1903               	btfsc	3,2
  5414  15C5  2DDA               	goto	l3605
  5415  15C6  2DB7               	goto	l3593
  5416  15C7                     l3597:
  5417  15C7  3018               	movlw	24
  5418  15C8  0225               	subwf	__tdiv_to_l_@exp1,w
  5419  15C9  1803               	btfsc	3,0
  5420  15CA  2D4B               	goto	l3555
  5421  15CB                     l907:
  5422  15CB  0825               	movf	__tdiv_to_l_@exp1,w
  5423  15CC  1903               	btfsc	3,2
  5424  15CD  2DDA               	goto	l3605
  5425  15CE  3001               	movlw	1
  5426  15CF  00F8               	movwf	??__tdiv_to_l_
  5427  15D0                     u4755:
  5428  15D0  1003               	clrc
  5429  15D1  0DA0               	rlf	__tdiv_to_l_@quot,f
  5430  15D2  0DA1               	rlf	__tdiv_to_l_@quot+1,f
  5431  15D3  0DA2               	rlf	__tdiv_to_l_@quot+2,f
  5432  15D4  0DA3               	rlf	__tdiv_to_l_@quot+3,f
  5433  15D5  0BF8               	decfsz	??__tdiv_to_l_,f
  5434  15D6  2DD0               	goto	u4755
  5435  15D7  3001               	movlw	1
  5436  15D8  02A5               	subwf	__tdiv_to_l_@exp1,f
  5437  15D9  2DCB               	goto	l907
  5438  15DA                     l3605:
  5439  15DA  0823               	movf	__tdiv_to_l_@quot+3,w
  5440  15DB  00F5               	movwf	?__tdiv_to_l_+3
  5441  15DC  0822               	movf	__tdiv_to_l_@quot+2,w
  5442  15DD  00F4               	movwf	?__tdiv_to_l_+2
  5443  15DE  0821               	movf	__tdiv_to_l_@quot+1,w
  5444  15DF  00F3               	movwf	?__tdiv_to_l_+1
  5445  15E0  0820               	movf	__tdiv_to_l_@quot,w
  5446  15E1  00F2               	movwf	?__tdiv_to_l_
  5447  15E2  0008               	return
  5448  15E3                     __end_of__tdiv_to_l_:
  5449                           
  5450                           	psect	text13
  5451  16E8                     __ptext13:	
  5452 ;; *************** function __div_to_l_ *****************
  5453 ;; Defined at:
  5454 ;;		line 60 in file "D:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\fldivl.c"
  5455 ;; Parameters:    Size  Location     Type
  5456 ;;  f1              3    2[COMMON] unsigned long 
  5457 ;;  f2              3    5[COMMON] unsigned long 
  5458 ;; Auto vars:     Size  Location     Type
  5459 ;;  quot            4    8[BANK0 ] unsigned long 
  5460 ;;  exp1            1   13[BANK0 ] unsigned char 
  5461 ;;  cntr            1   12[BANK0 ] unsigned char 
  5462 ;; Return value:  Size  Location     Type
  5463 ;;                  4    2[COMMON] unsigned long 
  5464 ;; Registers used:
  5465 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  5466 ;; Tracked objects:
  5467 ;;		On entry : 0/0
  5468 ;;		On exit  : 300/0
  5469 ;;		Unchanged: 0/0
  5470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5471 ;;      Params:         6       0       0       0       0
  5472 ;;      Locals:         0       6       0       0       0
  5473 ;;      Temps:          0       8       0       0       0
  5474 ;;      Totals:         6      14       0       0       0
  5475 ;;Total ram usage:       20 bytes
  5476 ;; Hardware stack levels used:    1
  5477 ;; Hardware stack levels required when called:    1
  5478 ;; This function calls:
  5479 ;;		Nothing
  5480 ;; This function is called by:
  5481 ;;		_sprintf
  5482 ;; This function uses a non-reentrant model
  5483 ;;
  5484                           
  5485                           
  5486                           ;psect for function __div_to_l_
  5487  16E8                     __div_to_l_:
  5488                           
  5489                           ;incstack = 0
  5490                           ; Regs used in __div_to_l_: [wreg-fsr0h+status,2+status,0+btemp+1]
  5491  16E8  3072               	movlw	low (__div_to_l_@f1| 0)
  5492  16E9  0084               	movwf	4
  5493  16EA  0800               	movf	0,w
  5494  16EB  1283               	bcf	3,5	;RP0=0, select bank0
  5495  16EC  1303               	bcf	3,6	;RP1=0, select bank0
  5496  16ED  00A0               	movwf	??__div_to_l_
  5497  16EE  0A84               	incf	4,f
  5498  16EF  0800               	movf	0,w
  5499  16F0  00A1               	movwf	??__div_to_l_+1
  5500  16F1  0A84               	incf	4,f
  5501  16F2  0800               	movf	0,w
  5502  16F3  00A2               	movwf	??__div_to_l_+2
  5503  16F4  0A84               	incf	4,f
  5504  16F5  0800               	movf	0,w
  5505  16F6  00A3               	movwf	??__div_to_l_+3
  5506  16F7  1003               	clrc
  5507  16F8  0D22               	rlf	??__div_to_l_+2,w
  5508  16F9  0D23               	rlf	??__div_to_l_+3,w
  5509  16FA  00FF               	movwf	127
  5510  16FB  087F               	movf	127,w
  5511  16FC  00AD               	movwf	__div_to_l_@exp1
  5512  16FD  082D               	movf	__div_to_l_@exp1,w
  5513  16FE  1D03               	btfss	3,2
  5514  16FF  2F09               	goto	l3615
  5515  1700                     l3611:
  5516  1700  3000               	movlw	0
  5517  1701  00F5               	movwf	?__div_to_l_+3
  5518  1702  3000               	movlw	0
  5519  1703  00F4               	movwf	?__div_to_l_+2
  5520  1704  3000               	movlw	0
  5521  1705  00F3               	movwf	?__div_to_l_+1
  5522  1706  3000               	movlw	0
  5523  1707  00F2               	movwf	?__div_to_l_
  5524  1708  0008               	return
  5525  1709                     l3615:
  5526  1709  3075               	movlw	low (__div_to_l_@f2| 0)
  5527  170A  0084               	movwf	4
  5528  170B  0800               	movf	0,w
  5529  170C  00A0               	movwf	??__div_to_l_
  5530  170D  0A84               	incf	4,f
  5531  170E  0800               	movf	0,w
  5532  170F  00A1               	movwf	??__div_to_l_+1
  5533  1710  0A84               	incf	4,f
  5534  1711  0800               	movf	0,w
  5535  1712  00A2               	movwf	??__div_to_l_+2
  5536  1713  0A84               	incf	4,f
  5537  1714  0800               	movf	0,w
  5538  1715  00A3               	movwf	??__div_to_l_+3
  5539  1716  1003               	clrc
  5540  1717  0D22               	rlf	??__div_to_l_+2,w
  5541  1718  0D23               	rlf	??__div_to_l_+3,w
  5542  1719  00FF               	movwf	127
  5543  171A  087F               	movf	127,w
  5544  171B  00AC               	movwf	__div_to_l_@cntr
  5545  171C  082C               	movf	__div_to_l_@cntr,w
  5546  171D  1903               	btfsc	3,2
  5547  171E  2F00               	goto	l3611
  5548  171F  3072               	movlw	low (__div_to_l_@f1| 0)
  5549  1720  0084               	movwf	4
  5550  1721  3000               	movlw	0
  5551  1722  0480               	iorwf	0,f
  5552  1723  0A84               	incf	4,f
  5553  1724  3000               	movlw	0
  5554  1725  0480               	iorwf	0,f
  5555  1726  0A84               	incf	4,f
  5556  1727  3080               	movlw	128
  5557  1728  0480               	iorwf	0,f
  5558  1729  0A84               	incf	4,f
  5559  172A  3000               	movlw	0
  5560  172B  0480               	iorwf	0,f
  5561  172C  3072               	movlw	low (__div_to_l_@f1| 0)
  5562  172D  0084               	movwf	4
  5563  172E  30FF               	movlw	255
  5564  172F  0580               	andwf	0,f
  5565  1730  0A84               	incf	4,f
  5566  1731  30FF               	movlw	255
  5567  1732  0580               	andwf	0,f
  5568  1733  0A84               	incf	4,f
  5569  1734  30FF               	movlw	255
  5570  1735  0580               	andwf	0,f
  5571  1736  0A84               	incf	4,f
  5572  1737  3000               	movlw	0
  5573  1738  0580               	andwf	0,f
  5574  1739  3075               	movlw	low (__div_to_l_@f2| 0)
  5575  173A  0084               	movwf	4
  5576  173B  3000               	movlw	0
  5577  173C  0480               	iorwf	0,f
  5578  173D  0A84               	incf	4,f
  5579  173E  3000               	movlw	0
  5580  173F  0480               	iorwf	0,f
  5581  1740  0A84               	incf	4,f
  5582  1741  3080               	movlw	128
  5583  1742  0480               	iorwf	0,f
  5584  1743  0A84               	incf	4,f
  5585  1744  3000               	movlw	0
  5586  1745  0480               	iorwf	0,f
  5587  1746  3075               	movlw	low (__div_to_l_@f2| 0)
  5588  1747  0084               	movwf	4
  5589  1748  30FF               	movlw	255
  5590  1749  0580               	andwf	0,f
  5591  174A  0A84               	incf	4,f
  5592  174B  30FF               	movlw	255
  5593  174C  0580               	andwf	0,f
  5594  174D  0A84               	incf	4,f
  5595  174E  30FF               	movlw	255
  5596  174F  0580               	andwf	0,f
  5597  1750  0A84               	incf	4,f
  5598  1751  3000               	movlw	0
  5599  1752  0580               	andwf	0,f
  5600  1753  3000               	movlw	0
  5601  1754  00AB               	movwf	__div_to_l_@quot+3
  5602  1755  3000               	movlw	0
  5603  1756  00AA               	movwf	__div_to_l_@quot+2
  5604  1757  3000               	movlw	0
  5605  1758  00A9               	movwf	__div_to_l_@quot+1
  5606  1759  3000               	movlw	0
  5607  175A  00A8               	movwf	__div_to_l_@quot
  5608  175B  307F               	movlw	127
  5609  175C  02AD               	subwf	__div_to_l_@exp1,f
  5610  175D  30A0               	movlw	160
  5611  175E  072C               	addwf	__div_to_l_@cntr,w
  5612  175F  00A0               	movwf	??__div_to_l_
  5613  1760  0820               	movf	??__div_to_l_,w
  5614  1761  02AD               	subwf	__div_to_l_@exp1,f
  5615  1762  3020               	movlw	32
  5616  1763  00FF               	movwf	127
  5617  1764  087F               	movf	127,w
  5618  1765  00AC               	movwf	__div_to_l_@cntr
  5619  1766                     l3631:
  5620  1766  3001               	movlw	1
  5621  1767  00A0               	movwf	??__div_to_l_
  5622  1768                     u4795:
  5623  1768  1003               	clrc
  5624  1769  0DA8               	rlf	__div_to_l_@quot,f
  5625  176A  0DA9               	rlf	__div_to_l_@quot+1,f
  5626  176B  0DAA               	rlf	__div_to_l_@quot+2,f
  5627  176C  0DAB               	rlf	__div_to_l_@quot+3,f
  5628  176D  0BA0               	decfsz	??__div_to_l_,f
  5629  176E  2F68               	goto	u4795
  5630  176F  3075               	movlw	low (__div_to_l_@f2| 0)
  5631  1770  0084               	movwf	4
  5632  1771  0800               	movf	0,w
  5633  1772  00A0               	movwf	??__div_to_l_
  5634  1773  0A84               	incf	4,f
  5635  1774  0800               	movf	0,w
  5636  1775  00A1               	movwf	??__div_to_l_+1
  5637  1776  0A84               	incf	4,f
  5638  1777  0800               	movf	0,w
  5639  1778  00A2               	movwf	??__div_to_l_+2
  5640  1779  0A84               	incf	4,f
  5641  177A  0800               	movf	0,w
  5642  177B  00A3               	movwf	??__div_to_l_+3
  5643  177C  3072               	movlw	low (__div_to_l_@f1| 0)
  5644  177D  0084               	movwf	4
  5645  177E  0800               	movf	0,w
  5646  177F  00A4               	movwf	??__div_to_l_+4
  5647  1780  0A84               	incf	4,f
  5648  1781  0800               	movf	0,w
  5649  1782  00A5               	movwf	??__div_to_l_+5
  5650  1783  0A84               	incf	4,f
  5651  1784  0800               	movf	0,w
  5652  1785  00A6               	movwf	??__div_to_l_+6
  5653  1786  0A84               	incf	4,f
  5654  1787  0800               	movf	0,w
  5655  1788  00A7               	movwf	??__div_to_l_+7
  5656  1789  0823               	movf	??__div_to_l_+3,w
  5657  178A  0227               	subwf	??__div_to_l_+7,w
  5658  178B  1D03               	skipz
  5659  178C  2F97               	goto	u4805
  5660  178D  0822               	movf	??__div_to_l_+2,w
  5661  178E  0226               	subwf	??__div_to_l_+6,w
  5662  178F  1D03               	skipz
  5663  1790  2F97               	goto	u4805
  5664  1791  0821               	movf	??__div_to_l_+1,w
  5665  1792  0225               	subwf	??__div_to_l_+5,w
  5666  1793  1D03               	skipz
  5667  1794  2F97               	goto	u4805
  5668  1795  0820               	movf	??__div_to_l_,w
  5669  1796  0224               	subwf	??__div_to_l_+4,w
  5670  1797                     u4805:
  5671  1797  1C03               	skipc
  5672  1798  2FBC               	goto	l820
  5673  1799  3075               	movlw	low (__div_to_l_@f2| 0)
  5674  179A  0084               	movwf	4
  5675  179B  0800               	movf	0,w
  5676  179C  00A0               	movwf	??__div_to_l_
  5677  179D  0A84               	incf	4,f
  5678  179E  0800               	movf	0,w
  5679  179F  00A1               	movwf	??__div_to_l_+1
  5680  17A0  0A84               	incf	4,f
  5681  17A1  0800               	movf	0,w
  5682  17A2  00A2               	movwf	??__div_to_l_+2
  5683  17A3  0A84               	incf	4,f
  5684  17A4  0800               	movf	0,w
  5685  17A5  00A3               	movwf	??__div_to_l_+3
  5686  17A6  3072               	movlw	low (__div_to_l_@f1| 0)
  5687  17A7  0084               	movwf	4
  5688  17A8  0820               	movf	??__div_to_l_,w
  5689  17A9  0280               	subwf	0,f
  5690  17AA  0A84               	incf	4,f
  5691  17AB  0821               	movf	??__div_to_l_+1,w
  5692  17AC  1C03               	skipc
  5693  17AD  0F21               	incfsz	??__div_to_l_+1,w
  5694  17AE  0280               	subwf	0,f
  5695  17AF  0A84               	incf	4,f
  5696  17B0  0822               	movf	??__div_to_l_+2,w
  5697  17B1  1C03               	skipc
  5698  17B2  0F22               	incfsz	??__div_to_l_+2,w
  5699  17B3  0280               	subwf	0,f
  5700  17B4  0A84               	incf	4,f
  5701  17B5  0823               	movf	??__div_to_l_+3,w
  5702  17B6  1C03               	skipc
  5703  17B7  0A23               	incf	??__div_to_l_+3,w
  5704  17B8  0280               	subwf	0,f
  5705  17B9  3003               	movlw	3
  5706  17BA  0284               	subwf	4,f
  5707  17BB  1428               	bsf	__div_to_l_@quot,0
  5708  17BC                     l820:
  5709  17BC  3072               	movlw	low (__div_to_l_@f1| 0)
  5710  17BD  0084               	movwf	4
  5711  17BE  1003               	clrc
  5712  17BF  0D80               	rlf	0,f
  5713  17C0  0A84               	incf	4,f
  5714  17C1  0D80               	rlf	0,f
  5715  17C2  0A84               	incf	4,f
  5716  17C3  0D80               	rlf	0,f
  5717  17C4  0A84               	incf	4,f
  5718  17C5  0D80               	rlf	0,f
  5719  17C6  0384               	decf	4,f
  5720  17C7  0384               	decf	4,f
  5721  17C8  0384               	decf	4,f
  5722  17C9  3001               	movlw	1
  5723  17CA  02AC               	subwf	__div_to_l_@cntr,f
  5724  17CB  1D03               	btfss	3,2
  5725  17CC  2F66               	goto	l3631
  5726  17CD  1FAD               	btfss	__div_to_l_@exp1,7
  5727  17CE  2FE4               	goto	l3651
  5728  17CF  082D               	movf	__div_to_l_@exp1,w
  5729  17D0  3A80               	xorlw	128
  5730  17D1  3E9F               	addlw	159
  5731  17D2  1C03               	btfss	3,0
  5732  17D3  2F00               	goto	l3611
  5733  17D4                     l3647:
  5734  17D4  3001               	movlw	1
  5735  17D5                     u4845:
  5736  17D5  1003               	clrc
  5737  17D6  0CAB               	rrf	__div_to_l_@quot+3,f
  5738  17D7  0CAA               	rrf	__div_to_l_@quot+2,f
  5739  17D8  0CA9               	rrf	__div_to_l_@quot+1,f
  5740  17D9  0CA8               	rrf	__div_to_l_@quot,f
  5741  17DA  3EFF               	addlw	-1
  5742  17DB  1D03               	skipz
  5743  17DC  2FD5               	goto	u4845
  5744  17DD  3001               	movlw	1
  5745  17DE  00FF               	movwf	127
  5746  17DF  087F               	movf	127,w
  5747  17E0  07AD               	addwf	__div_to_l_@exp1,f
  5748  17E1  1903               	btfsc	3,2
  5749  17E2  2FF7               	goto	l3659
  5750  17E3  2FD4               	goto	l3647
  5751  17E4                     l3651:
  5752  17E4  3020               	movlw	32
  5753  17E5  022D               	subwf	__div_to_l_@exp1,w
  5754  17E6  1803               	btfsc	3,0
  5755  17E7  2F00               	goto	l3611
  5756  17E8                     l828:
  5757  17E8  082D               	movf	__div_to_l_@exp1,w
  5758  17E9  1903               	btfsc	3,2
  5759  17EA  2FF7               	goto	l3659
  5760  17EB  3001               	movlw	1
  5761  17EC  00A0               	movwf	??__div_to_l_
  5762  17ED                     u4875:
  5763  17ED  1003               	clrc
  5764  17EE  0DA8               	rlf	__div_to_l_@quot,f
  5765  17EF  0DA9               	rlf	__div_to_l_@quot+1,f
  5766  17F0  0DAA               	rlf	__div_to_l_@quot+2,f
  5767  17F1  0DAB               	rlf	__div_to_l_@quot+3,f
  5768  17F2  0BA0               	decfsz	??__div_to_l_,f
  5769  17F3  2FED               	goto	u4875
  5770  17F4  3001               	movlw	1
  5771  17F5  02AD               	subwf	__div_to_l_@exp1,f
  5772  17F6  2FE8               	goto	l828
  5773  17F7                     l3659:
  5774  17F7  082B               	movf	__div_to_l_@quot+3,w
  5775  17F8  00F5               	movwf	?__div_to_l_+3
  5776  17F9  082A               	movf	__div_to_l_@quot+2,w
  5777  17FA  00F4               	movwf	?__div_to_l_+2
  5778  17FB  0829               	movf	__div_to_l_@quot+1,w
  5779  17FC  00F3               	movwf	?__div_to_l_+1
  5780  17FD  0828               	movf	__div_to_l_@quot,w
  5781  17FE  00F2               	movwf	?__div_to_l_
  5782  17FF  0008               	return
  5783  1800                     __end_of__div_to_l_:
  5784                           
  5785                           	psect	text14
  5786  1C3B                     __ptext14:	
  5787 ;; *************** function ___lltoft *****************
  5788 ;; Defined at:
  5789 ;;		line 35 in file "D:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\lltoft.c"
  5790 ;; Parameters:    Size  Location     Type
  5791 ;;  c               4    0[BANK0 ] unsigned long 
  5792 ;; Auto vars:     Size  Location     Type
  5793 ;;  exp             1   10[COMMON] unsigned char 
  5794 ;; Return value:  Size  Location     Type
  5795 ;;                  3    0[BANK0 ] float 
  5796 ;; Registers used:
  5797 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5798 ;; Tracked objects:
  5799 ;;		On entry : 300/0
  5800 ;;		On exit  : 300/0
  5801 ;;		Unchanged: 0/0
  5802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5803 ;;      Params:         0       4       0       0       0
  5804 ;;      Locals:         1       0       0       0       0
  5805 ;;      Temps:          0       0       0       0       0
  5806 ;;      Totals:         1       4       0       0       0
  5807 ;;Total ram usage:        5 bytes
  5808 ;; Hardware stack levels used:    1
  5809 ;; Hardware stack levels required when called:    2
  5810 ;; This function calls:
  5811 ;;		___ftpack
  5812 ;; This function is called by:
  5813 ;;		_sprintf
  5814 ;; This function uses a non-reentrant model
  5815 ;;
  5816                           
  5817                           
  5818                           ;psect for function ___lltoft
  5819  1C3B                     ___lltoft:
  5820                           
  5821                           ;incstack = 0
  5822                           ; Regs used in ___lltoft: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5823  1C3B  308E               	movlw	142
  5824  1C3C  00FF               	movwf	127
  5825  1C3D  087F               	movf	127,w
  5826  1C3E  00FA               	movwf	___lltoft@exp
  5827  1C3F                     l4989:
  5828  1C3F  30FF               	movlw	255
  5829  1C40  0523               	andwf	___lltoft@c+3,w
  5830  1C41  1903               	btfsc	3,2
  5831  1C42  2C51               	goto	l4991
  5832  1C43  3001               	movlw	1
  5833  1C44                     u7055:
  5834  1C44  1003               	clrc
  5835  1C45  0CA3               	rrf	___lltoft@c+3,f
  5836  1C46  0CA2               	rrf	___lltoft@c+2,f
  5837  1C47  0CA1               	rrf	___lltoft@c+1,f
  5838  1C48  0CA0               	rrf	___lltoft@c,f
  5839  1C49  3EFF               	addlw	-1
  5840  1C4A  1D03               	skipz
  5841  1C4B  2C44               	goto	u7055
  5842  1C4C  3001               	movlw	1
  5843  1C4D  00FF               	movwf	127
  5844  1C4E  087F               	movf	127,w
  5845  1C4F  07FA               	addwf	___lltoft@exp,f
  5846  1C50  2C3F               	goto	l4989
  5847  1C51                     l4991:
  5848  1C51  0820               	movf	___lltoft@c,w
  5849  1C52  00F2               	movwf	___ftpack@arg
  5850  1C53  0821               	movf	___lltoft@c+1,w
  5851  1C54  00F3               	movwf	___ftpack@arg+1
  5852  1C55  0822               	movf	___lltoft@c+2,w
  5853  1C56  00F4               	movwf	___ftpack@arg+2
  5854  1C57  087A               	movf	___lltoft@exp,w
  5855  1C58  00FF               	movwf	127
  5856  1C59  087F               	movf	127,w
  5857  1C5A  00F5               	movwf	___ftpack@exp
  5858  1C5B  01F6               	clrf	___ftpack@sign
  5859  1C5C  160A  118A  2188   	fcall	___ftpack
  5860  1C5F  0872               	movf	?___ftpack,w
  5861  1C60  00A0               	movwf	?___lltoft
  5862  1C61  0873               	movf	?___ftpack+1,w
  5863  1C62  00A1               	movwf	?___lltoft+1
  5864  1C63  0874               	movf	?___ftpack+2,w
  5865  1C64  00A2               	movwf	?___lltoft+2
  5866  1C65  0008               	return
  5867  1C66                     __end_of___lltoft:
  5868                           
  5869                           	psect	text15
  5870  1E4B                     __ptext15:	
  5871 ;; *************** function ___llmod *****************
  5872 ;; Defined at:
  5873 ;;		line 5 in file "D:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\llmod.c"
  5874 ;; Parameters:    Size  Location     Type
  5875 ;;  divisor         4    2[COMMON] unsigned long 
  5876 ;;  dividend        4    6[COMMON] unsigned long 
  5877 ;; Auto vars:     Size  Location     Type
  5878 ;;  counter         1    0[BANK0 ] unsigned char 
  5879 ;; Return value:  Size  Location     Type
  5880 ;;                  4    2[COMMON] unsigned long 
  5881 ;; Registers used:
  5882 ;;		wreg, status,2, status,0, btemp+1
  5883 ;; Tracked objects:
  5884 ;;		On entry : 300/100
  5885 ;;		On exit  : 200/0
  5886 ;;		Unchanged: 0/0
  5887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5888 ;;      Params:         8       0       0       0       0
  5889 ;;      Locals:         0       1       0       0       0
  5890 ;;      Temps:          1       0       0       0       0
  5891 ;;      Totals:         9       1       0       0       0
  5892 ;;Total ram usage:       10 bytes
  5893 ;; Hardware stack levels used:    1
  5894 ;; Hardware stack levels required when called:    1
  5895 ;; This function calls:
  5896 ;;		Nothing
  5897 ;; This function is called by:
  5898 ;;		_sprintf
  5899 ;; This function uses a non-reentrant model
  5900 ;;
  5901                           
  5902                           
  5903                           ;psect for function ___llmod
  5904  1E4B                     ___llmod:
  5905                           
  5906                           ;incstack = 0
  5907                           ; Regs used in ___llmod: [wreg+status,2+status,0+btemp+1]
  5908  1E4B  0875               	movf	___llmod@divisor+3,w
  5909  1E4C  0474               	iorwf	___llmod@divisor+2,w
  5910  1E4D  0473               	iorwf	___llmod@divisor+1,w
  5911  1E4E  0472               	iorwf	___llmod@divisor,w
  5912  1E4F  1903               	skipnz
  5913  1E50  2E8F               	goto	l4979
  5914  1E51  1283               	bcf	3,5	;RP0=0, select bank0
  5915  1E52  01A0               	clrf	___llmod@counter
  5916  1E53  0AA0               	incf	___llmod@counter,f
  5917  1E54                     l4969:
  5918  1E54  1BF5               	btfsc	___llmod@divisor+3,7
  5919  1E55  2E64               	goto	l4971
  5920  1E56  3001               	movlw	1
  5921  1E57  00FA               	movwf	??___llmod
  5922  1E58                     u7005:
  5923  1E58  1003               	clrc
  5924  1E59  0DF2               	rlf	___llmod@divisor,f
  5925  1E5A  0DF3               	rlf	___llmod@divisor+1,f
  5926  1E5B  0DF4               	rlf	___llmod@divisor+2,f
  5927  1E5C  0DF5               	rlf	___llmod@divisor+3,f
  5928  1E5D  0BFA               	decfsz	??___llmod,f
  5929  1E5E  2E58               	goto	u7005
  5930  1E5F  3001               	movlw	1
  5931  1E60  00FF               	movwf	127
  5932  1E61  087F               	movf	127,w
  5933  1E62  07A0               	addwf	___llmod@counter,f
  5934  1E63  2E54               	goto	l4969
  5935  1E64                     l4971:
  5936  1E64  0875               	movf	___llmod@divisor+3,w
  5937  1E65  0279               	subwf	___llmod@dividend+3,w
  5938  1E66  1D03               	skipz
  5939  1E67  2E72               	goto	u7025
  5940  1E68  0874               	movf	___llmod@divisor+2,w
  5941  1E69  0278               	subwf	___llmod@dividend+2,w
  5942  1E6A  1D03               	skipz
  5943  1E6B  2E72               	goto	u7025
  5944  1E6C  0873               	movf	___llmod@divisor+1,w
  5945  1E6D  0277               	subwf	___llmod@dividend+1,w
  5946  1E6E  1D03               	skipz
  5947  1E6F  2E72               	goto	u7025
  5948  1E70  0872               	movf	___llmod@divisor,w
  5949  1E71  0276               	subwf	___llmod@dividend,w
  5950  1E72                     u7025:
  5951  1E72  1C03               	skipc
  5952  1E73  2E82               	goto	l4975
  5953  1E74  0872               	movf	___llmod@divisor,w
  5954  1E75  02F6               	subwf	___llmod@dividend,f
  5955  1E76  0873               	movf	___llmod@divisor+1,w
  5956  1E77  1C03               	skipc
  5957  1E78  0F73               	incfsz	___llmod@divisor+1,w
  5958  1E79  02F7               	subwf	___llmod@dividend+1,f
  5959  1E7A  0874               	movf	___llmod@divisor+2,w
  5960  1E7B  1C03               	skipc
  5961  1E7C  0F74               	incfsz	___llmod@divisor+2,w
  5962  1E7D  02F8               	subwf	___llmod@dividend+2,f
  5963  1E7E  0875               	movf	___llmod@divisor+3,w
  5964  1E7F  1C03               	skipc
  5965  1E80  0F75               	incfsz	___llmod@divisor+3,w
  5966  1E81  02F9               	subwf	___llmod@dividend+3,f
  5967  1E82                     l4975:
  5968  1E82  3001               	movlw	1
  5969  1E83                     u7035:
  5970  1E83  1003               	clrc
  5971  1E84  0CF5               	rrf	___llmod@divisor+3,f
  5972  1E85  0CF4               	rrf	___llmod@divisor+2,f
  5973  1E86  0CF3               	rrf	___llmod@divisor+1,f
  5974  1E87  0CF2               	rrf	___llmod@divisor,f
  5975  1E88  3EFF               	addlw	-1
  5976  1E89  1D03               	skipz
  5977  1E8A  2E83               	goto	u7035
  5978  1E8B  3001               	movlw	1
  5979  1E8C  02A0               	subwf	___llmod@counter,f
  5980  1E8D  1D03               	btfss	3,2
  5981  1E8E  2E64               	goto	l4971
  5982  1E8F                     l4979:
  5983  1E8F  0879               	movf	___llmod@dividend+3,w
  5984  1E90  00F5               	movwf	?___llmod+3
  5985  1E91  0878               	movf	___llmod@dividend+2,w
  5986  1E92  00F4               	movwf	?___llmod+2
  5987  1E93  0877               	movf	___llmod@dividend+1,w
  5988  1E94  00F3               	movwf	?___llmod+1
  5989  1E95  0876               	movf	___llmod@dividend,w
  5990  1E96  00F2               	movwf	?___llmod
  5991  1E97  0008               	return
  5992  1E98                     __end_of___llmod:
  5993                           
  5994                           	psect	text16
  5995  1FA1                     __ptext16:	
  5996 ;; *************** function ___lldiv *****************
  5997 ;; Defined at:
  5998 ;;		line 5 in file "D:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\__lldiv.c"
  5999 ;; Parameters:    Size  Location     Type
  6000 ;;  divisor         4    2[COMMON] unsigned long 
  6001 ;;  dividend        4    6[COMMON] unsigned long 
  6002 ;; Auto vars:     Size  Location     Type
  6003 ;;  quotient        4    0[BANK0 ] unsigned long 
  6004 ;;  counter         1    4[BANK0 ] unsigned char 
  6005 ;; Return value:  Size  Location     Type
  6006 ;;                  4    2[COMMON] unsigned long 
  6007 ;; Registers used:
  6008 ;;		wreg, status,2, status,0, btemp+1
  6009 ;; Tracked objects:
  6010 ;;		On entry : 300/100
  6011 ;;		On exit  : 300/0
  6012 ;;		Unchanged: 0/0
  6013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6014 ;;      Params:         8       0       0       0       0
  6015 ;;      Locals:         0       5       0       0       0
  6016 ;;      Temps:          1       0       0       0       0
  6017 ;;      Totals:         9       5       0       0       0
  6018 ;;Total ram usage:       14 bytes
  6019 ;; Hardware stack levels used:    1
  6020 ;; Hardware stack levels required when called:    1
  6021 ;; This function calls:
  6022 ;;		Nothing
  6023 ;; This function is called by:
  6024 ;;		_sprintf
  6025 ;; This function uses a non-reentrant model
  6026 ;;
  6027                           
  6028                           
  6029                           ;psect for function ___lldiv
  6030  1FA1                     ___lldiv:
  6031                           
  6032                           ;incstack = 0
  6033                           ; Regs used in ___lldiv: [wreg+status,2+status,0+btemp+1]
  6034  1FA1  3000               	movlw	0
  6035  1FA2  1283               	bcf	3,5	;RP0=0, select bank0
  6036  1FA3  00A3               	movwf	___lldiv@quotient+3
  6037  1FA4  3000               	movlw	0
  6038  1FA5  00A2               	movwf	___lldiv@quotient+2
  6039  1FA6  3000               	movlw	0
  6040  1FA7  00A1               	movwf	___lldiv@quotient+1
  6041  1FA8  3000               	movlw	0
  6042  1FA9  00A0               	movwf	___lldiv@quotient
  6043  1FAA  0875               	movf	___lldiv@divisor+3,w
  6044  1FAB  0474               	iorwf	___lldiv@divisor+2,w
  6045  1FAC  0473               	iorwf	___lldiv@divisor+1,w
  6046  1FAD  0472               	iorwf	___lldiv@divisor,w
  6047  1FAE  1903               	skipnz
  6048  1FAF  2FF7               	goto	l3685
  6049  1FB0  01A4               	clrf	___lldiv@counter
  6050  1FB1  0AA4               	incf	___lldiv@counter,f
  6051  1FB2                     l3671:
  6052  1FB2  1BF5               	btfsc	___lldiv@divisor+3,7
  6053  1FB3  2FC2               	goto	l3673
  6054  1FB4  3001               	movlw	1
  6055  1FB5  00FA               	movwf	??___lldiv
  6056  1FB6                     u4905:
  6057  1FB6  1003               	clrc
  6058  1FB7  0DF2               	rlf	___lldiv@divisor,f
  6059  1FB8  0DF3               	rlf	___lldiv@divisor+1,f
  6060  1FB9  0DF4               	rlf	___lldiv@divisor+2,f
  6061  1FBA  0DF5               	rlf	___lldiv@divisor+3,f
  6062  1FBB  0BFA               	decfsz	??___lldiv,f
  6063  1FBC  2FB6               	goto	u4905
  6064  1FBD  3001               	movlw	1
  6065  1FBE  00FF               	movwf	127
  6066  1FBF  087F               	movf	127,w
  6067  1FC0  07A4               	addwf	___lldiv@counter,f
  6068  1FC1  2FB2               	goto	l3671
  6069  1FC2                     l3673:
  6070  1FC2  3001               	movlw	1
  6071  1FC3  00FA               	movwf	??___lldiv
  6072  1FC4                     u4925:
  6073  1FC4  1003               	clrc
  6074  1FC5  0DA0               	rlf	___lldiv@quotient,f
  6075  1FC6  0DA1               	rlf	___lldiv@quotient+1,f
  6076  1FC7  0DA2               	rlf	___lldiv@quotient+2,f
  6077  1FC8  0DA3               	rlf	___lldiv@quotient+3,f
  6078  1FC9  0BFA               	decfsz	??___lldiv,f
  6079  1FCA  2FC4               	goto	u4925
  6080  1FCB  0875               	movf	___lldiv@divisor+3,w
  6081  1FCC  0279               	subwf	___lldiv@dividend+3,w
  6082  1FCD  1D03               	skipz
  6083  1FCE  2FD9               	goto	u4935
  6084  1FCF  0874               	movf	___lldiv@divisor+2,w
  6085  1FD0  0278               	subwf	___lldiv@dividend+2,w
  6086  1FD1  1D03               	skipz
  6087  1FD2  2FD9               	goto	u4935
  6088  1FD3  0873               	movf	___lldiv@divisor+1,w
  6089  1FD4  0277               	subwf	___lldiv@dividend+1,w
  6090  1FD5  1D03               	skipz
  6091  1FD6  2FD9               	goto	u4935
  6092  1FD7  0872               	movf	___lldiv@divisor,w
  6093  1FD8  0276               	subwf	___lldiv@dividend,w
  6094  1FD9                     u4935:
  6095  1FD9  1C03               	skipc
  6096  1FDA  2FEA               	goto	l3681
  6097  1FDB  0872               	movf	___lldiv@divisor,w
  6098  1FDC  02F6               	subwf	___lldiv@dividend,f
  6099  1FDD  0873               	movf	___lldiv@divisor+1,w
  6100  1FDE  1C03               	skipc
  6101  1FDF  0F73               	incfsz	___lldiv@divisor+1,w
  6102  1FE0  02F7               	subwf	___lldiv@dividend+1,f
  6103  1FE1  0874               	movf	___lldiv@divisor+2,w
  6104  1FE2  1C03               	skipc
  6105  1FE3  0F74               	incfsz	___lldiv@divisor+2,w
  6106  1FE4  02F8               	subwf	___lldiv@dividend+2,f
  6107  1FE5  0875               	movf	___lldiv@divisor+3,w
  6108  1FE6  1C03               	skipc
  6109  1FE7  0F75               	incfsz	___lldiv@divisor+3,w
  6110  1FE8  02F9               	subwf	___lldiv@dividend+3,f
  6111  1FE9  1420               	bsf	___lldiv@quotient,0
  6112  1FEA                     l3681:
  6113  1FEA  3001               	movlw	1
  6114  1FEB                     u4945:
  6115  1FEB  1003               	clrc
  6116  1FEC  0CF5               	rrf	___lldiv@divisor+3,f
  6117  1FED  0CF4               	rrf	___lldiv@divisor+2,f
  6118  1FEE  0CF3               	rrf	___lldiv@divisor+1,f
  6119  1FEF  0CF2               	rrf	___lldiv@divisor,f
  6120  1FF0  3EFF               	addlw	-1
  6121  1FF1  1D03               	skipz
  6122  1FF2  2FEB               	goto	u4945
  6123  1FF3  3001               	movlw	1
  6124  1FF4  02A4               	subwf	___lldiv@counter,f
  6125  1FF5  1D03               	btfss	3,2
  6126  1FF6  2FC2               	goto	l3673
  6127  1FF7                     l3685:
  6128  1FF7  0823               	movf	___lldiv@quotient+3,w
  6129  1FF8  00F5               	movwf	?___lldiv+3
  6130  1FF9  0822               	movf	___lldiv@quotient+2,w
  6131  1FFA  00F4               	movwf	?___lldiv+2
  6132  1FFB  0821               	movf	___lldiv@quotient+1,w
  6133  1FFC  00F3               	movwf	?___lldiv+1
  6134  1FFD  0820               	movf	___lldiv@quotient,w
  6135  1FFE  00F2               	movwf	?___lldiv
  6136  1FFF  0008               	return
  6137  2000                     __end_of___lldiv:
  6138                           
  6139                           	psect	text17
  6140  116B                     __ptext17:	
  6141 ;; *************** function ___ftsub *****************
  6142 ;; Defined at:
  6143 ;;		line 17 in file "D:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\ftsub.c"
  6144 ;; Parameters:    Size  Location     Type
  6145 ;;  f2              3   54[BANK0 ] float 
  6146 ;;  f1              3   57[BANK0 ] float 
  6147 ;; Auto vars:     Size  Location     Type
  6148 ;;		None
  6149 ;; Return value:  Size  Location     Type
  6150 ;;                  3   54[BANK0 ] float 
  6151 ;; Registers used:
  6152 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  6153 ;; Tracked objects:
  6154 ;;		On entry : 300/0
  6155 ;;		On exit  : 300/0
  6156 ;;		Unchanged: 0/0
  6157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6158 ;;      Params:         0       6       0       0       0
  6159 ;;      Locals:         0       0       0       0       0
  6160 ;;      Temps:          0       0       0       0       0
  6161 ;;      Totals:         0       6       0       0       0
  6162 ;;Total ram usage:        6 bytes
  6163 ;; Hardware stack levels used:    1
  6164 ;; Hardware stack levels required when called:    3
  6165 ;; This function calls:
  6166 ;;		___ftadd
  6167 ;; This function is called by:
  6168 ;;		_sprintf
  6169 ;; This function uses a non-reentrant model
  6170 ;;
  6171                           
  6172                           
  6173                           ;psect for function ___ftsub
  6174  116B                     ___ftsub:
  6175                           
  6176                           ;incstack = 0
  6177                           ; Regs used in ___ftsub: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  6178  116B  0858               	movf	___ftsub@f2+2,w
  6179  116C  0457               	iorwf	___ftsub@f2+1,w
  6180  116D  0456               	iorwf	___ftsub@f2,w
  6181  116E  1903               	skipnz
  6182  116F  2972               	goto	l4957
  6183  1170  3080               	movlw	128
  6184  1171  06D8               	xorwf	___ftsub@f2+2,f
  6185  1172                     l4957:
  6186  1172  0859               	movf	___ftsub@f1,w
  6187  1173  00CA               	movwf	___ftadd@f1
  6188  1174  085A               	movf	___ftsub@f1+1,w
  6189  1175  00CB               	movwf	___ftadd@f1+1
  6190  1176  085B               	movf	___ftsub@f1+2,w
  6191  1177  00CC               	movwf	___ftadd@f1+2
  6192  1178  0856               	movf	___ftsub@f2,w
  6193  1179  00CD               	movwf	___ftadd@f2
  6194  117A  0857               	movf	___ftsub@f2+1,w
  6195  117B  00CE               	movwf	___ftadd@f2+1
  6196  117C  0858               	movf	___ftsub@f2+2,w
  6197  117D  00CF               	movwf	___ftadd@f2+2
  6198  117E  160A  118A  25E3   	fcall	___ftadd
  6199  1181  084A               	movf	?___ftadd,w
  6200  1182  00D6               	movwf	?___ftsub
  6201  1183  084B               	movf	?___ftadd+1,w
  6202  1184  00D7               	movwf	?___ftsub+1
  6203  1185  084C               	movf	?___ftadd+2,w
  6204  1186  00D8               	movwf	?___ftsub+2
  6205  1187  0008               	return
  6206  1188                     __end_of___ftsub:
  6207                           
  6208                           	psect	text18
  6209  15E3                     __ptext18:	
  6210 ;; *************** function ___ftadd *****************
  6211 ;; Defined at:
  6212 ;;		line 86 in file "D:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\ftadd.c"
  6213 ;; Parameters:    Size  Location     Type
  6214 ;;  f1              3   42[BANK0 ] float 
  6215 ;;  f2              3   45[BANK0 ] float 
  6216 ;; Auto vars:     Size  Location     Type
  6217 ;;  exp1            1   53[BANK0 ] unsigned char 
  6218 ;;  exp2            1   52[BANK0 ] unsigned char 
  6219 ;;  sign            1   51[BANK0 ] unsigned char 
  6220 ;; Return value:  Size  Location     Type
  6221 ;;                  3   42[BANK0 ] float 
  6222 ;; Registers used:
  6223 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  6224 ;; Tracked objects:
  6225 ;;		On entry : 300/0
  6226 ;;		On exit  : 300/0
  6227 ;;		Unchanged: 0/0
  6228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6229 ;;      Params:         0       6       0       0       0
  6230 ;;      Locals:         0       3       0       0       0
  6231 ;;      Temps:          0       3       0       0       0
  6232 ;;      Totals:         0      12       0       0       0
  6233 ;;Total ram usage:       12 bytes
  6234 ;; Hardware stack levels used:    1
  6235 ;; Hardware stack levels required when called:    2
  6236 ;; This function calls:
  6237 ;;		___ftpack
  6238 ;; This function is called by:
  6239 ;;		_sprintf
  6240 ;;		___ftsub
  6241 ;; This function uses a non-reentrant model
  6242 ;;
  6243                           
  6244                           
  6245                           ;psect for function ___ftadd
  6246  15E3                     ___ftadd:
  6247                           
  6248                           ;incstack = 0
  6249                           ; Regs used in ___ftadd: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  6250  15E3  084A               	movf	___ftadd@f1,w
  6251  15E4  00D0               	movwf	??___ftadd
  6252  15E5  084B               	movf	___ftadd@f1+1,w
  6253  15E6  00D1               	movwf	??___ftadd+1
  6254  15E7  084C               	movf	___ftadd@f1+2,w
  6255  15E8  00D2               	movwf	??___ftadd+2
  6256  15E9  1003               	clrc
  6257  15EA  0D51               	rlf	??___ftadd+1,w
  6258  15EB  0D52               	rlf	??___ftadd+2,w
  6259  15EC  00FF               	movwf	127
  6260  15ED  087F               	movf	127,w
  6261  15EE  00D5               	movwf	___ftadd@exp1
  6262  15EF  084D               	movf	___ftadd@f2,w
  6263  15F0  00D0               	movwf	??___ftadd
  6264  15F1  084E               	movf	___ftadd@f2+1,w
  6265  15F2  00D1               	movwf	??___ftadd+1
  6266  15F3  084F               	movf	___ftadd@f2+2,w
  6267  15F4  00D2               	movwf	??___ftadd+2
  6268  15F5  1003               	clrc
  6269  15F6  0D51               	rlf	??___ftadd+1,w
  6270  15F7  0D52               	rlf	??___ftadd+2,w
  6271  15F8  00FF               	movwf	127
  6272  15F9  087F               	movf	127,w
  6273  15FA  00D4               	movwf	___ftadd@exp2
  6274  15FB  0855               	movf	___ftadd@exp1,w
  6275  15FC  1903               	btfsc	3,2
  6276  15FD  2E0A               	goto	l4661
  6277  15FE  0854               	movf	___ftadd@exp2,w
  6278  15FF  0255               	subwf	___ftadd@exp1,w
  6279  1600  1803               	skipnc
  6280  1601  2E11               	goto	l4665
  6281  1602  0854               	movf	___ftadd@exp2,w
  6282  1603  00D0               	movwf	??___ftadd
  6283  1604  0855               	movf	___ftadd@exp1,w
  6284  1605  02D0               	subwf	??___ftadd,f
  6285  1606  3019               	movlw	25
  6286  1607  0250               	subwf	??___ftadd,w
  6287  1608  1C03               	skipc
  6288  1609  2E11               	goto	l4665
  6289  160A                     l4661:
  6290  160A  084D               	movf	___ftadd@f2,w
  6291  160B  00CA               	movwf	?___ftadd
  6292  160C  084E               	movf	___ftadd@f2+1,w
  6293  160D  00CB               	movwf	?___ftadd+1
  6294  160E  084F               	movf	___ftadd@f2+2,w
  6295  160F  00CC               	movwf	?___ftadd+2
  6296  1610  0008               	return
  6297  1611                     l4665:
  6298  1611  0854               	movf	___ftadd@exp2,w
  6299  1612  1903               	btfsc	3,2
  6300  1613  0008               	return
  6301  1614  0855               	movf	___ftadd@exp1,w
  6302  1615  0254               	subwf	___ftadd@exp2,w
  6303  1616  1803               	skipnc
  6304  1617  2E20               	goto	l4671
  6305  1618  0855               	movf	___ftadd@exp1,w
  6306  1619  00D0               	movwf	??___ftadd
  6307  161A  0854               	movf	___ftadd@exp2,w
  6308  161B  02D0               	subwf	??___ftadd,f
  6309  161C  3019               	movlw	25
  6310  161D  0250               	subwf	??___ftadd,w
  6311  161E  1803               	btfsc	3,0
  6312  161F  0008               	return
  6313  1620                     l4671:
  6314  1620  3006               	movlw	6
  6315  1621  00FF               	movwf	127
  6316  1622  087F               	movf	127,w
  6317  1623  00D3               	movwf	___ftadd@sign
  6318  1624  1BCC               	btfsc	___ftadd@f1+2,7
  6319  1625  17D3               	bsf	___ftadd@sign,7
  6320  1626  1BCF               	btfsc	___ftadd@f2+2,7
  6321  1627  1753               	bsf	___ftadd@sign,6
  6322  1628  17CB               	bsf	___ftadd@f1+1,7
  6323  1629  30FF               	movlw	255
  6324  162A  05CA               	andwf	___ftadd@f1,f
  6325  162B  30FF               	movlw	255
  6326  162C  05CB               	andwf	___ftadd@f1+1,f
  6327  162D  3000               	movlw	0
  6328  162E  05CC               	andwf	___ftadd@f1+2,f
  6329  162F  17CE               	bsf	___ftadd@f2+1,7
  6330  1630  30FF               	movlw	255
  6331  1631  05CD               	andwf	___ftadd@f2,f
  6332  1632  30FF               	movlw	255
  6333  1633  05CE               	andwf	___ftadd@f2+1,f
  6334  1634  3000               	movlw	0
  6335  1635  05CF               	andwf	___ftadd@f2+2,f
  6336  1636  0854               	movf	___ftadd@exp2,w
  6337  1637  0255               	subwf	___ftadd@exp1,w
  6338  1638  1803               	skipnc
  6339  1639  2E60               	goto	l4695
  6340  163A                     l4683:
  6341  163A  3001               	movlw	1
  6342  163B                     u6525:
  6343  163B  1003               	clrc
  6344  163C  0DCD               	rlf	___ftadd@f2,f
  6345  163D  0DCE               	rlf	___ftadd@f2+1,f
  6346  163E  0DCF               	rlf	___ftadd@f2+2,f
  6347  163F  3EFF               	addlw	-1
  6348  1640  1D03               	skipz
  6349  1641  2E3B               	goto	u6525
  6350  1642  3001               	movlw	1
  6351  1643  02D4               	subwf	___ftadd@exp2,f
  6352  1644  0854               	movf	___ftadd@exp2,w
  6353  1645  0655               	xorwf	___ftadd@exp1,w
  6354  1646  1903               	skipnz
  6355  1647  2E5B               	goto	l4693
  6356  1648  3001               	movlw	1
  6357  1649  02D3               	subwf	___ftadd@sign,f
  6358  164A  0853               	movf	___ftadd@sign,w
  6359  164B  3907               	andlw	7
  6360  164C  1903               	btfsc	3,2
  6361  164D  2E5B               	goto	l4693
  6362  164E  2E3A               	goto	l4683
  6363  164F                     l4689:
  6364  164F  3001               	movlw	1
  6365  1650                     u6555:
  6366  1650  1003               	clrc
  6367  1651  0CCC               	rrf	___ftadd@f1+2,f
  6368  1652  0CCB               	rrf	___ftadd@f1+1,f
  6369  1653  0CCA               	rrf	___ftadd@f1,f
  6370  1654  3EFF               	addlw	-1
  6371  1655  1D03               	skipz
  6372  1656  2E50               	goto	u6555
  6373  1657  3001               	movlw	1
  6374  1658  00FF               	movwf	127
  6375  1659  087F               	movf	127,w
  6376  165A  07D5               	addwf	___ftadd@exp1,f
  6377  165B                     l4693:
  6378  165B  0855               	movf	___ftadd@exp1,w
  6379  165C  0654               	xorwf	___ftadd@exp2,w
  6380  165D  1903               	btfsc	3,2
  6381  165E  2E89               	goto	l871
  6382  165F  2E4F               	goto	l4689
  6383  1660                     l4695:
  6384  1660  0855               	movf	___ftadd@exp1,w
  6385  1661  0254               	subwf	___ftadd@exp2,w
  6386  1662  1803               	skipnc
  6387  1663  2E89               	goto	l871
  6388  1664                     l4697:
  6389  1664  3001               	movlw	1
  6390  1665                     u6585:
  6391  1665  1003               	clrc
  6392  1666  0DCA               	rlf	___ftadd@f1,f
  6393  1667  0DCB               	rlf	___ftadd@f1+1,f
  6394  1668  0DCC               	rlf	___ftadd@f1+2,f
  6395  1669  3EFF               	addlw	-1
  6396  166A  1D03               	skipz
  6397  166B  2E65               	goto	u6585
  6398  166C  3001               	movlw	1
  6399  166D  02D5               	subwf	___ftadd@exp1,f
  6400  166E  0854               	movf	___ftadd@exp2,w
  6401  166F  0655               	xorwf	___ftadd@exp1,w
  6402  1670  1903               	skipnz
  6403  1671  2E85               	goto	l4707
  6404  1672  3001               	movlw	1
  6405  1673  02D3               	subwf	___ftadd@sign,f
  6406  1674  0853               	movf	___ftadd@sign,w
  6407  1675  3907               	andlw	7
  6408  1676  1903               	btfsc	3,2
  6409  1677  2E85               	goto	l4707
  6410  1678  2E64               	goto	l4697
  6411  1679                     l4703:
  6412  1679  3001               	movlw	1
  6413  167A                     u6615:
  6414  167A  1003               	clrc
  6415  167B  0CCF               	rrf	___ftadd@f2+2,f
  6416  167C  0CCE               	rrf	___ftadd@f2+1,f
  6417  167D  0CCD               	rrf	___ftadd@f2,f
  6418  167E  3EFF               	addlw	-1
  6419  167F  1D03               	skipz
  6420  1680  2E7A               	goto	u6615
  6421  1681  3001               	movlw	1
  6422  1682  00FF               	movwf	127
  6423  1683  087F               	movf	127,w
  6424  1684  07D4               	addwf	___ftadd@exp2,f
  6425  1685                     l4707:
  6426  1685  0855               	movf	___ftadd@exp1,w
  6427  1686  0654               	xorwf	___ftadd@exp2,w
  6428  1687  1D03               	skipz
  6429  1688  2E79               	goto	l4703
  6430  1689                     l871:
  6431  1689  1FD3               	btfss	___ftadd@sign,7
  6432  168A  2E9B               	goto	l4711
  6433  168B  30FF               	movlw	255
  6434  168C  06CA               	xorwf	___ftadd@f1,f
  6435  168D  30FF               	movlw	255
  6436  168E  06CB               	xorwf	___ftadd@f1+1,f
  6437  168F  30FF               	movlw	255
  6438  1690  06CC               	xorwf	___ftadd@f1+2,f
  6439  1691  3001               	movlw	1
  6440  1692  07CA               	addwf	___ftadd@f1,f
  6441  1693  3000               	movlw	0
  6442  1694  1803               	skipnc
  6443  1695  3001               	movlw	1
  6444  1696  07CB               	addwf	___ftadd@f1+1,f
  6445  1697  3000               	movlw	0
  6446  1698  1803               	skipnc
  6447  1699  3001               	movlw	1
  6448  169A  07CC               	addwf	___ftadd@f1+2,f
  6449  169B                     l4711:
  6450  169B  1F53               	btfss	___ftadd@sign,6
  6451  169C  2EAD               	goto	l4715
  6452  169D  30FF               	movlw	255
  6453  169E  06CD               	xorwf	___ftadd@f2,f
  6454  169F  30FF               	movlw	255
  6455  16A0  06CE               	xorwf	___ftadd@f2+1,f
  6456  16A1  30FF               	movlw	255
  6457  16A2  06CF               	xorwf	___ftadd@f2+2,f
  6458  16A3  3001               	movlw	1
  6459  16A4  07CD               	addwf	___ftadd@f2,f
  6460  16A5  3000               	movlw	0
  6461  16A6  1803               	skipnc
  6462  16A7  3001               	movlw	1
  6463  16A8  07CE               	addwf	___ftadd@f2+1,f
  6464  16A9  3000               	movlw	0
  6465  16AA  1803               	skipnc
  6466  16AB  3001               	movlw	1
  6467  16AC  07CF               	addwf	___ftadd@f2+2,f
  6468  16AD                     l4715:
  6469  16AD  01D3               	clrf	___ftadd@sign
  6470  16AE  084A               	movf	___ftadd@f1,w
  6471  16AF  07CD               	addwf	___ftadd@f2,f
  6472  16B0  084B               	movf	___ftadd@f1+1,w
  6473  16B1  1103               	clrz
  6474  16B2  1803               	skipnc
  6475  16B3  0A4B               	incf	___ftadd@f1+1,w
  6476  16B4  1D03               	btfss	3,2
  6477  16B5  07CE               	addwf	___ftadd@f2+1,f
  6478  16B6  084C               	movf	___ftadd@f1+2,w
  6479  16B7  1103               	clrz
  6480  16B8  1803               	skipnc
  6481  16B9  0A4C               	incf	___ftadd@f1+2,w
  6482  16BA  1D03               	btfss	3,2
  6483  16BB  07CF               	addwf	___ftadd@f2+2,f
  6484  16BC  1FCF               	btfss	___ftadd@f2+2,7
  6485  16BD  2ED0               	goto	l4725
  6486  16BE  30FF               	movlw	255
  6487  16BF  06CD               	xorwf	___ftadd@f2,f
  6488  16C0  30FF               	movlw	255
  6489  16C1  06CE               	xorwf	___ftadd@f2+1,f
  6490  16C2  30FF               	movlw	255
  6491  16C3  06CF               	xorwf	___ftadd@f2+2,f
  6492  16C4  3001               	movlw	1
  6493  16C5  07CD               	addwf	___ftadd@f2,f
  6494  16C6  3000               	movlw	0
  6495  16C7  1803               	skipnc
  6496  16C8  3001               	movlw	1
  6497  16C9  07CE               	addwf	___ftadd@f2+1,f
  6498  16CA  3000               	movlw	0
  6499  16CB  1803               	skipnc
  6500  16CC  3001               	movlw	1
  6501  16CD  07CF               	addwf	___ftadd@f2+2,f
  6502  16CE  01D3               	clrf	___ftadd@sign
  6503  16CF  0AD3               	incf	___ftadd@sign,f
  6504  16D0                     l4725:
  6505  16D0  084D               	movf	___ftadd@f2,w
  6506  16D1  00F2               	movwf	___ftpack@arg
  6507  16D2  084E               	movf	___ftadd@f2+1,w
  6508  16D3  00F3               	movwf	___ftpack@arg+1
  6509  16D4  084F               	movf	___ftadd@f2+2,w
  6510  16D5  00F4               	movwf	___ftpack@arg+2
  6511  16D6  0855               	movf	___ftadd@exp1,w
  6512  16D7  00FF               	movwf	127
  6513  16D8  087F               	movf	127,w
  6514  16D9  00F5               	movwf	___ftpack@exp
  6515  16DA  0853               	movf	___ftadd@sign,w
  6516  16DB  00FF               	movwf	127
  6517  16DC  087F               	movf	127,w
  6518  16DD  00F6               	movwf	___ftpack@sign
  6519  16DE  160A  118A  2188   	fcall	___ftpack
  6520  16E1  0872               	movf	?___ftpack,w
  6521  16E2  00CA               	movwf	?___ftadd
  6522  16E3  0873               	movf	?___ftpack+1,w
  6523  16E4  00CB               	movwf	?___ftadd+1
  6524  16E5  0874               	movf	?___ftpack+2,w
  6525  16E6  00CC               	movwf	?___ftadd+2
  6526  16E7  0008               	return
  6527  16E8                     __end_of___ftadd:
  6528                           
  6529                           	psect	text19
  6530  1ABB                     __ptext19:	
  6531 ;; *************** function ___ftneg *****************
  6532 ;; Defined at:
  6533 ;;		line 15 in file "D:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\ftneg.c"
  6534 ;; Parameters:    Size  Location     Type
  6535 ;;  f1              3    2[COMMON] float 
  6536 ;; Auto vars:     Size  Location     Type
  6537 ;;		None
  6538 ;; Return value:  Size  Location     Type
  6539 ;;                  3    2[COMMON] float 
  6540 ;; Registers used:
  6541 ;;		wreg
  6542 ;; Tracked objects:
  6543 ;;		On entry : 300/100
  6544 ;;		On exit  : 300/100
  6545 ;;		Unchanged: 300/0
  6546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6547 ;;      Params:         3       0       0       0       0
  6548 ;;      Locals:         0       0       0       0       0
  6549 ;;      Temps:          0       0       0       0       0
  6550 ;;      Totals:         3       0       0       0       0
  6551 ;;Total ram usage:        3 bytes
  6552 ;; Hardware stack levels used:    1
  6553 ;; Hardware stack levels required when called:    1
  6554 ;; This function calls:
  6555 ;;		Nothing
  6556 ;; This function is called by:
  6557 ;;		_sprintf
  6558 ;; This function uses a non-reentrant model
  6559 ;;
  6560                           
  6561                           
  6562                           ;psect for function ___ftneg
  6563  1ABB                     ___ftneg:
  6564                           
  6565                           ;incstack = 0
  6566                           ; Regs used in ___ftneg: [wreg]
  6567  1ABB  0874               	movf	___ftneg@f1+2,w
  6568  1ABC  0473               	iorwf	___ftneg@f1+1,w
  6569  1ABD  0472               	iorwf	___ftneg@f1,w
  6570  1ABE  1903               	skipnz
  6571  1ABF  0008               	return
  6572  1AC0  3080               	movlw	128
  6573  1AC1  06F4               	xorwf	___ftneg@f1+2,f
  6574  1AC2  0008               	return
  6575  1AC3                     __end_of___ftneg:
  6576                           
  6577                           	psect	text20
  6578  1C66                     __ptext20:	
  6579 ;; *************** function ___ftge *****************
  6580 ;; Defined at:
  6581 ;;		line 4 in file "D:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\ftge.c"
  6582 ;; Parameters:    Size  Location     Type
  6583 ;;  ff1             3    2[COMMON] float 
  6584 ;;  ff2             3    5[COMMON] float 
  6585 ;; Auto vars:     Size  Location     Type
  6586 ;;		None
  6587 ;; Return value:  Size  Location     Type
  6588 ;;		None               void
  6589 ;; Registers used:
  6590 ;;		wreg, status,2, status,0
  6591 ;; Tracked objects:
  6592 ;;		On entry : 300/100
  6593 ;;		On exit  : 300/100
  6594 ;;		Unchanged: 300/0
  6595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6596 ;;      Params:         6       0       0       0       0
  6597 ;;      Locals:         0       0       0       0       0
  6598 ;;      Temps:          0       0       0       0       0
  6599 ;;      Totals:         6       0       0       0       0
  6600 ;;Total ram usage:        6 bytes
  6601 ;; Hardware stack levels used:    1
  6602 ;; Hardware stack levels required when called:    1
  6603 ;; This function calls:
  6604 ;;		Nothing
  6605 ;; This function is called by:
  6606 ;;		_sprintf
  6607 ;; This function uses a non-reentrant model
  6608 ;;
  6609                           
  6610                           
  6611                           ;psect for function ___ftge
  6612  1C66                     ___ftge:
  6613                           
  6614                           ;incstack = 0
  6615                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  6616  1C66  1FF4               	btfss	___ftge@ff1+2,7
  6617  1C67  2C75               	goto	l3747
  6618  1C68  0872               	movf	___ftge@ff1,w
  6619  1C69  3C00               	sublw	0
  6620  1C6A  00F2               	movwf	___ftge@ff1
  6621  1C6B  0873               	movf	___ftge@ff1+1,w
  6622  1C6C  1C03               	skipc
  6623  1C6D  0F73               	incfsz	___ftge@ff1+1,w
  6624  1C6E  3C00               	sublw	0
  6625  1C6F  00F3               	movwf	___ftge@ff1+1
  6626  1C70  0874               	movf	___ftge@ff1+2,w
  6627  1C71  1C03               	skipc
  6628  1C72  0F74               	incfsz	___ftge@ff1+2,w
  6629  1C73  3C80               	sublw	128
  6630  1C74  00F4               	movwf	___ftge@ff1+2
  6631  1C75                     l3747:
  6632  1C75  1FF7               	btfss	___ftge@ff2+2,7
  6633  1C76  2C84               	goto	l3751
  6634  1C77  0875               	movf	___ftge@ff2,w
  6635  1C78  3C00               	sublw	0
  6636  1C79  00F5               	movwf	___ftge@ff2
  6637  1C7A  0876               	movf	___ftge@ff2+1,w
  6638  1C7B  1C03               	skipc
  6639  1C7C  0F76               	incfsz	___ftge@ff2+1,w
  6640  1C7D  3C00               	sublw	0
  6641  1C7E  00F6               	movwf	___ftge@ff2+1
  6642  1C7F  0877               	movf	___ftge@ff2+2,w
  6643  1C80  1C03               	skipc
  6644  1C81  0F77               	incfsz	___ftge@ff2+2,w
  6645  1C82  3C80               	sublw	128
  6646  1C83  00F7               	movwf	___ftge@ff2+2
  6647  1C84                     l3751:
  6648  1C84  3080               	movlw	128
  6649  1C85  06F4               	xorwf	___ftge@ff1+2,f
  6650  1C86  3080               	movlw	128
  6651  1C87  06F7               	xorwf	___ftge@ff2+2,f
  6652  1C88  0877               	movf	___ftge@ff2+2,w
  6653  1C89  0274               	subwf	___ftge@ff1+2,w
  6654  1C8A  1D03               	skipz
  6655  1C8B  0008               	return
  6656  1C8C  0876               	movf	___ftge@ff2+1,w
  6657  1C8D  0273               	subwf	___ftge@ff1+1,w
  6658  1C8E  1D03               	skipz
  6659  1C8F  0008               	return
  6660  1C90  0875               	movf	___ftge@ff2,w
  6661  1C91  0272               	subwf	___ftge@ff1,w
  6662  1C92  0008               	return
  6663  1C93                     __end_of___ftge:
  6664                           
  6665                           	psect	text21
  6666  1AA8                     __ptext21:	
  6667 ;; *************** function _ngat_init *****************
  6668 ;; Defined at:
  6669 ;;		line 68 in file "main.c"
  6670 ;; Parameters:    Size  Location     Type
  6671 ;;		None
  6672 ;; Auto vars:     Size  Location     Type
  6673 ;;		None
  6674 ;; Return value:  Size  Location     Type
  6675 ;;                  1    wreg      void 
  6676 ;; Registers used:
  6677 ;;		status,2
  6678 ;; Tracked objects:
  6679 ;;		On entry : 300/100
  6680 ;;		On exit  : 300/100
  6681 ;;		Unchanged: 0/0
  6682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6683 ;;      Params:         0       0       0       0       0
  6684 ;;      Locals:         0       0       0       0       0
  6685 ;;      Temps:          0       0       0       0       0
  6686 ;;      Totals:         0       0       0       0       0
  6687 ;;Total ram usage:        0 bytes
  6688 ;; Hardware stack levels used:    1
  6689 ;; Hardware stack levels required when called:    1
  6690 ;; This function calls:
  6691 ;;		Nothing
  6692 ;; This function is called by:
  6693 ;;		_main
  6694 ;; This function uses a non-reentrant model
  6695 ;;
  6696                           
  6697                           
  6698                           ;psect for function _ngat_init
  6699  1AA8                     _ngat_init:
  6700                           
  6701                           ;main.c: 70: OPTION_REG = 0b00000000;
  6702                           
  6703                           ;incstack = 0
  6704                           ; Regs used in _ngat_init: [status,2]
  6705  1AA8  0181               	clrf	1	;volatile
  6706                           
  6707                           ;main.c: 71: GIE=1;
  6708  1AA9  178B               	bsf	11,7	;volatile
  6709                           
  6710                           ;main.c: 72: PEIE=1;
  6711  1AAA  170B               	bsf	11,6	;volatile
  6712                           
  6713                           ;main.c: 73: INTE = 1;
  6714  1AAB  160B               	bsf	11,4	;volatile
  6715                           
  6716                           ;main.c: 74: INTEDG = 0;
  6717  1AAC  1301               	bcf	1,6	;volatile
  6718  1AAD  0008               	return
  6719  1AAE                     __end_of_ngat_init:
  6720                           
  6721                           	psect	text22
  6722  1B0D                     __ptext22:	
  6723 ;; *************** function _UART_init *****************
  6724 ;; Defined at:
  6725 ;;		line 2 in file "uart.h"
  6726 ;; Parameters:    Size  Location     Type
  6727 ;;		None
  6728 ;; Auto vars:     Size  Location     Type
  6729 ;;		None
  6730 ;; Return value:  Size  Location     Type
  6731 ;;                  1    wreg      void 
  6732 ;; Registers used:
  6733 ;;		wreg
  6734 ;; Tracked objects:
  6735 ;;		On entry : 300/0
  6736 ;;		On exit  : 300/0
  6737 ;;		Unchanged: 0/0
  6738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6739 ;;      Params:         0       0       0       0       0
  6740 ;;      Locals:         0       0       0       0       0
  6741 ;;      Temps:          0       0       0       0       0
  6742 ;;      Totals:         0       0       0       0       0
  6743 ;;Total ram usage:        0 bytes
  6744 ;; Hardware stack levels used:    1
  6745 ;; Hardware stack levels required when called:    1
  6746 ;; This function calls:
  6747 ;;		Nothing
  6748 ;; This function is called by:
  6749 ;;		_main
  6750 ;; This function uses a non-reentrant model
  6751 ;;
  6752                           
  6753                           
  6754                           ;psect for function _UART_init
  6755  1B0D                     _UART_init:
  6756                           
  6757                           ;uart.h: 5: TRISC6 = 0;
  6758                           
  6759                           ;incstack = 0
  6760                           ; Regs used in _UART_init: [wreg]
  6761  1B0D  1683               	bsf	3,5	;RP0=1, select bank1
  6762  1B0E  1307               	bcf	7,6	;volatile
  6763                           
  6764                           ;uart.h: 6: TRISC7 = 1;
  6765  1B0F  1787               	bsf	7,7	;volatile
  6766                           
  6767                           ;uart.h: 10: SPBRG = ((20000000/16)/9600) - 1;
  6768  1B10  3081               	movlw	129
  6769  1B11  0099               	movwf	25	;volatile
  6770                           
  6771                           ;uart.h: 11: BRGH = 1;
  6772  1B12  1518               	bsf	24,2	;volatile
  6773                           
  6774                           ;uart.h: 14: SYNC = 0;
  6775  1B13  1218               	bcf	24,4	;volatile
  6776                           
  6777                           ;uart.h: 15: SPEN = 1;
  6778  1B14  1283               	bcf	3,5	;RP0=0, select bank0
  6779  1B15  1798               	bsf	24,7	;volatile
  6780                           
  6781                           ;uart.h: 18: TXEN = 1;
  6782  1B16  1683               	bsf	3,5	;RP0=1, select bank1
  6783  1B17  1698               	bsf	24,5	;volatile
  6784                           
  6785                           ;uart.h: 19: CREN = 1;
  6786  1B18  1283               	bcf	3,5	;RP0=0, select bank0
  6787  1B19  1618               	bsf	24,4	;volatile
  6788                           
  6789                           ;uart.h: 22: TX9 = 0;
  6790  1B1A  1683               	bsf	3,5	;RP0=1, select bank1
  6791  1B1B  1318               	bcf	24,6	;volatile
  6792                           
  6793                           ;uart.h: 23: RX9 = 0;
  6794  1B1C  1283               	bcf	3,5	;RP0=0, select bank0
  6795  1B1D  1318               	bcf	24,6	;volatile
  6796  1B1E  0008               	return
  6797  1B1F                     __end_of_UART_init:
  6798                           
  6799                           	psect	text23
  6800  126F                     __ptext23:	
  6801 ;; *************** function _SwitchMode *****************
  6802 ;; Defined at:
  6803 ;;		line 239 in file "main.c"
  6804 ;; Parameters:    Size  Location     Type
  6805 ;;		None
  6806 ;; Auto vars:     Size  Location     Type
  6807 ;;		None
  6808 ;; Return value:  Size  Location     Type
  6809 ;;                  1    wreg      void 
  6810 ;; Registers used:
  6811 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6812 ;; Tracked objects:
  6813 ;;		On entry : 300/0
  6814 ;;		On exit  : 0/0
  6815 ;;		Unchanged: 0/0
  6816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6817 ;;      Params:         0       0       0       0       0
  6818 ;;      Locals:         0       0       0       0       0
  6819 ;;      Temps:          0       0       0       0       0
  6820 ;;      Totals:         0       0       0       0       0
  6821 ;;Total ram usage:        0 bytes
  6822 ;; Hardware stack levels used:    1
  6823 ;; Hardware stack levels required when called:    5
  6824 ;; This function calls:
  6825 ;;		_Lcd_Clear
  6826 ;;		_Lcd_Set_Cursor
  6827 ;;		_Lcd_Write_String
  6828 ;;		_Speed
  6829 ;;		_UART_send_string
  6830 ;;		_switch_press_scan
  6831 ;; This function is called by:
  6832 ;;		_main
  6833 ;; This function uses a non-reentrant model
  6834 ;;
  6835                           
  6836                           
  6837                           ;psect for function _SwitchMode
  6838  126F                     _SwitchMode:
  6839                           
  6840                           ;main.c: 240: k = switch_press_scan();
  6841                           
  6842                           ;incstack = 0
  6843                           ; Regs used in _SwitchMode: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6844  126F  160A  158A  22DC  160A  118A  	fcall	_switch_press_scan
  6845  1274  00FF               	movwf	127
  6846  1275  087F               	movf	127,w
  6847  1276  00FB               	movwf	_k
  6848                           
  6849                           ;main.c: 241: if(k == 'A')
  6850  1277  3041               	movlw	65
  6851  1278  067B               	xorwf	_k,w
  6852  1279  1D03               	btfss	3,2
  6853  127A  2AA5               	goto	l5037
  6854                           
  6855                           ;main.c: 242: {;main.c: 243: RC0 = 0;
  6856  127B  1007               	bcf	7,0	;volatile
  6857                           
  6858                           ;main.c: 244: RC4 = 1;
  6859  127C  1607               	bsf	7,4	;volatile
  6860                           
  6861                           ;main.c: 245: UART_send_string(" -Clockwise ");
  6862  127D  302E               	movlw	low (STR_5| (0+32768))
  6863  127E  00F3               	movwf	UART_send_string@st_pt
  6864  127F  3091               	movlw	high (STR_5| (0+32768))
  6865  1280  00F4               	movwf	UART_send_string@st_pt+1
  6866  1281  160A  158A  23A5  160A  118A  	fcall	_UART_send_string
  6867                           
  6868                           ;main.c: 246: Lcd_Clear();
  6869  1286  160A  158A  22C3  160A  118A  	fcall	_Lcd_Clear
  6870                           
  6871                           ;main.c: 247: Lcd_Write_String(" Quay thuan");
  6872  128B  3054               	movlw	low (STR_6| (0+32768))
  6873  128C  00F7               	movwf	Lcd_Write_String@a
  6874  128D  3091               	movlw	high (STR_6| (0+32768))
  6875  128E  00F8               	movwf	Lcd_Write_String@a+1
  6876  128F  160A  158A  24F7  160A  118A  	fcall	_Lcd_Write_String
  6877                           
  6878                           ;main.c: 248: Lcd_Set_Cursor(2,1);
  6879  1294  01F6               	clrf	Lcd_Set_Cursor@b
  6880  1295  0AF6               	incf	Lcd_Set_Cursor@b,f
  6881  1296  3002               	movlw	2
  6882  1297  160A  158A  25B6  160A  118A  	fcall	_Lcd_Set_Cursor
  6883                           
  6884                           ;main.c: 249: Lcd_Write_String(str);
  6885  129C  30A5               	movlw	(low (_str| 0))& (0+255)
  6886  129D  00F7               	movwf	Lcd_Write_String@a
  6887  129E  3000               	movlw	0
  6888  129F  00F8               	movwf	Lcd_Write_String@a+1
  6889  12A0  160A  158A  24F7  160A  118A  	fcall	_Lcd_Write_String
  6890  12A5                     l5037:
  6891                           
  6892                           ;main.c: 250: };main.c: 251: if(k == 'B')
  6893  12A5  3042               	movlw	66
  6894  12A6  067B               	xorwf	_k,w
  6895  12A7  1D03               	btfss	3,2
  6896  12A8  2AD3               	goto	l5051
  6897                           
  6898                           ;main.c: 252: {;main.c: 253: RC0 = 1;
  6899  12A9  1407               	bsf	7,0	;volatile
  6900                           
  6901                           ;main.c: 254: RC4 = 0;
  6902  12AA  1207               	bcf	7,4	;volatile
  6903                           
  6904                           ;main.c: 255: UART_send_string(" -Anti-clockwise ");
  6905  12AB  30E1               	movlw	low (STR_7| (0+32768))
  6906  12AC  00F3               	movwf	UART_send_string@st_pt
  6907  12AD  3090               	movlw	high (STR_7| (0+32768))
  6908  12AE  00F4               	movwf	UART_send_string@st_pt+1
  6909  12AF  160A  158A  23A5  160A  118A  	fcall	_UART_send_string
  6910                           
  6911                           ;main.c: 256: Lcd_Clear();
  6912  12B4  160A  158A  22C3  160A  118A  	fcall	_Lcd_Clear
  6913                           
  6914                           ;main.c: 257: Lcd_Write_String(" Quay nguoc");
  6915  12B9  3048               	movlw	low (STR_8| (0+32768))
  6916  12BA  00F7               	movwf	Lcd_Write_String@a
  6917  12BB  3091               	movlw	high (STR_8| (0+32768))
  6918  12BC  00F8               	movwf	Lcd_Write_String@a+1
  6919  12BD  160A  158A  24F7  160A  118A  	fcall	_Lcd_Write_String
  6920                           
  6921                           ;main.c: 258: Lcd_Set_Cursor(2,1);
  6922  12C2  01F6               	clrf	Lcd_Set_Cursor@b
  6923  12C3  0AF6               	incf	Lcd_Set_Cursor@b,f
  6924  12C4  3002               	movlw	2
  6925  12C5  160A  158A  25B6  160A  118A  	fcall	_Lcd_Set_Cursor
  6926                           
  6927                           ;main.c: 259: Lcd_Write_String(str);
  6928  12CA  30A5               	movlw	(low (_str| 0))& (0+255)
  6929  12CB  00F7               	movwf	Lcd_Write_String@a
  6930  12CC  3000               	movlw	0
  6931  12CD  00F8               	movwf	Lcd_Write_String@a+1
  6932  12CE  160A  158A  24F7  160A  118A  	fcall	_Lcd_Write_String
  6933  12D3                     l5051:
  6934                           
  6935                           ;main.c: 260: };main.c: 261: if(k == 'C')
  6936  12D3  3043               	movlw	67
  6937  12D4  067B               	xorwf	_k,w
  6938  12D5  1D03               	btfss	3,2
  6939  12D6  2AE1               	goto	l5057
  6940                           
  6941                           ;main.c: 262: {;main.c: 263: Lcd_Clear();
  6942  12D7  160A  158A  22C3  160A  118A  	fcall	_Lcd_Clear
  6943                           
  6944                           ;main.c: 264: Speed();
  6945  12DC  160A  118A  22EC  160A  118A  	fcall	_Speed
  6946  12E1                     l5057:
  6947                           
  6948                           ;main.c: 265: };main.c: 266: if(k == 'D')
  6949  12E1  3044               	movlw	68
  6950  12E2  067B               	xorwf	_k,w
  6951  12E3  1D03               	btfss	3,2
  6952  12E4  0008               	return
  6953                           
  6954                           ;main.c: 267: {;main.c: 268: input = 0;
  6955  12E5  1283               	bcf	3,5	;RP0=0, select bank0
  6956  12E6  1303               	bcf	3,6	;RP1=0, select bank0
  6957  12E7  01EA               	clrf	_input
  6958  12E8  01EB               	clrf	_input+1
  6959                           
  6960                           ;main.c: 269: RC0 = 0;
  6961  12E9  1007               	bcf	7,0	;volatile
  6962                           
  6963                           ;main.c: 270: RC4 = 0;
  6964  12EA  1207               	bcf	7,4	;volatile
  6965  12EB  0008               	return
  6966  12EC                     __end_of_SwitchMode:
  6967                           
  6968                           	psect	text24
  6969  1BA5                     __ptext24:	
  6970 ;; *************** function _UART_send_string *****************
  6971 ;; Defined at:
  6972 ;;		line 34 in file "uart.h"
  6973 ;; Parameters:    Size  Location     Type
  6974 ;;  st_pt           2    3[COMMON] PTR unsigned char 
  6975 ;;		 -> STR_12(68), STR_10(68), STR_7(18), str(20), 
  6976 ;;		 -> STR_5(13), 
  6977 ;; Auto vars:     Size  Location     Type
  6978 ;;		None
  6979 ;; Return value:  Size  Location     Type
  6980 ;;                  1    wreg      void 
  6981 ;; Registers used:
  6982 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6983 ;; Tracked objects:
  6984 ;;		On entry : 300/0
  6985 ;;		On exit  : 300/0
  6986 ;;		Unchanged: 0/0
  6987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6988 ;;      Params:         2       0       0       0       0
  6989 ;;      Locals:         0       0       0       0       0
  6990 ;;      Temps:          0       0       0       0       0
  6991 ;;      Totals:         2       0       0       0       0
  6992 ;;Total ram usage:        2 bytes
  6993 ;; Hardware stack levels used:    1
  6994 ;; Hardware stack levels required when called:    2
  6995 ;; This function calls:
  6996 ;;		_UART_send_char
  6997 ;; This function is called by:
  6998 ;;		_SwitchMode
  6999 ;;		_main
  7000 ;; This function uses a non-reentrant model
  7001 ;;
  7002                           
  7003                           
  7004                           ;psect for function _UART_send_string
  7005  1BA5                     _UART_send_string:
  7006  1BA5                     l3447:	
  7007                           ;uart.h: 36: while(*st_pt)
  7008                           
  7009                           ;incstack = 0
  7010                           ; Regs used in _UART_send_string: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7011                           
  7012  1BA5  0874               	movf	UART_send_string@st_pt+1,w
  7013  1BA6  00FF               	movwf	127
  7014  1BA7  0873               	movf	UART_send_string@st_pt,w
  7015  1BA8  0084               	movwf	4
  7016  1BA9  160A  118A  2000  160A  158A  	fcall	stringtab
  7017  1BAE  3A00               	xorlw	0
  7018  1BAF  1903               	btfsc	3,2
  7019  1BB0  0008               	return
  7020                           
  7021                           ;uart.h: 37: UART_send_char(*st_pt++);
  7022  1BB1  0874               	movf	UART_send_string@st_pt+1,w
  7023  1BB2  00FF               	movwf	127
  7024  1BB3  0873               	movf	UART_send_string@st_pt,w
  7025  1BB4  0084               	movwf	4
  7026  1BB5  160A  118A  2000  160A  158A  	fcall	stringtab
  7027  1BBA  160A  158A  22A2  160A  158A  	fcall	_UART_send_char
  7028  1BBF  3001               	movlw	1
  7029  1BC0  07F3               	addwf	UART_send_string@st_pt,f
  7030  1BC1  1803               	skipnc
  7031  1BC2  0AF4               	incf	UART_send_string@st_pt+1,f
  7032  1BC3  3000               	movlw	0
  7033  1BC4  07F4               	addwf	UART_send_string@st_pt+1,f
  7034  1BC5  2BA5               	goto	l3447
  7035  1BC6                     __end_of_UART_send_string:
  7036                           
  7037                           	psect	text25
  7038  12EC                     __ptext25:	
  7039 ;; *************** function _Speed *****************
  7040 ;; Defined at:
  7041 ;;		line 215 in file "main.c"
  7042 ;; Parameters:    Size  Location     Type
  7043 ;;		None
  7044 ;; Auto vars:     Size  Location     Type
  7045 ;;		None
  7046 ;; Return value:  Size  Location     Type
  7047 ;;                  1    wreg      void 
  7048 ;; Registers used:
  7049 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7050 ;; Tracked objects:
  7051 ;;		On entry : 300/0
  7052 ;;		On exit  : 0/0
  7053 ;;		Unchanged: 0/0
  7054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7055 ;;      Params:         0       0       0       0       0
  7056 ;;      Locals:         0       0       0       0       0
  7057 ;;      Temps:          0       3       0       0       0
  7058 ;;      Totals:         0       3       0       0       0
  7059 ;;Total ram usage:        3 bytes
  7060 ;; Hardware stack levels used:    1
  7061 ;; Hardware stack levels required when called:    4
  7062 ;; This function calls:
  7063 ;;		_Lcd_Clear
  7064 ;;		_Lcd_Set_Cursor
  7065 ;;		_Lcd_Write_String
  7066 ;;		_inputValue
  7067 ;; This function is called by:
  7068 ;;		_SwitchMode
  7069 ;;		_main
  7070 ;; This function uses a non-reentrant model
  7071 ;;
  7072                           
  7073                           
  7074                           ;psect for function _Speed
  7075  12EC                     _Speed:
  7076                           
  7077                           ;main.c: 217: Lcd_Set_Cursor(1,1);
  7078                           
  7079                           ;incstack = 0
  7080                           ; Regs used in _Speed: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7081  12EC  01F6               	clrf	Lcd_Set_Cursor@b
  7082  12ED  0AF6               	incf	Lcd_Set_Cursor@b,f
  7083  12EE  3001               	movlw	1
  7084  12EF  160A  158A  25B6  160A  118A  	fcall	_Lcd_Set_Cursor
  7085                           
  7086                           ;main.c: 218: Lcd_Write_String("Enter value from");
  7087  12F4  30F3               	movlw	low (STR_1| (0+32768))
  7088  12F5  00F7               	movwf	Lcd_Write_String@a
  7089  12F6  3090               	movlw	high (STR_1| (0+32768))
  7090  12F7  00F8               	movwf	Lcd_Write_String@a+1
  7091  12F8  160A  158A  24F7  160A  118A  	fcall	_Lcd_Write_String
  7092                           
  7093                           ;main.c: 219: Lcd_Set_Cursor(2,1);
  7094  12FD  01F6               	clrf	Lcd_Set_Cursor@b
  7095  12FE  0AF6               	incf	Lcd_Set_Cursor@b,f
  7096  12FF  3002               	movlw	2
  7097  1300  160A  158A  25B6  160A  118A  	fcall	_Lcd_Set_Cursor
  7098                           
  7099                           ;main.c: 220: Lcd_Write_String("0-100: ");
  7100  1305  3060               	movlw	low (STR_2| (0+32768))
  7101  1306  00F7               	movwf	Lcd_Write_String@a
  7102  1307  3091               	movlw	high (STR_2| (0+32768))
  7103  1308  00F8               	movwf	Lcd_Write_String@a+1
  7104  1309  160A  158A  24F7  160A  118A  	fcall	_Lcd_Write_String
  7105                           
  7106                           ;main.c: 222: input = inputValue();
  7107  130E  120A  158A  23A6  160A  118A  	fcall	_inputValue
  7108  1313  0839               	movf	?_inputValue+1,w
  7109  1314  00EB               	movwf	_input+1
  7110  1315  0838               	movf	?_inputValue,w
  7111  1316  00EA               	movwf	_input
  7112                           
  7113                           ;main.c: 223: if(input <= 100)
  7114  1317  086B               	movf	_input+1,w
  7115  1318  3A80               	xorlw	128
  7116  1319  00FF               	movwf	127
  7117  131A  3080               	movlw	128
  7118  131B  027F               	subwf	127,w
  7119  131C  1D03               	skipz
  7120  131D  2B20               	goto	u6835
  7121  131E  3065               	movlw	101
  7122  131F  026A               	subwf	_input,w
  7123  1320                     u6835:
  7124  1320  1803               	skipnc
  7125  1321  2B4A               	goto	l4829
  7126                           
  7127                           ;main.c: 224: {;main.c: 225: Lcd_Clear();
  7128  1322  160A  158A  22C3  160A  118A  	fcall	_Lcd_Clear
  7129                           
  7130                           ;main.c: 226: Lcd_Set_Cursor(1,1);
  7131  1327  01F6               	clrf	Lcd_Set_Cursor@b
  7132  1328  0AF6               	incf	Lcd_Set_Cursor@b,f
  7133  1329  3001               	movlw	1
  7134  132A  160A  158A  25B6  160A  118A  	fcall	_Lcd_Set_Cursor
  7135                           
  7136                           ;main.c: 227: Lcd_Write_String("Speed updated");
  7137  132F  3004               	movlw	low (STR_3| (0+32768))
  7138  1330  00F7               	movwf	Lcd_Write_String@a
  7139  1331  3091               	movlw	high (STR_3| (0+32768))
  7140  1332  00F8               	movwf	Lcd_Write_String@a+1
  7141  1333  160A  158A  24F7  160A  118A  	fcall	_Lcd_Write_String
  7142                           
  7143                           ;main.c: 228: _delay((unsigned long)((50)*(20000000/4000.0)));
  7144  1338  3002               	movlw	2
  7145  1339  1283               	bcf	3,5	;RP0=0, select bank0
  7146  133A  1303               	bcf	3,6	;RP1=0, select bank0
  7147  133B  00DA               	movwf	??_Speed+2
  7148  133C  3045               	movlw	69
  7149  133D  00D9               	movwf	??_Speed+1
  7150  133E  30A9               	movlw	169
  7151  133F  00D8               	movwf	??_Speed
  7152  1340                     u7697:
  7153  1340  0BD8               	decfsz	??_Speed,f
  7154  1341  2B40               	goto	u7697
  7155  1342  0BD9               	decfsz	??_Speed+1,f
  7156  1343  2B40               	goto	u7697
  7157  1344  0BDA               	decfsz	??_Speed+2,f
  7158  1345  2B40               	goto	u7697
  7159                           
  7160                           ;main.c: 229: Lcd_Clear();
  7161  1346  160A  158A  22C3   	fcall	_Lcd_Clear
  7162                           
  7163                           ;main.c: 230: }
  7164  1349  0008               	return
  7165  134A                     l4829:
  7166                           
  7167                           ;main.c: 231: else;main.c: 232: {;main.c: 233: Lcd_Clear();
  7168  134A  160A  158A  22C3  160A  118A  	fcall	_Lcd_Clear
  7169                           
  7170                           ;main.c: 234: Lcd_Set_Cursor(1,1);
  7171  134F  01F6               	clrf	Lcd_Set_Cursor@b
  7172  1350  0AF6               	incf	Lcd_Set_Cursor@b,f
  7173  1351  3001               	movlw	1
  7174  1352  160A  158A  25B6  160A  118A  	fcall	_Lcd_Set_Cursor
  7175                           
  7176                           ;main.c: 235: Lcd_Write_String("Invalid value");
  7177  1357  3012               	movlw	low (STR_4| (0+32768))
  7178  1358  00F7               	movwf	Lcd_Write_String@a
  7179  1359  3091               	movlw	high (STR_4| (0+32768))
  7180  135A  00F8               	movwf	Lcd_Write_String@a+1
  7181  135B  160A  158A  24F7  160A  118A  	fcall	_Lcd_Write_String
  7182                           
  7183                           ;main.c: 236: _delay((unsigned long)((50)*(20000000/4000.0)));
  7184  1360  3002               	movlw	2
  7185  1361  1283               	bcf	3,5	;RP0=0, select bank0
  7186  1362  1303               	bcf	3,6	;RP1=0, select bank0
  7187  1363  00DA               	movwf	??_Speed+2
  7188  1364  3045               	movlw	69
  7189  1365  00D9               	movwf	??_Speed+1
  7190  1366  30A9               	movlw	169
  7191  1367  00D8               	movwf	??_Speed
  7192  1368                     u7707:
  7193  1368  0BD8               	decfsz	??_Speed,f
  7194  1369  2B68               	goto	u7707
  7195  136A  0BD9               	decfsz	??_Speed+1,f
  7196  136B  2B68               	goto	u7707
  7197  136C  0BDA               	decfsz	??_Speed+2,f
  7198  136D  2B68               	goto	u7707
  7199  136E  0008               	return
  7200  136F                     __end_of_Speed:
  7201                           
  7202                           	psect	text26
  7203  0BA6                     __ptext26:	
  7204 ;; *************** function _inputValue *****************
  7205 ;; Defined at:
  7206 ;;		line 131 in file "main.c"
  7207 ;; Parameters:    Size  Location     Type
  7208 ;;		None
  7209 ;; Auto vars:     Size  Location     Type
  7210 ;;  i               2   51[BANK0 ] int 
  7211 ;;  arr            20   29[BANK0 ] int [10]
  7212 ;;  dem             2   53[BANK0 ] int 
  7213 ;;  inputInt        2   49[BANK0 ] int 
  7214 ;;  k               1   55[BANK0 ] unsigned char 
  7215 ;; Return value:  Size  Location     Type
  7216 ;;                  2   24[BANK0 ] int 
  7217 ;; Registers used:
  7218 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7219 ;; Tracked objects:
  7220 ;;		On entry : 300/0
  7221 ;;		On exit  : 300/0
  7222 ;;		Unchanged: 0/0
  7223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7224 ;;      Params:         0       2       0       0       0
  7225 ;;      Locals:         0      27       0       0       0
  7226 ;;      Temps:          0       3       0       0       0
  7227 ;;      Totals:         0      32       0       0       0
  7228 ;;Total ram usage:       32 bytes
  7229 ;; Hardware stack levels used:    1
  7230 ;; Hardware stack levels required when called:    3
  7231 ;; This function calls:
  7232 ;;		_Lcd_Write_Char
  7233 ;;		_UART_send_char
  7234 ;;		___wmul
  7235 ;;		_convert
  7236 ;;		_switch_press_scan
  7237 ;; This function is called by:
  7238 ;;		_Speed
  7239 ;; This function uses a non-reentrant model
  7240 ;;
  7241                           
  7242                           
  7243                           ;psect for function _inputValue
  7244  0BA6                     _inputValue:
  7245                           
  7246                           ;main.c: 133: unsigned char k;;main.c: 134: int arr[10];;main.c: 135: arr[0]=0;
  7247                           
  7248                           ;incstack = 0
  7249                           ; Regs used in _inputValue: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7250  0BA6  01BD               	clrf	inputValue@arr
  7251  0BA7  01BE               	clrf	inputValue@arr+1
  7252                           
  7253                           ;main.c: 136: int dem = 0;
  7254  0BA8  01D5               	clrf	inputValue@dem
  7255  0BA9  01D6               	clrf	inputValue@dem+1
  7256  0BAA                     l4475:
  7257                           
  7258                           ;main.c: 139: {;main.c: 140: k = switch_press_scan();
  7259  0BAA  160A  158A  22DC  120A  158A  	fcall	_switch_press_scan
  7260  0BAF  00FF               	movwf	127
  7261  0BB0  087F               	movf	127,w
  7262  0BB1  00D7               	movwf	inputValue@k
  7263                           
  7264                           ;main.c: 141: if(k == '0')
  7265  0BB2  3030               	movlw	48
  7266  0BB3  0657               	xorwf	inputValue@k,w
  7267  0BB4  1D03               	btfss	3,2
  7268  0BB5  2BD1               	goto	l4487
  7269                           
  7270                           ;main.c: 142: {;main.c: 143: Lcd_Write_Char(k);
  7271  0BB6  0857               	movf	inputValue@k,w
  7272  0BB7  160A  158A  24C4  120A  158A  	fcall	_Lcd_Write_Char
  7273                           
  7274                           ;main.c: 144: UART_send_char(k);
  7275  0BBC  0857               	movf	inputValue@k,w
  7276  0BBD  160A  158A  22A2  120A  158A  	fcall	_UART_send_char
  7277                           
  7278                           ;main.c: 145: arr[dem++] = 0;
  7279  0BC2  0855               	movf	inputValue@dem,w
  7280  0BC3  00BA               	movwf	??_inputValue
  7281  0BC4  073A               	addwf	??_inputValue,w
  7282  0BC5  3E3D               	addlw	(low (inputValue@arr| 0))& (0+255)
  7283  0BC6  0084               	movwf	4
  7284  0BC7  1383               	bcf	3,7	;select IRP bank0
  7285  0BC8  0180               	clrf	0
  7286  0BC9  0A84               	incf	4,f
  7287  0BCA  0180               	clrf	0
  7288  0BCB  3001               	movlw	1
  7289  0BCC  07D5               	addwf	inputValue@dem,f
  7290  0BCD  1803               	skipnc
  7291  0BCE  0AD6               	incf	inputValue@dem+1,f
  7292  0BCF  3000               	movlw	0
  7293  0BD0  07D6               	addwf	inputValue@dem+1,f
  7294  0BD1                     l4487:
  7295                           
  7296                           ;main.c: 146: };main.c: 147: if(k == '1')
  7297  0BD1  3031               	movlw	49
  7298  0BD2  0657               	xorwf	inputValue@k,w
  7299  0BD3  1D03               	btfss	3,2
  7300  0BD4  2BF2               	goto	l4497
  7301                           
  7302                           ;main.c: 148: {;main.c: 149: Lcd_Write_Char(k);
  7303  0BD5  0857               	movf	inputValue@k,w
  7304  0BD6  160A  158A  24C4  120A  158A  	fcall	_Lcd_Write_Char
  7305                           
  7306                           ;main.c: 150: UART_send_char(k);
  7307  0BDB  0857               	movf	inputValue@k,w
  7308  0BDC  160A  158A  22A2  120A  158A  	fcall	_UART_send_char
  7309                           
  7310                           ;main.c: 151: arr[dem++] = 1;
  7311  0BE1  0855               	movf	inputValue@dem,w
  7312  0BE2  00BA               	movwf	??_inputValue
  7313  0BE3  073A               	addwf	??_inputValue,w
  7314  0BE4  3E3D               	addlw	(low (inputValue@arr| 0))& (0+255)
  7315  0BE5  0084               	movwf	4
  7316  0BE6  3001               	movlw	1
  7317  0BE7  1383               	bcf	3,7	;select IRP bank0
  7318  0BE8  0080               	movwf	0
  7319  0BE9  0A84               	incf	4,f
  7320  0BEA  3000               	movlw	0
  7321  0BEB  0080               	movwf	0
  7322  0BEC  3001               	movlw	1
  7323  0BED  07D5               	addwf	inputValue@dem,f
  7324  0BEE  1803               	skipnc
  7325  0BEF  0AD6               	incf	inputValue@dem+1,f
  7326  0BF0  3000               	movlw	0
  7327  0BF1  07D6               	addwf	inputValue@dem+1,f
  7328  0BF2                     l4497:
  7329                           
  7330                           ;main.c: 152: };main.c: 153: if(k == '2')
  7331  0BF2  3032               	movlw	50
  7332  0BF3  0657               	xorwf	inputValue@k,w
  7333  0BF4  1D03               	btfss	3,2
  7334  0BF5  2C13               	goto	l4507
  7335                           
  7336                           ;main.c: 154: {;main.c: 155: Lcd_Write_Char(k);
  7337  0BF6  0857               	movf	inputValue@k,w
  7338  0BF7  160A  158A  24C4  120A  158A  	fcall	_Lcd_Write_Char
  7339                           
  7340                           ;main.c: 156: UART_send_char(k);
  7341  0BFC  0857               	movf	inputValue@k,w
  7342  0BFD  160A  158A  22A2  120A  158A  	fcall	_UART_send_char
  7343                           
  7344                           ;main.c: 157: arr[dem++] = 2;
  7345  0C02  0855               	movf	inputValue@dem,w
  7346  0C03  00BA               	movwf	??_inputValue
  7347  0C04  073A               	addwf	??_inputValue,w
  7348  0C05  3E3D               	addlw	(low (inputValue@arr| 0))& (0+255)
  7349  0C06  0084               	movwf	4
  7350  0C07  3002               	movlw	2
  7351  0C08  1383               	bcf	3,7	;select IRP bank0
  7352  0C09  0080               	movwf	0
  7353  0C0A  0A84               	incf	4,f
  7354  0C0B  3000               	movlw	0
  7355  0C0C  0080               	movwf	0
  7356  0C0D  3001               	movlw	1
  7357  0C0E  07D5               	addwf	inputValue@dem,f
  7358  0C0F  1803               	skipnc
  7359  0C10  0AD6               	incf	inputValue@dem+1,f
  7360  0C11  3000               	movlw	0
  7361  0C12  07D6               	addwf	inputValue@dem+1,f
  7362  0C13                     l4507:
  7363                           
  7364                           ;main.c: 158: };main.c: 159: if(k == '3')
  7365  0C13  3033               	movlw	51
  7366  0C14  0657               	xorwf	inputValue@k,w
  7367  0C15  1D03               	btfss	3,2
  7368  0C16  2C34               	goto	l4517
  7369                           
  7370                           ;main.c: 160: {;main.c: 161: Lcd_Write_Char(k);
  7371  0C17  0857               	movf	inputValue@k,w
  7372  0C18  160A  158A  24C4  120A  158A  	fcall	_Lcd_Write_Char
  7373                           
  7374                           ;main.c: 162: UART_send_char(k);
  7375  0C1D  0857               	movf	inputValue@k,w
  7376  0C1E  160A  158A  22A2  120A  158A  	fcall	_UART_send_char
  7377                           
  7378                           ;main.c: 163: arr[dem++] = 3;
  7379  0C23  0855               	movf	inputValue@dem,w
  7380  0C24  00BA               	movwf	??_inputValue
  7381  0C25  073A               	addwf	??_inputValue,w
  7382  0C26  3E3D               	addlw	(low (inputValue@arr| 0))& (0+255)
  7383  0C27  0084               	movwf	4
  7384  0C28  3003               	movlw	3
  7385  0C29  1383               	bcf	3,7	;select IRP bank0
  7386  0C2A  0080               	movwf	0
  7387  0C2B  0A84               	incf	4,f
  7388  0C2C  3000               	movlw	0
  7389  0C2D  0080               	movwf	0
  7390  0C2E  3001               	movlw	1
  7391  0C2F  07D5               	addwf	inputValue@dem,f
  7392  0C30  1803               	skipnc
  7393  0C31  0AD6               	incf	inputValue@dem+1,f
  7394  0C32  3000               	movlw	0
  7395  0C33  07D6               	addwf	inputValue@dem+1,f
  7396  0C34                     l4517:
  7397                           
  7398                           ;main.c: 164: };main.c: 165: if(k == '4')
  7399  0C34  3034               	movlw	52
  7400  0C35  0657               	xorwf	inputValue@k,w
  7401  0C36  1D03               	btfss	3,2
  7402  0C37  2C55               	goto	l4527
  7403                           
  7404                           ;main.c: 166: {;main.c: 167: Lcd_Write_Char(k);
  7405  0C38  0857               	movf	inputValue@k,w
  7406  0C39  160A  158A  24C4  120A  158A  	fcall	_Lcd_Write_Char
  7407                           
  7408                           ;main.c: 168: UART_send_char(k);
  7409  0C3E  0857               	movf	inputValue@k,w
  7410  0C3F  160A  158A  22A2  120A  158A  	fcall	_UART_send_char
  7411                           
  7412                           ;main.c: 169: arr[dem++] = 4;
  7413  0C44  0855               	movf	inputValue@dem,w
  7414  0C45  00BA               	movwf	??_inputValue
  7415  0C46  073A               	addwf	??_inputValue,w
  7416  0C47  3E3D               	addlw	(low (inputValue@arr| 0))& (0+255)
  7417  0C48  0084               	movwf	4
  7418  0C49  3004               	movlw	4
  7419  0C4A  1383               	bcf	3,7	;select IRP bank0
  7420  0C4B  0080               	movwf	0
  7421  0C4C  0A84               	incf	4,f
  7422  0C4D  3000               	movlw	0
  7423  0C4E  0080               	movwf	0
  7424  0C4F  3001               	movlw	1
  7425  0C50  07D5               	addwf	inputValue@dem,f
  7426  0C51  1803               	skipnc
  7427  0C52  0AD6               	incf	inputValue@dem+1,f
  7428  0C53  3000               	movlw	0
  7429  0C54  07D6               	addwf	inputValue@dem+1,f
  7430  0C55                     l4527:
  7431                           
  7432                           ;main.c: 170: };main.c: 171: if(k == '5')
  7433  0C55  3035               	movlw	53
  7434  0C56  0657               	xorwf	inputValue@k,w
  7435  0C57  1D03               	btfss	3,2
  7436  0C58  2C76               	goto	l4537
  7437                           
  7438                           ;main.c: 172: {;main.c: 173: Lcd_Write_Char(k);
  7439  0C59  0857               	movf	inputValue@k,w
  7440  0C5A  160A  158A  24C4  120A  158A  	fcall	_Lcd_Write_Char
  7441                           
  7442                           ;main.c: 174: UART_send_char(k);
  7443  0C5F  0857               	movf	inputValue@k,w
  7444  0C60  160A  158A  22A2  120A  158A  	fcall	_UART_send_char
  7445                           
  7446                           ;main.c: 175: arr[dem++] = 5;
  7447  0C65  0855               	movf	inputValue@dem,w
  7448  0C66  00BA               	movwf	??_inputValue
  7449  0C67  073A               	addwf	??_inputValue,w
  7450  0C68  3E3D               	addlw	(low (inputValue@arr| 0))& (0+255)
  7451  0C69  0084               	movwf	4
  7452  0C6A  3005               	movlw	5
  7453  0C6B  1383               	bcf	3,7	;select IRP bank0
  7454  0C6C  0080               	movwf	0
  7455  0C6D  0A84               	incf	4,f
  7456  0C6E  3000               	movlw	0
  7457  0C6F  0080               	movwf	0
  7458  0C70  3001               	movlw	1
  7459  0C71  07D5               	addwf	inputValue@dem,f
  7460  0C72  1803               	skipnc
  7461  0C73  0AD6               	incf	inputValue@dem+1,f
  7462  0C74  3000               	movlw	0
  7463  0C75  07D6               	addwf	inputValue@dem+1,f
  7464  0C76                     l4537:
  7465                           
  7466                           ;main.c: 176: };main.c: 177: if(k == '6')
  7467  0C76  3036               	movlw	54
  7468  0C77  0657               	xorwf	inputValue@k,w
  7469  0C78  1D03               	btfss	3,2
  7470  0C79  2C97               	goto	l4547
  7471                           
  7472                           ;main.c: 178: {;main.c: 179: Lcd_Write_Char(k);
  7473  0C7A  0857               	movf	inputValue@k,w
  7474  0C7B  160A  158A  24C4  120A  158A  	fcall	_Lcd_Write_Char
  7475                           
  7476                           ;main.c: 180: UART_send_char(k);
  7477  0C80  0857               	movf	inputValue@k,w
  7478  0C81  160A  158A  22A2  120A  158A  	fcall	_UART_send_char
  7479                           
  7480                           ;main.c: 181: arr[dem++] = 6;
  7481  0C86  0855               	movf	inputValue@dem,w
  7482  0C87  00BA               	movwf	??_inputValue
  7483  0C88  073A               	addwf	??_inputValue,w
  7484  0C89  3E3D               	addlw	(low (inputValue@arr| 0))& (0+255)
  7485  0C8A  0084               	movwf	4
  7486  0C8B  3006               	movlw	6
  7487  0C8C  1383               	bcf	3,7	;select IRP bank0
  7488  0C8D  0080               	movwf	0
  7489  0C8E  0A84               	incf	4,f
  7490  0C8F  3000               	movlw	0
  7491  0C90  0080               	movwf	0
  7492  0C91  3001               	movlw	1
  7493  0C92  07D5               	addwf	inputValue@dem,f
  7494  0C93  1803               	skipnc
  7495  0C94  0AD6               	incf	inputValue@dem+1,f
  7496  0C95  3000               	movlw	0
  7497  0C96  07D6               	addwf	inputValue@dem+1,f
  7498  0C97                     l4547:
  7499                           
  7500                           ;main.c: 182: };main.c: 183: if(k == '7')
  7501  0C97  3037               	movlw	55
  7502  0C98  0657               	xorwf	inputValue@k,w
  7503  0C99  1D03               	btfss	3,2
  7504  0C9A  2CB8               	goto	l4557
  7505                           
  7506                           ;main.c: 184: {;main.c: 185: Lcd_Write_Char(k);
  7507  0C9B  0857               	movf	inputValue@k,w
  7508  0C9C  160A  158A  24C4  120A  158A  	fcall	_Lcd_Write_Char
  7509                           
  7510                           ;main.c: 186: UART_send_char(k);
  7511  0CA1  0857               	movf	inputValue@k,w
  7512  0CA2  160A  158A  22A2  120A  158A  	fcall	_UART_send_char
  7513                           
  7514                           ;main.c: 187: arr[dem++] = 7;
  7515  0CA7  0855               	movf	inputValue@dem,w
  7516  0CA8  00BA               	movwf	??_inputValue
  7517  0CA9  073A               	addwf	??_inputValue,w
  7518  0CAA  3E3D               	addlw	(low (inputValue@arr| 0))& (0+255)
  7519  0CAB  0084               	movwf	4
  7520  0CAC  3007               	movlw	7
  7521  0CAD  1383               	bcf	3,7	;select IRP bank0
  7522  0CAE  0080               	movwf	0
  7523  0CAF  0A84               	incf	4,f
  7524  0CB0  3000               	movlw	0
  7525  0CB1  0080               	movwf	0
  7526  0CB2  3001               	movlw	1
  7527  0CB3  07D5               	addwf	inputValue@dem,f
  7528  0CB4  1803               	skipnc
  7529  0CB5  0AD6               	incf	inputValue@dem+1,f
  7530  0CB6  3000               	movlw	0
  7531  0CB7  07D6               	addwf	inputValue@dem+1,f
  7532  0CB8                     l4557:
  7533                           
  7534                           ;main.c: 188: };main.c: 189: if(k == '8')
  7535  0CB8  3038               	movlw	56
  7536  0CB9  0657               	xorwf	inputValue@k,w
  7537  0CBA  1D03               	btfss	3,2
  7538  0CBB  2CD9               	goto	l4567
  7539                           
  7540                           ;main.c: 190: {;main.c: 191: Lcd_Write_Char(k);
  7541  0CBC  0857               	movf	inputValue@k,w
  7542  0CBD  160A  158A  24C4  120A  158A  	fcall	_Lcd_Write_Char
  7543                           
  7544                           ;main.c: 192: UART_send_char(k);
  7545  0CC2  0857               	movf	inputValue@k,w
  7546  0CC3  160A  158A  22A2  120A  158A  	fcall	_UART_send_char
  7547                           
  7548                           ;main.c: 193: arr[dem++] = 8;
  7549  0CC8  0855               	movf	inputValue@dem,w
  7550  0CC9  00BA               	movwf	??_inputValue
  7551  0CCA  073A               	addwf	??_inputValue,w
  7552  0CCB  3E3D               	addlw	(low (inputValue@arr| 0))& (0+255)
  7553  0CCC  0084               	movwf	4
  7554  0CCD  3008               	movlw	8
  7555  0CCE  1383               	bcf	3,7	;select IRP bank0
  7556  0CCF  0080               	movwf	0
  7557  0CD0  0A84               	incf	4,f
  7558  0CD1  3000               	movlw	0
  7559  0CD2  0080               	movwf	0
  7560  0CD3  3001               	movlw	1
  7561  0CD4  07D5               	addwf	inputValue@dem,f
  7562  0CD5  1803               	skipnc
  7563  0CD6  0AD6               	incf	inputValue@dem+1,f
  7564  0CD7  3000               	movlw	0
  7565  0CD8  07D6               	addwf	inputValue@dem+1,f
  7566  0CD9                     l4567:
  7567                           
  7568                           ;main.c: 194: };main.c: 195: if(k == '9')
  7569  0CD9  3039               	movlw	57
  7570  0CDA  0657               	xorwf	inputValue@k,w
  7571  0CDB  1D03               	btfss	3,2
  7572  0CDC  2CFA               	goto	l4577
  7573                           
  7574                           ;main.c: 196: {;main.c: 197: Lcd_Write_Char(k);
  7575  0CDD  0857               	movf	inputValue@k,w
  7576  0CDE  160A  158A  24C4  120A  158A  	fcall	_Lcd_Write_Char
  7577                           
  7578                           ;main.c: 198: UART_send_char(k);
  7579  0CE3  0857               	movf	inputValue@k,w
  7580  0CE4  160A  158A  22A2  120A  158A  	fcall	_UART_send_char
  7581                           
  7582                           ;main.c: 199: arr[dem++] = 9;
  7583  0CE9  0855               	movf	inputValue@dem,w
  7584  0CEA  00BA               	movwf	??_inputValue
  7585  0CEB  073A               	addwf	??_inputValue,w
  7586  0CEC  3E3D               	addlw	(low (inputValue@arr| 0))& (0+255)
  7587  0CED  0084               	movwf	4
  7588  0CEE  3009               	movlw	9
  7589  0CEF  1383               	bcf	3,7	;select IRP bank0
  7590  0CF0  0080               	movwf	0
  7591  0CF1  0A84               	incf	4,f
  7592  0CF2  3000               	movlw	0
  7593  0CF3  0080               	movwf	0
  7594  0CF4  3001               	movlw	1
  7595  0CF5  07D5               	addwf	inputValue@dem,f
  7596  0CF6  1803               	skipnc
  7597  0CF7  0AD6               	incf	inputValue@dem+1,f
  7598  0CF8  3000               	movlw	0
  7599  0CF9  07D6               	addwf	inputValue@dem+1,f
  7600  0CFA                     l4577:
  7601                           
  7602                           ;main.c: 200: };main.c: 201: if(k == 'D')
  7603  0CFA  3044               	movlw	68
  7604  0CFB  0657               	xorwf	inputValue@k,w
  7605  0CFC  1D03               	btfss	3,2
  7606  0CFD  2BAA               	goto	l4475
  7607                           
  7608                           ;main.c: 202: {;main.c: 203: enter++;
  7609  0CFE  3001               	movlw	1
  7610  0CFF  1683               	bsf	3,5	;RP0=1, select bank1
  7611  0D00  07A3               	addwf	_enter^(0+128),f
  7612  0D01  1803               	skipnc
  7613  0D02  0AA4               	incf	(_enter+1)^(0+128),f
  7614  0D03  3000               	movlw	0
  7615  0D04  07A4               	addwf	(_enter+1)^(0+128),f
  7616                           
  7617                           ;main.c: 205: };main.c: 206: };main.c: 207: int inputInt = 0;
  7618                           
  7619                           ;main.c: 204: break;
  7620  0D05  1283               	bcf	3,5	;RP0=0, select bank0
  7621  0D06  01D1               	clrf	inputValue@inputInt
  7622  0D07  01D2               	clrf	inputValue@inputInt+1
  7623                           
  7624                           ;main.c: 208: for(int i = 0;i<dem;i++)
  7625  0D08  01D3               	clrf	inputValue@i
  7626  0D09  01D4               	clrf	inputValue@i+1
  7627  0D0A                     l4587:
  7628  0D0A  0854               	movf	inputValue@i+1,w
  7629  0D0B  3A80               	xorlw	128
  7630  0D0C  00BA               	movwf	??_inputValue
  7631  0D0D  0856               	movf	inputValue@dem+1,w
  7632  0D0E  3A80               	xorlw	128
  7633  0D0F  023A               	subwf	??_inputValue,w
  7634  0D10  1D03               	skipz
  7635  0D11  2D14               	goto	u6305
  7636  0D12  0855               	movf	inputValue@dem,w
  7637  0D13  0253               	subwf	inputValue@i,w
  7638  0D14                     u6305:
  7639  0D14  1803               	btfsc	3,0
  7640  0D15  2D53               	goto	l4589
  7641                           
  7642                           ;main.c: 209: {;main.c: 210: inputInt += arr[i]*convert((dem-1)-i);
  7643  0D16  1283               	bcf	3,5	;RP0=0, select bank0
  7644  0D17  1303               	bcf	3,6	;RP1=0, select bank0
  7645  0D18  0853               	movf	inputValue@i,w
  7646  0D19  0255               	subwf	inputValue@dem,w
  7647  0D1A  00BA               	movwf	??_inputValue
  7648  0D1B  0854               	movf	inputValue@i+1,w
  7649  0D1C  1C03               	skipc
  7650  0D1D  0A54               	incf	inputValue@i+1,w
  7651  0D1E  0256               	subwf	inputValue@dem+1,w
  7652  0D1F  00BB               	movwf	??_inputValue+1
  7653  0D20  083A               	movf	??_inputValue,w
  7654  0D21  3EFF               	addlw	255
  7655  0D22  00A4               	movwf	convert@b
  7656  0D23  083B               	movf	??_inputValue+1,w
  7657  0D24  1803               	skipnc
  7658  0D25  3E01               	addlw	1
  7659  0D26  3EFF               	addlw	255
  7660  0D27  00A5               	movwf	convert@b+1
  7661  0D28  01A6               	clrf	convert@b+2
  7662  0D29  1BA5               	btfsc	convert@b+1,7
  7663  0D2A  03A6               	decf	convert@b+2,f
  7664  0D2B  0826               	movf	convert@b+2,w
  7665  0D2C  00A7               	movwf	convert@b+3
  7666  0D2D  160A  158A  2698  120A  158A  	fcall	_convert
  7667  0D32  0825               	movf	?_convert+1,w
  7668  0D33  00B3               	movwf	___wmul@multiplier+1
  7669  0D34  0824               	movf	?_convert,w
  7670  0D35  00B2               	movwf	___wmul@multiplier
  7671  0D36  0853               	movf	inputValue@i,w
  7672  0D37  00BC               	movwf	??_inputValue+2
  7673  0D38  073C               	addwf	??_inputValue+2,w
  7674  0D39  3E3D               	addlw	(low (inputValue@arr| 0))& (0+255)
  7675  0D3A  0084               	movwf	4
  7676  0D3B  1383               	bcf	3,7	;select IRP bank0
  7677  0D3C  0800               	movf	0,w
  7678  0D3D  00B4               	movwf	___wmul@multiplicand
  7679  0D3E  0A84               	incf	4,f
  7680  0D3F  0800               	movf	0,w
  7681  0D40  00B5               	movwf	___wmul@multiplicand+1
  7682  0D41  160A  158A  2384  120A  158A  	fcall	___wmul
  7683  0D46  0832               	movf	?___wmul,w
  7684  0D47  07D1               	addwf	inputValue@inputInt,f
  7685  0D48  1803               	skipnc
  7686  0D49  0AD2               	incf	inputValue@inputInt+1,f
  7687  0D4A  0833               	movf	?___wmul+1,w
  7688  0D4B  07D2               	addwf	inputValue@inputInt+1,f
  7689  0D4C  3001               	movlw	1
  7690  0D4D  07D3               	addwf	inputValue@i,f
  7691  0D4E  1803               	skipnc
  7692  0D4F  0AD4               	incf	inputValue@i+1,f
  7693  0D50  3000               	movlw	0
  7694  0D51  07D4               	addwf	inputValue@i+1,f
  7695  0D52  2D0A               	goto	l4587
  7696  0D53                     l4589:
  7697                           
  7698                           ;main.c: 211: };main.c: 212: return inputInt;
  7699  0D53  1283               	bcf	3,5	;RP0=0, select bank0
  7700  0D54  1303               	bcf	3,6	;RP1=0, select bank0
  7701  0D55  0852               	movf	inputValue@inputInt+1,w
  7702  0D56  00B9               	movwf	?_inputValue+1
  7703  0D57  0851               	movf	inputValue@inputInt,w
  7704  0D58  00B8               	movwf	?_inputValue
  7705  0D59  0008               	return
  7706  0D5A                     __end_of_inputValue:
  7707                           
  7708                           	psect	text27
  7709  1ADC                     __ptext27:	
  7710 ;; *************** function _switch_press_scan *****************
  7711 ;; Defined at:
  7712 ;;		line 38 in file "keypad.h"
  7713 ;; Parameters:    Size  Location     Type
  7714 ;;		None
  7715 ;; Auto vars:     Size  Location     Type
  7716 ;;  key             1    5[COMMON] unsigned char 
  7717 ;; Return value:  Size  Location     Type
  7718 ;;                  1    wreg      unsigned char 
  7719 ;; Registers used:
  7720 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7721 ;; Tracked objects:
  7722 ;;		On entry : 300/0
  7723 ;;		On exit  : 300/0
  7724 ;;		Unchanged: 0/0
  7725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7726 ;;      Params:         0       0       0       0       0
  7727 ;;      Locals:         1       0       0       0       0
  7728 ;;      Temps:          0       0       0       0       0
  7729 ;;      Totals:         1       0       0       0       0
  7730 ;;Total ram usage:        1 bytes
  7731 ;; Hardware stack levels used:    1
  7732 ;; Hardware stack levels required when called:    2
  7733 ;; This function calls:
  7734 ;;		_keypad_scanner
  7735 ;; This function is called by:
  7736 ;;		_inputValue
  7737 ;;		_SwitchMode
  7738 ;; This function uses a non-reentrant model
  7739 ;;
  7740                           
  7741                           
  7742                           ;psect for function _switch_press_scan
  7743  1ADC                     _switch_press_scan:
  7744                           
  7745                           ;keypad.h: 40: char key = 'n';
  7746                           
  7747                           ;incstack = 0
  7748                           ; Regs used in _switch_press_scan: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7749  1ADC  306E               	movlw	110
  7750  1ADD                     L9:
  7751  1ADD  00FF               	movwf	127
  7752  1ADE  087F               	movf	127,w
  7753  1ADF  00F5               	movwf	switch_press_scan@key
  7754  1AE0  306E               	movlw	110
  7755  1AE1  0675               	xorwf	switch_press_scan@key,w
  7756  1AE2  1D03               	btfss	3,2
  7757  1AE3  2AEA               	goto	l2879
  7758                           
  7759                           ;keypad.h: 42: key = keypad_scanner();
  7760                           
  7761                           ;keypad.h: 41: while(key =='n')
  7762  1AE4  120A  158A  20D5  160A  158A  	fcall	_keypad_scanner
  7763  1AE9  2ADD               	goto	L9
  7764  1AEA                     l2879:
  7765                           
  7766                           ;keypad.h: 43: return key;
  7767  1AEA  0875               	movf	switch_press_scan@key,w
  7768  1AEB  0008               	return
  7769  1AEC                     __end_of_switch_press_scan:
  7770                           
  7771                           	psect	text28
  7772  08D5                     __ptext28:	
  7773 ;; *************** function _keypad_scanner *****************
  7774 ;; Defined at:
  7775 ;;		line 9 in file "keypad.h"
  7776 ;; Parameters:    Size  Location     Type
  7777 ;;		None
  7778 ;; Auto vars:     Size  Location     Type
  7779 ;;		None
  7780 ;; Return value:  Size  Location     Type
  7781 ;;                  1    wreg      unsigned char 
  7782 ;; Registers used:
  7783 ;;		wreg
  7784 ;; Tracked objects:
  7785 ;;		On entry : 300/0
  7786 ;;		On exit  : 300/0
  7787 ;;		Unchanged: 0/0
  7788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7789 ;;      Params:         0       0       0       0       0
  7790 ;;      Locals:         0       0       0       0       0
  7791 ;;      Temps:          3       0       0       0       0
  7792 ;;      Totals:         3       0       0       0       0
  7793 ;;Total ram usage:        3 bytes
  7794 ;; Hardware stack levels used:    1
  7795 ;; Hardware stack levels required when called:    1
  7796 ;; This function calls:
  7797 ;;		Nothing
  7798 ;; This function is called by:
  7799 ;;		_switch_press_scan
  7800 ;; This function uses a non-reentrant model
  7801 ;;
  7802                           
  7803                           
  7804                           ;psect for function _keypad_scanner
  7805  08D5                     _keypad_scanner:
  7806                           
  7807                           ;keypad.h: 11: RC3 = 0; RB1 = 1; RB2 = 1; RB3 = 1;
  7808                           
  7809                           ;incstack = 0
  7810                           ; Regs used in _keypad_scanner: [wreg]
  7811  08D5  1187               	bcf	7,3	;volatile
  7812  08D6  1486               	bsf	6,1	;volatile
  7813  08D7  1506               	bsf	6,2	;volatile
  7814  08D8  1586               	bsf	6,3	;volatile
  7815                           
  7816                           ;keypad.h: 12: if (RB4 == 0) { _delay((unsigned long)((100)*(20000000/4000.0))); while (
      +                          RB4==0); return '1'; }
  7817  08D9  1A06               	btfsc	6,4	;volatile
  7818  08DA  28EE               	goto	l199
  7819  08DB  3003               	movlw	3
  7820  08DC  00F4               	movwf	??_keypad_scanner+2
  7821  08DD  308A               	movlw	138
  7822  08DE  00F3               	movwf	??_keypad_scanner+1
  7823  08DF  3055               	movlw	85
  7824  08E0  00F2               	movwf	??_keypad_scanner
  7825  08E1                     u7717:
  7826  08E1  0BF2               	decfsz	??_keypad_scanner,f
  7827  08E2  28E1               	goto	u7717
  7828  08E3  0BF3               	decfsz	??_keypad_scanner+1,f
  7829  08E4  28E1               	goto	u7717
  7830  08E5  0BF4               	decfsz	??_keypad_scanner+2,f
  7831  08E6  28E1               	goto	u7717
  7832  08E7  28E8               	nop2
  7833  08E8                     l200:
  7834  08E8  1283               	bcf	3,5	;RP0=0, select bank0
  7835  08E9  1303               	bcf	3,6	;RP1=0, select bank0
  7836  08EA  1E06               	btfss	6,4	;volatile
  7837  08EB  28E8               	goto	l200
  7838  08EC  3031               	movlw	49
  7839  08ED  0008               	return
  7840  08EE                     l199:
  7841                           
  7842                           ;keypad.h: 13: if (RB5 == 0) { _delay((unsigned long)((100)*(20000000/4000.0))); while (
      +                          RB5==0); return '2'; }
  7843  08EE  1A86               	btfsc	6,5	;volatile
  7844  08EF  2903               	goto	l204
  7845  08F0  3003               	movlw	3
  7846  08F1  00F4               	movwf	??_keypad_scanner+2
  7847  08F2  308A               	movlw	138
  7848  08F3  00F3               	movwf	??_keypad_scanner+1
  7849  08F4  3055               	movlw	85
  7850  08F5  00F2               	movwf	??_keypad_scanner
  7851  08F6                     u7727:
  7852  08F6  0BF2               	decfsz	??_keypad_scanner,f
  7853  08F7  28F6               	goto	u7727
  7854  08F8  0BF3               	decfsz	??_keypad_scanner+1,f
  7855  08F9  28F6               	goto	u7727
  7856  08FA  0BF4               	decfsz	??_keypad_scanner+2,f
  7857  08FB  28F6               	goto	u7727
  7858  08FC  28FD               	nop2
  7859  08FD                     l205:
  7860  08FD  1283               	bcf	3,5	;RP0=0, select bank0
  7861  08FE  1303               	bcf	3,6	;RP1=0, select bank0
  7862  08FF  1E86               	btfss	6,5	;volatile
  7863  0900  28FD               	goto	l205
  7864  0901  3032               	movlw	50
  7865  0902  0008               	return
  7866  0903                     l204:
  7867                           
  7868                           ;keypad.h: 14: if (RB6 == 0) { _delay((unsigned long)((100)*(20000000/4000.0))); while (
      +                          RB6==0); return '3'; }
  7869  0903  1B06               	btfsc	6,6	;volatile
  7870  0904  2918               	goto	l208
  7871  0905  3003               	movlw	3
  7872  0906  00F4               	movwf	??_keypad_scanner+2
  7873  0907  308A               	movlw	138
  7874  0908  00F3               	movwf	??_keypad_scanner+1
  7875  0909  3055               	movlw	85
  7876  090A  00F2               	movwf	??_keypad_scanner
  7877  090B                     u7737:
  7878  090B  0BF2               	decfsz	??_keypad_scanner,f
  7879  090C  290B               	goto	u7737
  7880  090D  0BF3               	decfsz	??_keypad_scanner+1,f
  7881  090E  290B               	goto	u7737
  7882  090F  0BF4               	decfsz	??_keypad_scanner+2,f
  7883  0910  290B               	goto	u7737
  7884  0911  2912               	nop2
  7885  0912                     l209:
  7886  0912  1283               	bcf	3,5	;RP0=0, select bank0
  7887  0913  1303               	bcf	3,6	;RP1=0, select bank0
  7888  0914  1F06               	btfss	6,6	;volatile
  7889  0915  2912               	goto	l209
  7890  0916  3033               	movlw	51
  7891  0917  0008               	return
  7892  0918                     l208:
  7893                           
  7894                           ;keypad.h: 15: if (RB7 == 0) { _delay((unsigned long)((100)*(20000000/4000.0))); while (
      +                          RB7==0); return 'A'; }
  7895  0918  1B86               	btfsc	6,7	;volatile
  7896  0919  292D               	goto	l212
  7897  091A  3003               	movlw	3
  7898  091B  00F4               	movwf	??_keypad_scanner+2
  7899  091C  308A               	movlw	138
  7900  091D  00F3               	movwf	??_keypad_scanner+1
  7901  091E  3055               	movlw	85
  7902  091F  00F2               	movwf	??_keypad_scanner
  7903  0920                     u7747:
  7904  0920  0BF2               	decfsz	??_keypad_scanner,f
  7905  0921  2920               	goto	u7747
  7906  0922  0BF3               	decfsz	??_keypad_scanner+1,f
  7907  0923  2920               	goto	u7747
  7908  0924  0BF4               	decfsz	??_keypad_scanner+2,f
  7909  0925  2920               	goto	u7747
  7910  0926  2927               	nop2
  7911  0927                     l213:
  7912  0927  1283               	bcf	3,5	;RP0=0, select bank0
  7913  0928  1303               	bcf	3,6	;RP1=0, select bank0
  7914  0929  1F86               	btfss	6,7	;volatile
  7915  092A  2927               	goto	l213
  7916  092B  3041               	movlw	65
  7917  092C  0008               	return
  7918  092D                     l212:
  7919                           
  7920                           ;keypad.h: 17: RC3 = 1; RB1 = 0; RB2 = 1; RB3 = 1;
  7921  092D  1587               	bsf	7,3	;volatile
  7922  092E  1086               	bcf	6,1	;volatile
  7923  092F  1506               	bsf	6,2	;volatile
  7924  0930  1586               	bsf	6,3	;volatile
  7925                           
  7926                           ;keypad.h: 18: if (RB4 == 0) { _delay((unsigned long)((100)*(20000000/4000.0))); while (
      +                          RB4==0); return '6'; }
  7927  0931  1A06               	btfsc	6,4	;volatile
  7928  0932  2946               	goto	l216
  7929  0933  3003               	movlw	3
  7930  0934  00F4               	movwf	??_keypad_scanner+2
  7931  0935  308A               	movlw	138
  7932  0936  00F3               	movwf	??_keypad_scanner+1
  7933  0937  3055               	movlw	85
  7934  0938  00F2               	movwf	??_keypad_scanner
  7935  0939                     u7757:
  7936  0939  0BF2               	decfsz	??_keypad_scanner,f
  7937  093A  2939               	goto	u7757
  7938  093B  0BF3               	decfsz	??_keypad_scanner+1,f
  7939  093C  2939               	goto	u7757
  7940  093D  0BF4               	decfsz	??_keypad_scanner+2,f
  7941  093E  2939               	goto	u7757
  7942  093F  2940               	nop2
  7943  0940                     l217:
  7944  0940  1283               	bcf	3,5	;RP0=0, select bank0
  7945  0941  1303               	bcf	3,6	;RP1=0, select bank0
  7946  0942  1E06               	btfss	6,4	;volatile
  7947  0943  2940               	goto	l217
  7948  0944  3036               	movlw	54
  7949  0945  0008               	return
  7950  0946                     l216:
  7951                           
  7952                           ;keypad.h: 19: if (RB5 == 0) { _delay((unsigned long)((100)*(20000000/4000.0))); while (
      +                          RB5==0); return '5'; }
  7953  0946  1A86               	btfsc	6,5	;volatile
  7954  0947  295B               	goto	l220
  7955  0948  3003               	movlw	3
  7956  0949  00F4               	movwf	??_keypad_scanner+2
  7957  094A  308A               	movlw	138
  7958  094B  00F3               	movwf	??_keypad_scanner+1
  7959  094C  3055               	movlw	85
  7960  094D  00F2               	movwf	??_keypad_scanner
  7961  094E                     u7767:
  7962  094E  0BF2               	decfsz	??_keypad_scanner,f
  7963  094F  294E               	goto	u7767
  7964  0950  0BF3               	decfsz	??_keypad_scanner+1,f
  7965  0951  294E               	goto	u7767
  7966  0952  0BF4               	decfsz	??_keypad_scanner+2,f
  7967  0953  294E               	goto	u7767
  7968  0954  2955               	nop2
  7969  0955                     l221:
  7970  0955  1283               	bcf	3,5	;RP0=0, select bank0
  7971  0956  1303               	bcf	3,6	;RP1=0, select bank0
  7972  0957  1E86               	btfss	6,5	;volatile
  7973  0958  2955               	goto	l221
  7974  0959  3035               	movlw	53
  7975  095A  0008               	return
  7976  095B                     l220:
  7977                           
  7978                           ;keypad.h: 20: if (RB6 == 0) { _delay((unsigned long)((100)*(20000000/4000.0))); while (
      +                          RB6==0); return '4'; }
  7979  095B  1B06               	btfsc	6,6	;volatile
  7980  095C  2970               	goto	l224
  7981  095D  3003               	movlw	3
  7982  095E  00F4               	movwf	??_keypad_scanner+2
  7983  095F  308A               	movlw	138
  7984  0960  00F3               	movwf	??_keypad_scanner+1
  7985  0961  3055               	movlw	85
  7986  0962  00F2               	movwf	??_keypad_scanner
  7987  0963                     u7777:
  7988  0963  0BF2               	decfsz	??_keypad_scanner,f
  7989  0964  2963               	goto	u7777
  7990  0965  0BF3               	decfsz	??_keypad_scanner+1,f
  7991  0966  2963               	goto	u7777
  7992  0967  0BF4               	decfsz	??_keypad_scanner+2,f
  7993  0968  2963               	goto	u7777
  7994  0969  296A               	nop2
  7995  096A                     l225:
  7996  096A  1283               	bcf	3,5	;RP0=0, select bank0
  7997  096B  1303               	bcf	3,6	;RP1=0, select bank0
  7998  096C  1F06               	btfss	6,6	;volatile
  7999  096D  296A               	goto	l225
  8000  096E  3034               	movlw	52
  8001  096F  0008               	return
  8002  0970                     l224:
  8003                           
  8004                           ;keypad.h: 21: if (RB7 == 0) { _delay((unsigned long)((100)*(20000000/4000.0))); while (
      +                          RB7==0); return 'B'; }
  8005  0970  1B86               	btfsc	6,7	;volatile
  8006  0971  2985               	goto	l228
  8007  0972  3003               	movlw	3
  8008  0973  00F4               	movwf	??_keypad_scanner+2
  8009  0974  308A               	movlw	138
  8010  0975  00F3               	movwf	??_keypad_scanner+1
  8011  0976  3055               	movlw	85
  8012  0977  00F2               	movwf	??_keypad_scanner
  8013  0978                     u7787:
  8014  0978  0BF2               	decfsz	??_keypad_scanner,f
  8015  0979  2978               	goto	u7787
  8016  097A  0BF3               	decfsz	??_keypad_scanner+1,f
  8017  097B  2978               	goto	u7787
  8018  097C  0BF4               	decfsz	??_keypad_scanner+2,f
  8019  097D  2978               	goto	u7787
  8020  097E  297F               	nop2
  8021  097F                     l229:
  8022  097F  1283               	bcf	3,5	;RP0=0, select bank0
  8023  0980  1303               	bcf	3,6	;RP1=0, select bank0
  8024  0981  1F86               	btfss	6,7	;volatile
  8025  0982  297F               	goto	l229
  8026  0983  3042               	movlw	66
  8027  0984  0008               	return
  8028  0985                     l228:
  8029                           
  8030                           ;keypad.h: 23: RC3 = 1; RB1 = 1; RB2 = 0; RB3 = 1;
  8031  0985  1587               	bsf	7,3	;volatile
  8032  0986  1486               	bsf	6,1	;volatile
  8033  0987  1106               	bcf	6,2	;volatile
  8034  0988  1586               	bsf	6,3	;volatile
  8035                           
  8036                           ;keypad.h: 24: if (RB4 == 0) { _delay((unsigned long)((100)*(20000000/4000.0))); while (
      +                          RB4==0); return '7'; }
  8037  0989  1A06               	btfsc	6,4	;volatile
  8038  098A  299E               	goto	l232
  8039  098B  3003               	movlw	3
  8040  098C  00F4               	movwf	??_keypad_scanner+2
  8041  098D  308A               	movlw	138
  8042  098E  00F3               	movwf	??_keypad_scanner+1
  8043  098F  3055               	movlw	85
  8044  0990  00F2               	movwf	??_keypad_scanner
  8045  0991                     u7797:
  8046  0991  0BF2               	decfsz	??_keypad_scanner,f
  8047  0992  2991               	goto	u7797
  8048  0993  0BF3               	decfsz	??_keypad_scanner+1,f
  8049  0994  2991               	goto	u7797
  8050  0995  0BF4               	decfsz	??_keypad_scanner+2,f
  8051  0996  2991               	goto	u7797
  8052  0997  2998               	nop2
  8053  0998                     l233:
  8054  0998  1283               	bcf	3,5	;RP0=0, select bank0
  8055  0999  1303               	bcf	3,6	;RP1=0, select bank0
  8056  099A  1E06               	btfss	6,4	;volatile
  8057  099B  2998               	goto	l233
  8058  099C  3037               	movlw	55
  8059  099D  0008               	return
  8060  099E                     l232:
  8061                           
  8062                           ;keypad.h: 25: if (RB5 == 0) { _delay((unsigned long)((100)*(20000000/4000.0))); while (
      +                          RB5==0); return '8'; }
  8063  099E  1A86               	btfsc	6,5	;volatile
  8064  099F  29B3               	goto	l236
  8065  09A0  3003               	movlw	3
  8066  09A1  00F4               	movwf	??_keypad_scanner+2
  8067  09A2  308A               	movlw	138
  8068  09A3  00F3               	movwf	??_keypad_scanner+1
  8069  09A4  3055               	movlw	85
  8070  09A5  00F2               	movwf	??_keypad_scanner
  8071  09A6                     u7807:
  8072  09A6  0BF2               	decfsz	??_keypad_scanner,f
  8073  09A7  29A6               	goto	u7807
  8074  09A8  0BF3               	decfsz	??_keypad_scanner+1,f
  8075  09A9  29A6               	goto	u7807
  8076  09AA  0BF4               	decfsz	??_keypad_scanner+2,f
  8077  09AB  29A6               	goto	u7807
  8078  09AC  29AD               	nop2
  8079  09AD                     l237:
  8080  09AD  1283               	bcf	3,5	;RP0=0, select bank0
  8081  09AE  1303               	bcf	3,6	;RP1=0, select bank0
  8082  09AF  1E86               	btfss	6,5	;volatile
  8083  09B0  29AD               	goto	l237
  8084  09B1  3038               	movlw	56
  8085  09B2  0008               	return
  8086  09B3                     l236:
  8087                           
  8088                           ;keypad.h: 26: if (RB6 == 0) { _delay((unsigned long)((100)*(20000000/4000.0))); while (
      +                          RB6==0); return '9'; }
  8089  09B3  1B06               	btfsc	6,6	;volatile
  8090  09B4  29C8               	goto	l240
  8091  09B5  3003               	movlw	3
  8092  09B6  00F4               	movwf	??_keypad_scanner+2
  8093  09B7  308A               	movlw	138
  8094  09B8  00F3               	movwf	??_keypad_scanner+1
  8095  09B9  3055               	movlw	85
  8096  09BA  00F2               	movwf	??_keypad_scanner
  8097  09BB                     u7817:
  8098  09BB  0BF2               	decfsz	??_keypad_scanner,f
  8099  09BC  29BB               	goto	u7817
  8100  09BD  0BF3               	decfsz	??_keypad_scanner+1,f
  8101  09BE  29BB               	goto	u7817
  8102  09BF  0BF4               	decfsz	??_keypad_scanner+2,f
  8103  09C0  29BB               	goto	u7817
  8104  09C1  29C2               	nop2
  8105  09C2                     l241:
  8106  09C2  1283               	bcf	3,5	;RP0=0, select bank0
  8107  09C3  1303               	bcf	3,6	;RP1=0, select bank0
  8108  09C4  1F06               	btfss	6,6	;volatile
  8109  09C5  29C2               	goto	l241
  8110  09C6  3039               	movlw	57
  8111  09C7  0008               	return
  8112  09C8                     l240:
  8113                           
  8114                           ;keypad.h: 27: if (RB7 == 0) { _delay((unsigned long)((100)*(20000000/4000.0))); while (
      +                          RB7==0); return 'C'; }
  8115  09C8  1B86               	btfsc	6,7	;volatile
  8116  09C9  29DD               	goto	l244
  8117  09CA  3003               	movlw	3
  8118  09CB  00F4               	movwf	??_keypad_scanner+2
  8119  09CC  308A               	movlw	138
  8120  09CD  00F3               	movwf	??_keypad_scanner+1
  8121  09CE  3055               	movlw	85
  8122  09CF  00F2               	movwf	??_keypad_scanner
  8123  09D0                     u7827:
  8124  09D0  0BF2               	decfsz	??_keypad_scanner,f
  8125  09D1  29D0               	goto	u7827
  8126  09D2  0BF3               	decfsz	??_keypad_scanner+1,f
  8127  09D3  29D0               	goto	u7827
  8128  09D4  0BF4               	decfsz	??_keypad_scanner+2,f
  8129  09D5  29D0               	goto	u7827
  8130  09D6  29D7               	nop2
  8131  09D7                     l245:
  8132  09D7  1283               	bcf	3,5	;RP0=0, select bank0
  8133  09D8  1303               	bcf	3,6	;RP1=0, select bank0
  8134  09D9  1F86               	btfss	6,7	;volatile
  8135  09DA  29D7               	goto	l245
  8136  09DB  3043               	movlw	67
  8137  09DC  0008               	return
  8138  09DD                     l244:
  8139                           
  8140                           ;keypad.h: 29: RC3 = 1; RB1 = 1; RB2 = 1; RB3 = 0;
  8141  09DD  1587               	bsf	7,3	;volatile
  8142  09DE  1486               	bsf	6,1	;volatile
  8143  09DF  1506               	bsf	6,2	;volatile
  8144  09E0  1186               	bcf	6,3	;volatile
  8145                           
  8146                           ;keypad.h: 30: if (RB4 == 0) { _delay((unsigned long)((100)*(20000000/4000.0))); while (
      +                          RB4==0); return '*'; }
  8147  09E1  1A06               	btfsc	6,4	;volatile
  8148  09E2  29F6               	goto	l248
  8149  09E3  3003               	movlw	3
  8150  09E4  00F4               	movwf	??_keypad_scanner+2
  8151  09E5  308A               	movlw	138
  8152  09E6  00F3               	movwf	??_keypad_scanner+1
  8153  09E7  3055               	movlw	85
  8154  09E8  00F2               	movwf	??_keypad_scanner
  8155  09E9                     u7837:
  8156  09E9  0BF2               	decfsz	??_keypad_scanner,f
  8157  09EA  29E9               	goto	u7837
  8158  09EB  0BF3               	decfsz	??_keypad_scanner+1,f
  8159  09EC  29E9               	goto	u7837
  8160  09ED  0BF4               	decfsz	??_keypad_scanner+2,f
  8161  09EE  29E9               	goto	u7837
  8162  09EF  29F0               	nop2
  8163  09F0                     l249:
  8164  09F0  1283               	bcf	3,5	;RP0=0, select bank0
  8165  09F1  1303               	bcf	3,6	;RP1=0, select bank0
  8166  09F2  1E06               	btfss	6,4	;volatile
  8167  09F3  29F0               	goto	l249
  8168  09F4  302A               	movlw	42
  8169  09F5  0008               	return
  8170  09F6                     l248:
  8171                           
  8172                           ;keypad.h: 31: if (RB5 == 0) { _delay((unsigned long)((100)*(20000000/4000.0))); while (
      +                          RB5==0); return '0'; }
  8173  09F6  1A86               	btfsc	6,5	;volatile
  8174  09F7  2A0B               	goto	l252
  8175  09F8  3003               	movlw	3
  8176  09F9  00F4               	movwf	??_keypad_scanner+2
  8177  09FA  308A               	movlw	138
  8178  09FB  00F3               	movwf	??_keypad_scanner+1
  8179  09FC  3055               	movlw	85
  8180  09FD  00F2               	movwf	??_keypad_scanner
  8181  09FE                     u7847:
  8182  09FE  0BF2               	decfsz	??_keypad_scanner,f
  8183  09FF  29FE               	goto	u7847
  8184  0A00  0BF3               	decfsz	??_keypad_scanner+1,f
  8185  0A01  29FE               	goto	u7847
  8186  0A02  0BF4               	decfsz	??_keypad_scanner+2,f
  8187  0A03  29FE               	goto	u7847
  8188  0A04  2A05               	nop2
  8189  0A05                     l253:
  8190  0A05  1283               	bcf	3,5	;RP0=0, select bank0
  8191  0A06  1303               	bcf	3,6	;RP1=0, select bank0
  8192  0A07  1E86               	btfss	6,5	;volatile
  8193  0A08  2A05               	goto	l253
  8194  0A09  3030               	movlw	48
  8195  0A0A  0008               	return
  8196  0A0B                     l252:
  8197                           
  8198                           ;keypad.h: 32: if (RB6 == 0) { _delay((unsigned long)((100)*(20000000/4000.0))); while (
      +                          RB6==0); return '#'; }
  8199  0A0B  1B06               	btfsc	6,6	;volatile
  8200  0A0C  2A20               	goto	l256
  8201  0A0D  3003               	movlw	3
  8202  0A0E  00F4               	movwf	??_keypad_scanner+2
  8203  0A0F  308A               	movlw	138
  8204  0A10  00F3               	movwf	??_keypad_scanner+1
  8205  0A11  3055               	movlw	85
  8206  0A12  00F2               	movwf	??_keypad_scanner
  8207  0A13                     u7857:
  8208  0A13  0BF2               	decfsz	??_keypad_scanner,f
  8209  0A14  2A13               	goto	u7857
  8210  0A15  0BF3               	decfsz	??_keypad_scanner+1,f
  8211  0A16  2A13               	goto	u7857
  8212  0A17  0BF4               	decfsz	??_keypad_scanner+2,f
  8213  0A18  2A13               	goto	u7857
  8214  0A19  2A1A               	nop2
  8215  0A1A                     l257:
  8216  0A1A  1283               	bcf	3,5	;RP0=0, select bank0
  8217  0A1B  1303               	bcf	3,6	;RP1=0, select bank0
  8218  0A1C  1F06               	btfss	6,6	;volatile
  8219  0A1D  2A1A               	goto	l257
  8220  0A1E  3023               	movlw	35
  8221  0A1F  0008               	return
  8222  0A20                     l256:
  8223                           
  8224                           ;keypad.h: 33: if (RB7 == 0) { _delay((unsigned long)((100)*(20000000/4000.0))); while (
      +                          RB7==0); return 'D'; }
  8225  0A20  1B86               	btfsc	6,7	;volatile
  8226  0A21  2A35               	goto	l2841
  8227  0A22  3003               	movlw	3
  8228  0A23  00F4               	movwf	??_keypad_scanner+2
  8229  0A24  308A               	movlw	138
  8230  0A25  00F3               	movwf	??_keypad_scanner+1
  8231  0A26  3055               	movlw	85
  8232  0A27  00F2               	movwf	??_keypad_scanner
  8233  0A28                     u7867:
  8234  0A28  0BF2               	decfsz	??_keypad_scanner,f
  8235  0A29  2A28               	goto	u7867
  8236  0A2A  0BF3               	decfsz	??_keypad_scanner+1,f
  8237  0A2B  2A28               	goto	u7867
  8238  0A2C  0BF4               	decfsz	??_keypad_scanner+2,f
  8239  0A2D  2A28               	goto	u7867
  8240  0A2E  2A2F               	nop2
  8241  0A2F                     l261:
  8242  0A2F  1283               	bcf	3,5	;RP0=0, select bank0
  8243  0A30  1303               	bcf	3,6	;RP1=0, select bank0
  8244  0A31  1F86               	btfss	6,7	;volatile
  8245  0A32  2A2F               	goto	l261
  8246  0A33  3044               	movlw	68
  8247  0A34  0008               	return
  8248  0A35                     l2841:
  8249                           
  8250                           ;keypad.h: 35: return 'n';
  8251  0A35  306E               	movlw	110
  8252  0A36  0008               	return
  8253  0A37                     __end_of_keypad_scanner:
  8254                           
  8255                           	psect	text29
  8256  1E98                     __ptext29:	
  8257 ;; *************** function _convert *****************
  8258 ;; Defined at:
  8259 ;;		line 122 in file "main.c"
  8260 ;; Parameters:    Size  Location     Type
  8261 ;;  b               4    4[BANK0 ] long 
  8262 ;; Auto vars:     Size  Location     Type
  8263 ;;  i               2   12[BANK0 ] int 
  8264 ;;  a               4   14[BANK0 ] long 
  8265 ;; Return value:  Size  Location     Type
  8266 ;;                  4    4[BANK0 ] long 
  8267 ;; Registers used:
  8268 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  8269 ;; Tracked objects:
  8270 ;;		On entry : 300/0
  8271 ;;		On exit  : 300/0
  8272 ;;		Unchanged: 0/0
  8273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8274 ;;      Params:         0       4       0       0       0
  8275 ;;      Locals:         0       6       0       0       0
  8276 ;;      Temps:          0       4       0       0       0
  8277 ;;      Totals:         0      14       0       0       0
  8278 ;;Total ram usage:       14 bytes
  8279 ;; Hardware stack levels used:    1
  8280 ;; Hardware stack levels required when called:    2
  8281 ;; This function calls:
  8282 ;;		___lmul
  8283 ;; This function is called by:
  8284 ;;		_inputValue
  8285 ;; This function uses a non-reentrant model
  8286 ;;
  8287                           
  8288                           
  8289                           ;psect for function _convert
  8290  1E98                     _convert:
  8291                           
  8292                           ;main.c: 123: long a = 1;
  8293                           
  8294                           ;incstack = 0
  8295                           ; Regs used in _convert: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  8296  1E98  3000               	movlw	0
  8297  1E99  00B1               	movwf	convert@a+3
  8298  1E9A  3000               	movlw	0
  8299  1E9B  00B0               	movwf	convert@a+2
  8300  1E9C  3000               	movlw	0
  8301  1E9D  00AF               	movwf	convert@a+1
  8302  1E9E  3001               	movlw	1
  8303  1E9F  00AE               	movwf	convert@a
  8304                           
  8305                           ;main.c: 124: for(int i = 0;i < b;i++)
  8306  1EA0  01AC               	clrf	convert@i
  8307  1EA1  01AD               	clrf	convert@i+1
  8308  1EA2                     l2921:
  8309  1EA2  082C               	movf	convert@i,w
  8310  1EA3  00A8               	movwf	??_convert
  8311  1EA4  082D               	movf	convert@i+1,w
  8312  1EA5  00A9               	movwf	??_convert+1
  8313  1EA6  3000               	movlw	0
  8314  1EA7  1BA9               	btfsc	??_convert+1,7
  8315  1EA8  30FF               	movlw	255
  8316  1EA9  00AA               	movwf	??_convert+2
  8317  1EAA  00AB               	movwf	??_convert+3
  8318  1EAB  082B               	movf	??_convert+3,w
  8319  1EAC  3A80               	xorlw	128
  8320  1EAD  00FF               	movwf	127
  8321  1EAE  0827               	movf	convert@b+3,w
  8322  1EAF  3A80               	xorlw	128
  8323  1EB0  027F               	subwf	127,w
  8324  1EB1  1D03               	skipz
  8325  1EB2  2EBD               	goto	u3423
  8326  1EB3  0826               	movf	convert@b+2,w
  8327  1EB4  022A               	subwf	??_convert+2,w
  8328  1EB5  1D03               	skipz
  8329  1EB6  2EBD               	goto	u3423
  8330  1EB7  0825               	movf	convert@b+1,w
  8331  1EB8  0229               	subwf	??_convert+1,w
  8332  1EB9  1D03               	skipz
  8333  1EBA  2EBD               	goto	u3423
  8334  1EBB  0824               	movf	convert@b,w
  8335  1EBC  0228               	subwf	??_convert,w
  8336  1EBD                     u3423:
  8337  1EBD  1803               	btfsc	3,0
  8338  1EBE  2EE3               	goto	l2923
  8339                           
  8340                           ;main.c: 125: {;main.c: 126: a*=10;
  8341  1EBF  3000               	movlw	0
  8342  1EC0  00F5               	movwf	___lmul@multiplier+3
  8343  1EC1  3000               	movlw	0
  8344  1EC2  00F4               	movwf	___lmul@multiplier+2
  8345  1EC3  3000               	movlw	0
  8346  1EC4  00F3               	movwf	___lmul@multiplier+1
  8347  1EC5  300A               	movlw	10
  8348  1EC6  00F2               	movwf	___lmul@multiplier
  8349  1EC7  0831               	movf	convert@a+3,w
  8350  1EC8  00F9               	movwf	___lmul@multiplicand+3
  8351  1EC9  0830               	movf	convert@a+2,w
  8352  1ECA  00F8               	movwf	___lmul@multiplicand+2
  8353  1ECB  082F               	movf	convert@a+1,w
  8354  1ECC  00F7               	movwf	___lmul@multiplicand+1
  8355  1ECD  082E               	movf	convert@a,w
  8356  1ECE  00F6               	movwf	___lmul@multiplicand
  8357  1ECF  160A  158A  2535  160A  158A  	fcall	___lmul
  8358  1ED4  0875               	movf	?___lmul+3,w
  8359  1ED5  00B1               	movwf	convert@a+3
  8360  1ED6  0874               	movf	?___lmul+2,w
  8361  1ED7  00B0               	movwf	convert@a+2
  8362  1ED8  0873               	movf	?___lmul+1,w
  8363  1ED9  00AF               	movwf	convert@a+1
  8364  1EDA  0872               	movf	?___lmul,w
  8365  1EDB  00AE               	movwf	convert@a
  8366  1EDC  3001               	movlw	1
  8367  1EDD  07AC               	addwf	convert@i,f
  8368  1EDE  1803               	skipnc
  8369  1EDF  0AAD               	incf	convert@i+1,f
  8370  1EE0  3000               	movlw	0
  8371  1EE1  07AD               	addwf	convert@i+1,f
  8372  1EE2  2EA2               	goto	l2921
  8373  1EE3                     l2923:
  8374                           
  8375                           ;main.c: 127: };main.c: 128: return a;
  8376  1EE3  0831               	movf	convert@a+3,w
  8377  1EE4  00A7               	movwf	?_convert+3
  8378  1EE5  0830               	movf	convert@a+2,w
  8379  1EE6  00A6               	movwf	?_convert+2
  8380  1EE7  082F               	movf	convert@a+1,w
  8381  1EE8  00A5               	movwf	?_convert+1
  8382  1EE9  082E               	movf	convert@a,w
  8383  1EEA  00A4               	movwf	?_convert
  8384  1EEB  0008               	return
  8385  1EEC                     __end_of_convert:
  8386                           
  8387                           	psect	text30
  8388  1D35                     __ptext30:	
  8389 ;; *************** function ___lmul *****************
  8390 ;; Defined at:
  8391 ;;		line 15 in file "D:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\Umul32.c"
  8392 ;; Parameters:    Size  Location     Type
  8393 ;;  multiplier      4    2[COMMON] unsigned long 
  8394 ;;  multiplicand    4    6[COMMON] unsigned long 
  8395 ;; Auto vars:     Size  Location     Type
  8396 ;;  product         4    0[BANK0 ] unsigned long 
  8397 ;; Return value:  Size  Location     Type
  8398 ;;                  4    2[COMMON] unsigned long 
  8399 ;; Registers used:
  8400 ;;		wreg, status,2, status,0
  8401 ;; Tracked objects:
  8402 ;;		On entry : 300/0
  8403 ;;		On exit  : 300/0
  8404 ;;		Unchanged: 0/0
  8405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8406 ;;      Params:         8       0       0       0       0
  8407 ;;      Locals:         0       4       0       0       0
  8408 ;;      Temps:          1       0       0       0       0
  8409 ;;      Totals:         9       4       0       0       0
  8410 ;;Total ram usage:       13 bytes
  8411 ;; Hardware stack levels used:    1
  8412 ;; Hardware stack levels required when called:    1
  8413 ;; This function calls:
  8414 ;;		Nothing
  8415 ;; This function is called by:
  8416 ;;		_convert
  8417 ;; This function uses a non-reentrant model
  8418 ;;
  8419                           
  8420                           
  8421                           ;psect for function ___lmul
  8422  1D35                     ___lmul:
  8423                           
  8424                           ;incstack = 0
  8425                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  8426  1D35  3000               	movlw	0
  8427  1D36  00A3               	movwf	___lmul@product+3
  8428  1D37  3000               	movlw	0
  8429  1D38  00A2               	movwf	___lmul@product+2
  8430  1D39  3000               	movlw	0
  8431  1D3A  00A1               	movwf	___lmul@product+1
  8432  1D3B  3000               	movlw	0
  8433  1D3C  00A0               	movwf	___lmul@product
  8434  1D3D                     l2857:
  8435  1D3D  1C72               	btfss	___lmul@multiplier,0
  8436  1D3E  2D53               	goto	l2861
  8437  1D3F  0876               	movf	___lmul@multiplicand,w
  8438  1D40  07A0               	addwf	___lmul@product,f
  8439  1D41  0877               	movf	___lmul@multiplicand+1,w
  8440  1D42  1103               	clrz
  8441  1D43  1803               	skipnc
  8442  1D44  3E01               	addlw	1
  8443  1D45  1D03               	btfss	3,2
  8444  1D46  07A1               	addwf	___lmul@product+1,f
  8445  1D47  0878               	movf	___lmul@multiplicand+2,w
  8446  1D48  1103               	clrz
  8447  1D49  1803               	skipnc
  8448  1D4A  3E01               	addlw	1
  8449  1D4B  1D03               	btfss	3,2
  8450  1D4C  07A2               	addwf	___lmul@product+2,f
  8451  1D4D  0879               	movf	___lmul@multiplicand+3,w
  8452  1D4E  1103               	clrz
  8453  1D4F  1803               	skipnc
  8454  1D50  3E01               	addlw	1
  8455  1D51  1D03               	btfss	3,2
  8456  1D52  07A3               	addwf	___lmul@product+3,f
  8457  1D53                     l2861:
  8458  1D53  3001               	movlw	1
  8459  1D54  00FA               	movwf	??___lmul
  8460  1D55                     u3365:
  8461  1D55  1003               	clrc
  8462  1D56  0DF6               	rlf	___lmul@multiplicand,f
  8463  1D57  0DF7               	rlf	___lmul@multiplicand+1,f
  8464  1D58  0DF8               	rlf	___lmul@multiplicand+2,f
  8465  1D59  0DF9               	rlf	___lmul@multiplicand+3,f
  8466  1D5A  0BFA               	decfsz	??___lmul,f
  8467  1D5B  2D55               	goto	u3365
  8468  1D5C  3001               	movlw	1
  8469  1D5D                     u3375:
  8470  1D5D  1003               	clrc
  8471  1D5E  0CF5               	rrf	___lmul@multiplier+3,f
  8472  1D5F  0CF4               	rrf	___lmul@multiplier+2,f
  8473  1D60  0CF3               	rrf	___lmul@multiplier+1,f
  8474  1D61  0CF2               	rrf	___lmul@multiplier,f
  8475  1D62  3EFF               	addlw	-1
  8476  1D63  1D03               	skipz
  8477  1D64  2D5D               	goto	u3375
  8478  1D65  0875               	movf	___lmul@multiplier+3,w
  8479  1D66  0474               	iorwf	___lmul@multiplier+2,w
  8480  1D67  0473               	iorwf	___lmul@multiplier+1,w
  8481  1D68  0472               	iorwf	___lmul@multiplier,w
  8482  1D69  1D03               	skipz
  8483  1D6A  2D3D               	goto	l2857
  8484  1D6B  0823               	movf	___lmul@product+3,w
  8485  1D6C  00F5               	movwf	?___lmul+3
  8486  1D6D  0822               	movf	___lmul@product+2,w
  8487  1D6E  00F4               	movwf	?___lmul+2
  8488  1D6F  0821               	movf	___lmul@product+1,w
  8489  1D70  00F3               	movwf	?___lmul+1
  8490  1D71  0820               	movf	___lmul@product,w
  8491  1D72  00F2               	movwf	?___lmul
  8492  1D73  0008               	return
  8493  1D74                     __end_of___lmul:
  8494                           
  8495                           	psect	text31
  8496  1B84                     __ptext31:	
  8497 ;; *************** function ___wmul *****************
  8498 ;; Defined at:
  8499 ;;		line 15 in file "D:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\Umul16.c"
  8500 ;; Parameters:    Size  Location     Type
  8501 ;;  multiplier      2   18[BANK0 ] unsigned int 
  8502 ;;  multiplicand    2   20[BANK0 ] unsigned int 
  8503 ;; Auto vars:     Size  Location     Type
  8504 ;;  product         2   22[BANK0 ] unsigned int 
  8505 ;; Return value:  Size  Location     Type
  8506 ;;                  2   18[BANK0 ] unsigned int 
  8507 ;; Registers used:
  8508 ;;		wreg, status,2, status,0
  8509 ;; Tracked objects:
  8510 ;;		On entry : 300/0
  8511 ;;		On exit  : 300/0
  8512 ;;		Unchanged: 0/0
  8513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8514 ;;      Params:         0       4       0       0       0
  8515 ;;      Locals:         0       2       0       0       0
  8516 ;;      Temps:          0       0       0       0       0
  8517 ;;      Totals:         0       6       0       0       0
  8518 ;;Total ram usage:        6 bytes
  8519 ;; Hardware stack levels used:    1
  8520 ;; Hardware stack levels required when called:    1
  8521 ;; This function calls:
  8522 ;;		Nothing
  8523 ;; This function is called by:
  8524 ;;		_inputValue
  8525 ;;		_sprintf
  8526 ;; This function uses a non-reentrant model
  8527 ;;
  8528                           
  8529                           
  8530                           ;psect for function ___wmul
  8531  1B84                     ___wmul:
  8532                           
  8533                           ;incstack = 0
  8534                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  8535  1B84  01B6               	clrf	___wmul@product
  8536  1B85  01B7               	clrf	___wmul@product+1
  8537  1B86                     l2929:
  8538  1B86  1C32               	btfss	___wmul@multiplier,0
  8539  1B87  2B8E               	goto	l611
  8540  1B88  0834               	movf	___wmul@multiplicand,w
  8541  1B89  07B6               	addwf	___wmul@product,f
  8542  1B8A  1803               	skipnc
  8543  1B8B  0AB7               	incf	___wmul@product+1,f
  8544  1B8C  0835               	movf	___wmul@multiplicand+1,w
  8545  1B8D  07B7               	addwf	___wmul@product+1,f
  8546  1B8E                     l611:
  8547  1B8E  3001               	movlw	1
  8548  1B8F                     u3445:
  8549  1B8F  1003               	clrc
  8550  1B90  0DB4               	rlf	___wmul@multiplicand,f
  8551  1B91  0DB5               	rlf	___wmul@multiplicand+1,f
  8552  1B92  3EFF               	addlw	-1
  8553  1B93  1D03               	skipz
  8554  1B94  2B8F               	goto	u3445
  8555  1B95  3001               	movlw	1
  8556  1B96                     u3455:
  8557  1B96  1003               	clrc
  8558  1B97  0CB3               	rrf	___wmul@multiplier+1,f
  8559  1B98  0CB2               	rrf	___wmul@multiplier,f
  8560  1B99  3EFF               	addlw	-1
  8561  1B9A  1D03               	skipz
  8562  1B9B  2B96               	goto	u3455
  8563  1B9C  0832               	movf	___wmul@multiplier,w
  8564  1B9D  0433               	iorwf	___wmul@multiplier+1,w
  8565  1B9E  1D03               	btfss	3,2
  8566  1B9F  2B86               	goto	l2929
  8567  1BA0  0837               	movf	___wmul@product+1,w
  8568  1BA1  00B3               	movwf	?___wmul+1
  8569  1BA2  0836               	movf	___wmul@product,w
  8570  1BA3  00B2               	movwf	?___wmul
  8571  1BA4  0008               	return
  8572  1BA5                     __end_of___wmul:
  8573                           
  8574                           	psect	text32
  8575  1AA2                     __ptext32:	
  8576 ;; *************** function _UART_send_char *****************
  8577 ;; Defined at:
  8578 ;;		line 27 in file "uart.h"
  8579 ;; Parameters:    Size  Location     Type
  8580 ;;  bt              1    wreg     unsigned char 
  8581 ;; Auto vars:     Size  Location     Type
  8582 ;;  bt              1    2[COMMON] unsigned char 
  8583 ;; Return value:  Size  Location     Type
  8584 ;;                  1    wreg      void 
  8585 ;; Registers used:
  8586 ;;		wreg
  8587 ;; Tracked objects:
  8588 ;;		On entry : 300/0
  8589 ;;		On exit  : 300/0
  8590 ;;		Unchanged: 0/0
  8591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8592 ;;      Params:         0       0       0       0       0
  8593 ;;      Locals:         1       0       0       0       0
  8594 ;;      Temps:          0       0       0       0       0
  8595 ;;      Totals:         1       0       0       0       0
  8596 ;;Total ram usage:        1 bytes
  8597 ;; Hardware stack levels used:    1
  8598 ;; Hardware stack levels required when called:    1
  8599 ;; This function calls:
  8600 ;;		Nothing
  8601 ;; This function is called by:
  8602 ;;		_UART_send_string
  8603 ;;		_inputValue
  8604 ;; This function uses a non-reentrant model
  8605 ;;
  8606                           
  8607                           
  8608                           ;psect for function _UART_send_char
  8609  1AA2                     _UART_send_char:
  8610                           
  8611                           ;incstack = 0
  8612                           ; Regs used in _UART_send_char: [wreg]
  8613                           ;UART_send_char@bt stored from wreg
  8614  1AA2  00F2               	movwf	UART_send_char@bt
  8615  1AA3                     l146:	
  8616                           ;uart.h: 29: while(!TXIF);
  8617                           
  8618  1AA3  1E0C               	btfss	12,4	;volatile
  8619  1AA4  2AA3               	goto	l146
  8620                           
  8621                           ;uart.h: 30: TXREG = bt;
  8622  1AA5  0872               	movf	UART_send_char@bt,w
  8623  1AA6  0099               	movwf	25	;volatile
  8624  1AA7  0008               	return
  8625  1AA8                     __end_of_UART_send_char:
  8626                           
  8627                           	psect	text33
  8628  1CF7                     __ptext33:	
  8629 ;; *************** function _Lcd_Write_String *****************
  8630 ;; Defined at:
  8631 ;;		line 95 in file "lcd.h"
  8632 ;; Parameters:    Size  Location     Type
  8633 ;;  a               2    7[COMMON] PTR unsigned char 
  8634 ;;		 -> STR_13(13), STR_9(14), STR_8(12), str(20), 
  8635 ;;		 -> STR_6(12), STR_4(14), STR_3(14), STR_2(8), 
  8636 ;;		 -> STR_1(17), 
  8637 ;; Auto vars:     Size  Location     Type
  8638 ;;  i               2    9[COMMON] int 
  8639 ;; Return value:  Size  Location     Type
  8640 ;;                  1    wreg      void 
  8641 ;; Registers used:
  8642 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8643 ;; Tracked objects:
  8644 ;;		On entry : 200/100
  8645 ;;		On exit  : 300/0
  8646 ;;		Unchanged: 0/0
  8647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8648 ;;      Params:         2       0       0       0       0
  8649 ;;      Locals:         2       0       0       0       0
  8650 ;;      Temps:          0       3       0       0       0
  8651 ;;      Totals:         4       3       0       0       0
  8652 ;;Total ram usage:        7 bytes
  8653 ;; Hardware stack levels used:    1
  8654 ;; Hardware stack levels required when called:    3
  8655 ;; This function calls:
  8656 ;;		_Lcd_Write_Char
  8657 ;; This function is called by:
  8658 ;;		_Speed
  8659 ;;		_SwitchMode
  8660 ;;		_main
  8661 ;; This function uses a non-reentrant model
  8662 ;;
  8663                           
  8664                           
  8665                           ;psect for function _Lcd_Write_String
  8666  1CF7                     _Lcd_Write_String:
  8667                           
  8668                           ;lcd.h: 97: int i;;lcd.h: 98: for(i=0;a[i]!='\0';i++)
  8669                           
  8670                           ;incstack = 0
  8671                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8672  1CF7  01F9               	clrf	Lcd_Write_String@i
  8673  1CF8  01FA               	clrf	Lcd_Write_String@i+1
  8674  1CF9                     l4471:
  8675  1CF9  0879               	movf	Lcd_Write_String@i,w
  8676  1CFA  0777               	addwf	Lcd_Write_String@a,w
  8677  1CFB  1283               	bcf	3,5	;RP0=0, select bank0
  8678  1CFC  00A1               	movwf	??_Lcd_Write_String+1
  8679  1CFD  0878               	movf	Lcd_Write_String@a+1,w
  8680  1CFE  00A0               	movwf	??_Lcd_Write_String
  8681  1CFF  1803               	skipnc
  8682  1D00  0AA0               	incf	??_Lcd_Write_String,f
  8683  1D01  1BF9               	btfsc	Lcd_Write_String@i,7
  8684  1D02  03A0               	decf	??_Lcd_Write_String,f
  8685  1D03  1283               	bcf	3,5	;RP0=0, select bank0
  8686  1D04  1303               	bcf	3,6	;RP1=0, select bank0
  8687  1D05  0820               	movf	??_Lcd_Write_String,w
  8688  1D06  00A2               	movwf	??_Lcd_Write_String+2
  8689  1D07  0822               	movf	??_Lcd_Write_String+2,w
  8690  1D08  00FF               	movwf	127
  8691  1D09  0821               	movf	??_Lcd_Write_String+1,w
  8692  1D0A  0084               	movwf	4
  8693  1D0B  160A  118A  2000  160A  158A  	fcall	stringtab
  8694  1D10  3A00               	xorlw	0
  8695  1D11  1903               	btfsc	3,2
  8696  1D12  0008               	return
  8697                           
  8698                           ;lcd.h: 99: Lcd_Write_Char(a[i]);
  8699  1D13  0879               	movf	Lcd_Write_String@i,w
  8700  1D14  0777               	addwf	Lcd_Write_String@a,w
  8701  1D15  00A1               	movwf	??_Lcd_Write_String+1
  8702  1D16  0878               	movf	Lcd_Write_String@a+1,w
  8703  1D17  00A0               	movwf	??_Lcd_Write_String
  8704  1D18  1803               	skipnc
  8705  1D19  0AA0               	incf	??_Lcd_Write_String,f
  8706  1D1A  1BF9               	btfsc	Lcd_Write_String@i,7
  8707  1D1B  03A0               	decf	??_Lcd_Write_String,f
  8708  1D1C  1283               	bcf	3,5	;RP0=0, select bank0
  8709  1D1D  1303               	bcf	3,6	;RP1=0, select bank0
  8710  1D1E  0820               	movf	??_Lcd_Write_String,w
  8711  1D1F  00A2               	movwf	??_Lcd_Write_String+2
  8712  1D20  0822               	movf	??_Lcd_Write_String+2,w
  8713  1D21  00FF               	movwf	127
  8714  1D22  0821               	movf	??_Lcd_Write_String+1,w
  8715  1D23  0084               	movwf	4
  8716  1D24  160A  118A  2000  160A  158A  	fcall	stringtab
  8717  1D29  160A  158A  24C4  160A  158A  	fcall	_Lcd_Write_Char
  8718  1D2E  3001               	movlw	1
  8719  1D2F  07F9               	addwf	Lcd_Write_String@i,f
  8720  1D30  1803               	skipnc
  8721  1D31  0AFA               	incf	Lcd_Write_String@i+1,f
  8722  1D32  3000               	movlw	0
  8723  1D33  07FA               	addwf	Lcd_Write_String@i+1,f
  8724  1D34  2CF9               	goto	l4471
  8725  1D35                     __end_of_Lcd_Write_String:
  8726                           
  8727                           	psect	text34
  8728  1CC4                     __ptext34:	
  8729 ;; *************** function _Lcd_Write_Char *****************
  8730 ;; Defined at:
  8731 ;;		line 79 in file "lcd.h"
  8732 ;; Parameters:    Size  Location     Type
  8733 ;;  a               1    wreg     unsigned char 
  8734 ;; Auto vars:     Size  Location     Type
  8735 ;;  a               1    6[COMMON] unsigned char 
  8736 ;;  y               1    5[COMMON] unsigned char 
  8737 ;;  temp            1    4[COMMON] unsigned char 
  8738 ;; Return value:  Size  Location     Type
  8739 ;;                  1    wreg      void 
  8740 ;; Registers used:
  8741 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  8742 ;; Tracked objects:
  8743 ;;		On entry : 300/0
  8744 ;;		On exit  : 300/0
  8745 ;;		Unchanged: 0/0
  8746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8747 ;;      Params:         0       0       0       0       0
  8748 ;;      Locals:         3       0       0       0       0
  8749 ;;      Temps:          1       0       0       0       0
  8750 ;;      Totals:         4       0       0       0       0
  8751 ;;Total ram usage:        4 bytes
  8752 ;; Hardware stack levels used:    1
  8753 ;; Hardware stack levels required when called:    2
  8754 ;; This function calls:
  8755 ;;		_Lcd_Port
  8756 ;; This function is called by:
  8757 ;;		_Lcd_Write_String
  8758 ;;		_inputValue
  8759 ;; This function uses a non-reentrant model
  8760 ;;
  8761                           
  8762                           
  8763                           ;psect for function _Lcd_Write_Char
  8764  1CC4                     _Lcd_Write_Char:
  8765                           
  8766                           ;incstack = 0
  8767                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  8768                           ;Lcd_Write_Char@a stored from wreg
  8769  1CC4  00F6               	movwf	Lcd_Write_Char@a
  8770                           
  8771                           ;lcd.h: 81: char temp,y;;lcd.h: 82: temp = a&0x0F;
  8772  1CC5  0876               	movf	Lcd_Write_Char@a,w
  8773  1CC6  390F               	andlw	15
  8774  1CC7  00FF               	movwf	127
  8775  1CC8  087F               	movf	127,w
  8776  1CC9  00F4               	movwf	Lcd_Write_Char@temp
  8777                           
  8778                           ;lcd.h: 83: y = a&0xF0;
  8779  1CCA  0876               	movf	Lcd_Write_Char@a,w
  8780  1CCB  39F0               	andlw	240
  8781  1CCC  00FF               	movwf	127
  8782  1CCD  087F               	movf	127,w
  8783  1CCE  00F5               	movwf	Lcd_Write_Char@y
  8784                           
  8785                           ;lcd.h: 84: RD2 = 1;
  8786  1CCF  1508               	bsf	8,2	;volatile
  8787                           
  8788                           ;lcd.h: 85: Lcd_Port(y>>4);
  8789  1CD0  0875               	movf	Lcd_Write_Char@y,w
  8790  1CD1  00F3               	movwf	??_Lcd_Write_Char
  8791  1CD2  3004               	movlw	4
  8792  1CD3                     u5995:
  8793  1CD3  1003               	clrc
  8794  1CD4  0CF3               	rrf	??_Lcd_Write_Char,f
  8795  1CD5  3EFF               	addlw	-1
  8796  1CD6  1D03               	skipz
  8797  1CD7  2CD3               	goto	u5995
  8798  1CD8  0873               	movf	??_Lcd_Write_Char,w
  8799  1CD9  160A  158A  2333  160A  158A  	fcall	_Lcd_Port
  8800                           
  8801                           ;lcd.h: 86: RD3 = 1;
  8802  1CDE  1588               	bsf	8,3	;volatile
  8803                           
  8804                           ;lcd.h: 87: _delay((unsigned long)((40)*(20000000/4000000.0)));
  8805  1CDF  3042               	movlw	66
  8806  1CE0  00F3               	movwf	??_Lcd_Write_Char
  8807  1CE1                     u7877:
  8808  1CE1  0BF3               	decfsz	??_Lcd_Write_Char,f
  8809  1CE2  2CE1               	goto	u7877
  8810  1CE3  0000               	nop
  8811                           
  8812                           ;lcd.h: 88: RD3 = 0;
  8813  1CE4  1283               	bcf	3,5	;RP0=0, select bank0
  8814  1CE5  1303               	bcf	3,6	;RP1=0, select bank0
  8815  1CE6  1188               	bcf	8,3	;volatile
  8816                           
  8817                           ;lcd.h: 89: Lcd_Port(temp);
  8818  1CE7  0874               	movf	Lcd_Write_Char@temp,w
  8819  1CE8  160A  158A  2333  160A  158A  	fcall	_Lcd_Port
  8820                           
  8821                           ;lcd.h: 90: RD3 = 1;
  8822  1CED  1588               	bsf	8,3	;volatile
  8823                           
  8824                           ;lcd.h: 91: _delay((unsigned long)((40)*(20000000/4000000.0)));
  8825  1CEE  3042               	movlw	66
  8826  1CEF  00F3               	movwf	??_Lcd_Write_Char
  8827  1CF0                     u7887:
  8828  1CF0  0BF3               	decfsz	??_Lcd_Write_Char,f
  8829  1CF1  2CF0               	goto	u7887
  8830  1CF2  0000               	nop
  8831                           
  8832                           ;lcd.h: 92: RD3 = 0;
  8833  1CF3  1283               	bcf	3,5	;RP0=0, select bank0
  8834  1CF4  1303               	bcf	3,6	;RP1=0, select bank0
  8835  1CF5  1188               	bcf	8,3	;volatile
  8836  1CF6  0008               	return
  8837  1CF7                     __end_of_Lcd_Write_Char:
  8838                           
  8839                           	psect	text35
  8840  1DB6                     __ptext35:	
  8841 ;; *************** function _Lcd_Set_Cursor *****************
  8842 ;; Defined at:
  8843 ;;		line 39 in file "lcd.h"
  8844 ;; Parameters:    Size  Location     Type
  8845 ;;  a               1    wreg     unsigned char 
  8846 ;;  b               1    6[COMMON] unsigned char 
  8847 ;; Auto vars:     Size  Location     Type
  8848 ;;  a               1    0[BANK0 ] unsigned char 
  8849 ;;  temp            1    3[BANK0 ] unsigned char 
  8850 ;;  y               1    2[BANK0 ] unsigned char 
  8851 ;;  z               1    1[BANK0 ] unsigned char 
  8852 ;; Return value:  Size  Location     Type
  8853 ;;                  1    wreg      void 
  8854 ;; Registers used:
  8855 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  8856 ;; Tracked objects:
  8857 ;;		On entry : 300/0
  8858 ;;		On exit  : 300/0
  8859 ;;		Unchanged: 0/0
  8860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8861 ;;      Params:         1       0       0       0       0
  8862 ;;      Locals:         0       4       0       0       0
  8863 ;;      Temps:          1       0       0       0       0
  8864 ;;      Totals:         2       4       0       0       0
  8865 ;;Total ram usage:        6 bytes
  8866 ;; Hardware stack levels used:    1
  8867 ;; Hardware stack levels required when called:    3
  8868 ;; This function calls:
  8869 ;;		_Lcd_Cmd
  8870 ;; This function is called by:
  8871 ;;		_Speed
  8872 ;;		_SwitchMode
  8873 ;;		_main
  8874 ;; This function uses a non-reentrant model
  8875 ;;
  8876                           
  8877                           
  8878                           ;psect for function _Lcd_Set_Cursor
  8879  1DB6                     _Lcd_Set_Cursor:
  8880                           
  8881                           ;incstack = 0
  8882                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  8883                           ;Lcd_Set_Cursor@a stored from wreg
  8884  1DB6  00A0               	movwf	Lcd_Set_Cursor@a
  8885                           
  8886                           ;lcd.h: 41: char temp,z,y;;lcd.h: 42: if(a == 1)
  8887  1DB7  0320               	decf	Lcd_Set_Cursor@a,w
  8888  1DB8  1D03               	btfss	3,2
  8889  1DB9  2DDB               	goto	l4455
  8890                           
  8891                           ;lcd.h: 43: {;lcd.h: 44: temp = 0x80 + b - 1;
  8892  1DBA  0876               	movf	Lcd_Set_Cursor@b,w
  8893  1DBB  3E7F               	addlw	127
  8894  1DBC  00FF               	movwf	127
  8895  1DBD  087F               	movf	127,w
  8896  1DBE  00A3               	movwf	Lcd_Set_Cursor@temp
  8897                           
  8898                           ;lcd.h: 45: z = temp>>4;
  8899  1DBF  0823               	movf	Lcd_Set_Cursor@temp,w
  8900  1DC0  00F7               	movwf	??_Lcd_Set_Cursor
  8901  1DC1  3004               	movlw	4
  8902  1DC2                     u6135:
  8903  1DC2  1003               	clrc
  8904  1DC3  0CF7               	rrf	??_Lcd_Set_Cursor,f
  8905  1DC4  3EFF               	addlw	-1
  8906  1DC5  1D03               	skipz
  8907  1DC6  2DC2               	goto	u6135
  8908  1DC7  0877               	movf	??_Lcd_Set_Cursor,w
  8909  1DC8  00FF               	movwf	127
  8910  1DC9  087F               	movf	127,w
  8911  1DCA  00A1               	movwf	Lcd_Set_Cursor@z
  8912                           
  8913                           ;lcd.h: 46: y = temp & 0x0F;
  8914  1DCB  0823               	movf	Lcd_Set_Cursor@temp,w
  8915  1DCC  390F               	andlw	15
  8916  1DCD  00FF               	movwf	127
  8917  1DCE  087F               	movf	127,w
  8918  1DCF  00A2               	movwf	Lcd_Set_Cursor@y
  8919                           
  8920                           ;lcd.h: 47: Lcd_Cmd(z);
  8921  1DD0  0821               	movf	Lcd_Set_Cursor@z,w
  8922  1DD1  160A  158A  234B  160A  158A  	fcall	_Lcd_Cmd
  8923                           
  8924                           ;lcd.h: 48: Lcd_Cmd(y);
  8925  1DD6  0822               	movf	Lcd_Set_Cursor@y,w
  8926  1DD7  160A  158A  234B   	fcall	_Lcd_Cmd
  8927                           
  8928                           ;lcd.h: 49: }
  8929  1DDA  0008               	return
  8930  1DDB                     l4455:
  8931                           
  8932                           ;lcd.h: 50: else if(a == 2)
  8933  1DDB  3002               	movlw	2
  8934  1DDC  0620               	xorwf	Lcd_Set_Cursor@a,w
  8935  1DDD  1D03               	btfss	3,2
  8936  1DDE  0008               	return
  8937                           
  8938                           ;lcd.h: 51: {;lcd.h: 52: temp = 0xC0 + b - 1;
  8939  1DDF  0876               	movf	Lcd_Set_Cursor@b,w
  8940  1DE0  3EBF               	addlw	191
  8941  1DE1  00FF               	movwf	127
  8942  1DE2  087F               	movf	127,w
  8943  1DE3  00A3               	movwf	Lcd_Set_Cursor@temp
  8944                           
  8945                           ;lcd.h: 53: z = temp>>4;
  8946  1DE4  0823               	movf	Lcd_Set_Cursor@temp,w
  8947  1DE5  00F7               	movwf	??_Lcd_Set_Cursor
  8948  1DE6  3004               	movlw	4
  8949  1DE7                     u6155:
  8950  1DE7  1003               	clrc
  8951  1DE8  0CF7               	rrf	??_Lcd_Set_Cursor,f
  8952  1DE9  3EFF               	addlw	-1
  8953  1DEA  1D03               	skipz
  8954  1DEB  2DE7               	goto	u6155
  8955  1DEC  0877               	movf	??_Lcd_Set_Cursor,w
  8956  1DED  00FF               	movwf	127
  8957  1DEE  087F               	movf	127,w
  8958  1DEF  00A1               	movwf	Lcd_Set_Cursor@z
  8959                           
  8960                           ;lcd.h: 54: y = temp & 0x0F;
  8961  1DF0  0823               	movf	Lcd_Set_Cursor@temp,w
  8962  1DF1  390F               	andlw	15
  8963  1DF2  00FF               	movwf	127
  8964  1DF3  087F               	movf	127,w
  8965  1DF4  00A2               	movwf	Lcd_Set_Cursor@y
  8966                           
  8967                           ;lcd.h: 55: Lcd_Cmd(z);
  8968  1DF5  0821               	movf	Lcd_Set_Cursor@z,w
  8969  1DF6  160A  158A  234B  160A  158A  	fcall	_Lcd_Cmd
  8970                           
  8971                           ;lcd.h: 56: Lcd_Cmd(y);
  8972  1DFB  0822               	movf	Lcd_Set_Cursor@y,w
  8973  1DFC  160A  158A  234B   	fcall	_Lcd_Cmd
  8974  1DFF  0008               	return
  8975  1E00                     __end_of_Lcd_Set_Cursor:
  8976                           
  8977                           	psect	text36
  8978  1AC3                     __ptext36:	
  8979 ;; *************** function _Lcd_Clear *****************
  8980 ;; Defined at:
  8981 ;;		line 33 in file "lcd.h"
  8982 ;; Parameters:    Size  Location     Type
  8983 ;;		None
  8984 ;; Auto vars:     Size  Location     Type
  8985 ;;		None
  8986 ;; Return value:  Size  Location     Type
  8987 ;;                  2  285[None  ] int 
  8988 ;; Registers used:
  8989 ;;		wreg, status,2, status,0, pclath, cstack
  8990 ;; Tracked objects:
  8991 ;;		On entry : 0/100
  8992 ;;		On exit  : 300/0
  8993 ;;		Unchanged: 0/0
  8994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8995 ;;      Params:         0       0       0       0       0
  8996 ;;      Locals:         0       0       0       0       0
  8997 ;;      Temps:          0       0       0       0       0
  8998 ;;      Totals:         0       0       0       0       0
  8999 ;;Total ram usage:        0 bytes
  9000 ;; Hardware stack levels used:    1
  9001 ;; Hardware stack levels required when called:    3
  9002 ;; This function calls:
  9003 ;;		_Lcd_Cmd
  9004 ;; This function is called by:
  9005 ;;		_Speed
  9006 ;;		_SwitchMode
  9007 ;;		_main
  9008 ;; This function uses a non-reentrant model
  9009 ;;
  9010                           
  9011                           
  9012                           ;psect for function _Lcd_Clear
  9013  1AC3                     _Lcd_Clear:
  9014                           
  9015                           ;lcd.h: 35: Lcd_Cmd(0);
  9016                           
  9017                           ;incstack = 0
  9018                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  9019  1AC3  3000               	movlw	0
  9020  1AC4  160A  158A  234B  160A  158A  	fcall	_Lcd_Cmd
  9021                           
  9022                           ;lcd.h: 36: Lcd_Cmd(1);
  9023  1AC9  3001               	movlw	1
  9024  1ACA  160A  158A  234B   	fcall	_Lcd_Cmd
  9025  1ACD  0008               	return
  9026  1ACE                     __end_of_Lcd_Clear:
  9027                           
  9028                           	psect	text37
  9029  1AB4                     __ptext37:	
  9030 ;; *************** function _PWM1_start *****************
  9031 ;; Defined at:
  9032 ;;		line 46 in file "pwm.h"
  9033 ;; Parameters:    Size  Location     Type
  9034 ;;		None
  9035 ;; Auto vars:     Size  Location     Type
  9036 ;;		None
  9037 ;; Return value:  Size  Location     Type
  9038 ;;                  1    wreg      void 
  9039 ;; Registers used:
  9040 ;;		None
  9041 ;; Tracked objects:
  9042 ;;		On entry : 300/100
  9043 ;;		On exit  : 300/100
  9044 ;;		Unchanged: 0/0
  9045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9046 ;;      Params:         0       0       0       0       0
  9047 ;;      Locals:         0       0       0       0       0
  9048 ;;      Temps:          0       0       0       0       0
  9049 ;;      Totals:         0       0       0       0       0
  9050 ;;Total ram usage:        0 bytes
  9051 ;; Hardware stack levels used:    1
  9052 ;; Hardware stack levels required when called:    1
  9053 ;; This function calls:
  9054 ;;		Nothing
  9055 ;; This function is called by:
  9056 ;;		_main
  9057 ;; This function uses a non-reentrant model
  9058 ;;
  9059                           
  9060                           
  9061                           ;psect for function _PWM1_start
  9062  1AB4                     _PWM1_start:
  9063                           
  9064                           ;pwm.h: 48: CCP1CONbits.CCP1M3 = 1;
  9065                           
  9066                           ;incstack = 0
  9067                           ; Regs used in _PWM1_start: []
  9068  1AB4  1283               	bcf	3,5	;RP0=0, select bank0
  9069  1AB5  1597               	bsf	23,3	;volatile
  9070                           
  9071                           ;pwm.h: 49: CCP1CONbits.CCP1M2 = 1;
  9072  1AB6  1517               	bsf	23,2	;volatile
  9073                           
  9074                           ;pwm.h: 62: T2CONbits.TMR2ON = 1;
  9075  1AB7  1512               	bsf	18,2	;volatile
  9076                           
  9077                           ;pwm.h: 63: TRISC2 = 0;
  9078  1AB8  1683               	bsf	3,5	;RP0=1, select bank1
  9079  1AB9  1107               	bcf	7,2	;volatile
  9080  1ABA  0008               	return
  9081  1ABB                     __end_of_PWM1_start:
  9082                           
  9083                           	psect	text38
  9084  1D74                     __ptext38:	
  9085 ;; *************** function _PWM1_init *****************
  9086 ;; Defined at:
  9087 ;;		line 9 in file "pwm.h"
  9088 ;; Parameters:    Size  Location     Type
  9089 ;;  freq            4    6[BANK0 ] long 
  9090 ;; Auto vars:     Size  Location     Type
  9091 ;;		None
  9092 ;; Return value:  Size  Location     Type
  9093 ;;                  1    wreg      void 
  9094 ;; Registers used:
  9095 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  9096 ;; Tracked objects:
  9097 ;;		On entry : 300/0
  9098 ;;		On exit  : 300/100
  9099 ;;		Unchanged: 0/0
  9100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9101 ;;      Params:         0       4       0       0       0
  9102 ;;      Locals:         0       0       0       0       0
  9103 ;;      Temps:          0       4       0       0       0
  9104 ;;      Totals:         0       8       0       0       0
  9105 ;;Total ram usage:        8 bytes
  9106 ;; Hardware stack levels used:    1
  9107 ;; Hardware stack levels required when called:    2
  9108 ;; This function calls:
  9109 ;;		___aldiv
  9110 ;; This function is called by:
  9111 ;;		_main
  9112 ;; This function uses a non-reentrant model
  9113 ;;
  9114                           
  9115                           
  9116                           ;psect for function _PWM1_init
  9117  1D74                     _PWM1_init:
  9118                           
  9119                           ;pwm.h: 11: PR2 = (20000000/(freq*4*4)) - 1;
  9120                           
  9121                           ;incstack = 0
  9122                           ; Regs used in _PWM1_init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  9123  1D74  0826               	movf	PWM1_init@freq,w
  9124  1D75  00AA               	movwf	??_PWM1_init
  9125  1D76  0827               	movf	PWM1_init@freq+1,w
  9126  1D77  00AB               	movwf	??_PWM1_init+1
  9127  1D78  0828               	movf	PWM1_init@freq+2,w
  9128  1D79  00AC               	movwf	??_PWM1_init+2
  9129  1D7A  0829               	movf	PWM1_init@freq+3,w
  9130  1D7B  00AD               	movwf	??_PWM1_init+3
  9131  1D7C  3002               	movlw	2
  9132  1D7D                     u5265:
  9133  1D7D  1003               	clrc
  9134  1D7E  0DAA               	rlf	??_PWM1_init,f
  9135  1D7F  0DAB               	rlf	??_PWM1_init+1,f
  9136  1D80  0DAC               	rlf	??_PWM1_init+2,f
  9137  1D81  0DAD               	rlf	??_PWM1_init+3,f
  9138  1D82  3EFF               	addlw	-1
  9139  1D83  1D03               	skipz
  9140  1D84  2D7D               	goto	u5265
  9141  1D85  3002               	movlw	2
  9142  1D86                     u5275:
  9143  1D86  1003               	clrc
  9144  1D87  0DAA               	rlf	??_PWM1_init,f
  9145  1D88  0DAB               	rlf	??_PWM1_init+1,f
  9146  1D89  0DAC               	rlf	??_PWM1_init+2,f
  9147  1D8A  0DAD               	rlf	??_PWM1_init+3,f
  9148  1D8B  3EFF               	addlw	-1
  9149  1D8C  1D03               	skipz
  9150  1D8D  2D86               	goto	u5275
  9151  1D8E  082D               	movf	??_PWM1_init+3,w
  9152  1D8F  00F5               	movwf	___aldiv@divisor+3
  9153  1D90  082C               	movf	??_PWM1_init+2,w
  9154  1D91  00F4               	movwf	___aldiv@divisor+2
  9155  1D92  082B               	movf	??_PWM1_init+1,w
  9156  1D93  00F3               	movwf	___aldiv@divisor+1
  9157  1D94  082A               	movf	??_PWM1_init,w
  9158  1D95  00F2               	movwf	___aldiv@divisor
  9159  1D96  3001               	movlw	1
  9160  1D97  00F9               	movwf	___aldiv@dividend+3
  9161  1D98  3031               	movlw	49
  9162  1D99  00F8               	movwf	___aldiv@dividend+2
  9163  1D9A  302D               	movlw	45
  9164  1D9B  00F7               	movwf	___aldiv@dividend+1
  9165  1D9C  3000               	movlw	0
  9166  1D9D  00F6               	movwf	___aldiv@dividend
  9167  1D9E  160A  118A  236F   	fcall	___aldiv
  9168  1DA1  0872               	movf	?___aldiv,w
  9169  1DA2  3EFF               	addlw	255
  9170  1DA3  1683               	bsf	3,5	;RP0=1, select bank1
  9171  1DA4  0092               	movwf	18	;volatile
  9172                           
  9173                           ;pwm.h: 12: frequency = freq;
  9174  1DA5  1283               	bcf	3,5	;RP0=0, select bank0
  9175  1DA6  0829               	movf	PWM1_init@freq+3,w
  9176  1DA7  1683               	bsf	3,5	;RP0=1, select bank1
  9177  1DA8  00BC               	movwf	(_frequency+3)^(0+128)
  9178  1DA9  1283               	bcf	3,5	;RP0=0, select bank0
  9179  1DAA  0828               	movf	PWM1_init@freq+2,w
  9180  1DAB  1683               	bsf	3,5	;RP0=1, select bank1
  9181  1DAC  00BB               	movwf	(_frequency+2)^(0+128)
  9182  1DAD  1283               	bcf	3,5	;RP0=0, select bank0
  9183  1DAE  0827               	movf	PWM1_init@freq+1,w
  9184  1DAF  1683               	bsf	3,5	;RP0=1, select bank1
  9185  1DB0  00BA               	movwf	(_frequency+1)^(0+128)
  9186  1DB1  1283               	bcf	3,5	;RP0=0, select bank0
  9187  1DB2  0826               	movf	PWM1_init@freq,w
  9188  1DB3  1683               	bsf	3,5	;RP0=1, select bank1
  9189  1DB4  00B9               	movwf	_frequency^(0+128)
  9190  1DB5  0008               	return
  9191  1DB6                     __end_of_PWM1_init:
  9192                           
  9193                           	psect	text39
  9194  1494                     __ptext39:	
  9195 ;; *************** function _PWM1_Set_duty *****************
  9196 ;; Defined at:
  9197 ;;		line 21 in file "pwm.h"
  9198 ;; Parameters:    Size  Location     Type
  9199 ;;  duty            2   59[BANK0 ] unsigned int 
  9200 ;; Auto vars:     Size  Location     Type
  9201 ;;		None
  9202 ;; Return value:  Size  Location     Type
  9203 ;;                  1    wreg      void 
  9204 ;; Registers used:
  9205 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  9206 ;; Tracked objects:
  9207 ;;		On entry : 300/0
  9208 ;;		On exit  : 300/0
  9209 ;;		Unchanged: 0/0
  9210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9211 ;;      Params:         0       2       0       0       0
  9212 ;;      Locals:         0       0       0       0       0
  9213 ;;      Temps:          0       2       0       0       0
  9214 ;;      Totals:         0       4       0       0       0
  9215 ;;Total ram usage:        4 bytes
  9216 ;; Hardware stack levels used:    1
  9217 ;; Hardware stack levels required when called:    3
  9218 ;; This function calls:
  9219 ;;		_PWM_Max_Duty
  9220 ;;		___awtoft
  9221 ;;		___ftdiv
  9222 ;;		___ftmul
  9223 ;;		___fttol
  9224 ;;		___lwtoft
  9225 ;; This function is called by:
  9226 ;;		_main
  9227 ;; This function uses a non-reentrant model
  9228 ;;
  9229                           
  9230                           
  9231                           ;psect for function _PWM1_Set_duty
  9232  1494                     _PWM1_Set_duty:
  9233                           
  9234                           ;pwm.h: 23: duty = ((float)duty/100) * 1023;
  9235                           
  9236                           ;incstack = 0
  9237                           ; Regs used in _PWM1_Set_duty: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  9238  1494  085C               	movf	PWM1_Set_duty@duty+1,w
  9239  1495  00A1               	movwf	___lwtoft@c+1
  9240  1496  085B               	movf	PWM1_Set_duty@duty,w
  9241  1497  00A0               	movwf	___lwtoft@c
  9242  1498  160A  158A  231F  160A  118A  	fcall	___lwtoft
  9243  149D  0820               	movf	?___lwtoft,w
  9244  149E  00C2               	movwf	___ftdiv@f1
  9245  149F  0821               	movf	?___lwtoft+1,w
  9246  14A0  00C3               	movwf	___ftdiv@f1+1
  9247  14A1  0822               	movf	?___lwtoft+2,w
  9248  14A2  00C4               	movwf	___ftdiv@f1+2
  9249  14A3  3000               	movlw	0
  9250  14A4  00BF               	movwf	___ftdiv@f2
  9251  14A5  30C8               	movlw	200
  9252  14A6  00C0               	movwf	___ftdiv@f2+1
  9253  14A7  3042               	movlw	66
  9254  14A8  00C1               	movwf	___ftdiv@f2+2
  9255  14A9  160A  118A  23FC  160A  118A  	fcall	___ftdiv
  9256  14AE  083F               	movf	?___ftdiv,w
  9257  14AF  00B3               	movwf	___ftmul@f2
  9258  14B0  0840               	movf	?___ftdiv+1,w
  9259  14B1  00B4               	movwf	___ftmul@f2+1
  9260  14B2  0841               	movf	?___ftdiv+2,w
  9261  14B3  00B5               	movwf	___ftmul@f2+2
  9262  14B4  30C0               	movlw	192
  9263  14B5  00B0               	movwf	___ftmul@f1
  9264  14B6  307F               	movlw	127
  9265  14B7  00B1               	movwf	___ftmul@f1+1
  9266  14B8  3044               	movlw	68
  9267  14B9  00B2               	movwf	___ftmul@f1+2
  9268  14BA  120A  158A  2022  160A  118A  	fcall	___ftmul
  9269  14BF  0830               	movf	?___ftmul,w
  9270  14C0  00CE               	movwf	___fttol@f1
  9271  14C1  0831               	movf	?___ftmul+1,w
  9272  14C2  00CF               	movwf	___fttol@f1+1
  9273  14C3  0832               	movf	?___ftmul+2,w
  9274  14C4  00D0               	movwf	___fttol@f1+2
  9275  14C5  160A  118A  21F4  160A  118A  	fcall	___fttol
  9276  14CA  084F               	movf	?___fttol+1,w
  9277  14CB  00DC               	movwf	PWM1_Set_duty@duty+1
  9278  14CC  084E               	movf	?___fttol,w
  9279  14CD  00DB               	movwf	PWM1_Set_duty@duty
  9280                           
  9281                           ;pwm.h: 24: if(duty<1024)
  9282  14CE  3004               	movlw	4
  9283  14CF  025C               	subwf	PWM1_Set_duty@duty+1,w
  9284  14D0  3000               	movlw	0
  9285  14D1  1903               	skipnz
  9286  14D2  025B               	subwf	PWM1_Set_duty@duty,w
  9287  14D3  1803               	skipnc
  9288  14D4  0008               	return
  9289                           
  9290                           ;pwm.h: 25: {;pwm.h: 26: duty = ((float)duty/1023)*PWM_Max_Duty();
  9291  14D5  085C               	movf	PWM1_Set_duty@duty+1,w
  9292  14D6  00A1               	movwf	___lwtoft@c+1
  9293  14D7  085B               	movf	PWM1_Set_duty@duty,w
  9294  14D8  00A0               	movwf	___lwtoft@c
  9295  14D9  160A  158A  231F  160A  118A  	fcall	___lwtoft
  9296  14DE  0820               	movf	?___lwtoft,w
  9297  14DF  00C2               	movwf	___ftdiv@f1
  9298  14E0  0821               	movf	?___lwtoft+1,w
  9299  14E1  00C3               	movwf	___ftdiv@f1+1
  9300  14E2  0822               	movf	?___lwtoft+2,w
  9301  14E3  00C4               	movwf	___ftdiv@f1+2
  9302  14E4  30C0               	movlw	192
  9303  14E5  00BF               	movwf	___ftdiv@f2
  9304  14E6  307F               	movlw	127
  9305  14E7  00C0               	movwf	___ftdiv@f2+1
  9306  14E8  3044               	movlw	68
  9307  14E9  00C1               	movwf	___ftdiv@f2+2
  9308  14EA  160A  118A  23FC  160A  118A  	fcall	___ftdiv
  9309  14EF  083F               	movf	?___ftdiv,w
  9310  14F0  00B3               	movwf	___ftmul@f2
  9311  14F1  0840               	movf	?___ftdiv+1,w
  9312  14F2  00B4               	movwf	___ftmul@f2+1
  9313  14F3  0841               	movf	?___ftdiv+2,w
  9314  14F4  00B5               	movwf	___ftmul@f2+2
  9315  14F5  160A  158A  2493  160A  118A  	fcall	_PWM_Max_Duty
  9316  14FA  0827               	movf	?_PWM_Max_Duty+1,w
  9317  14FB  00AD               	movwf	___awtoft@c+1
  9318  14FC  0826               	movf	?_PWM_Max_Duty,w
  9319  14FD  00AC               	movwf	___awtoft@c
  9320  14FE  160A  158A  2363  160A  118A  	fcall	___awtoft
  9321  1503  082C               	movf	?___awtoft,w
  9322  1504  00B0               	movwf	___ftmul@f1
  9323  1505  082D               	movf	?___awtoft+1,w
  9324  1506  00B1               	movwf	___ftmul@f1+1
  9325  1507  082E               	movf	?___awtoft+2,w
  9326  1508  00B2               	movwf	___ftmul@f1+2
  9327  1509  120A  158A  2022  160A  118A  	fcall	___ftmul
  9328  150E  0830               	movf	?___ftmul,w
  9329  150F  00CE               	movwf	___fttol@f1
  9330  1510  0831               	movf	?___ftmul+1,w
  9331  1511  00CF               	movwf	___fttol@f1+1
  9332  1512  0832               	movf	?___ftmul+2,w
  9333  1513  00D0               	movwf	___fttol@f1+2
  9334  1514  160A  118A  21F4   	fcall	___fttol
  9335  1517  084F               	movf	?___fttol+1,w
  9336  1518  00DC               	movwf	PWM1_Set_duty@duty+1
  9337  1519  084E               	movf	?___fttol,w
  9338  151A  00DB               	movwf	PWM1_Set_duty@duty
  9339                           
  9340                           ;pwm.h: 27: CCP1CONbits.CCP1X = duty & 0x02;
  9341  151B  085B               	movf	PWM1_Set_duty@duty,w
  9342  151C  3902               	andlw	2
  9343  151D  00DD               	movwf	??_PWM1_Set_duty
  9344  151E  0EDD               	swapf	??_PWM1_Set_duty,f
  9345  151F  0DDD               	rlf	??_PWM1_Set_duty,f
  9346  1520  0817               	movf	23,w	;volatile
  9347  1521  065D               	xorwf	??_PWM1_Set_duty,w
  9348  1522  39DF               	andlw	-33
  9349  1523  065D               	xorwf	??_PWM1_Set_duty,w
  9350  1524  0097               	movwf	23	;volatile
  9351                           
  9352                           ;pwm.h: 28: CCP1CONbits.CCP1Y = duty & 0x01;
  9353  1525  085B               	movf	PWM1_Set_duty@duty,w
  9354  1526  3901               	andlw	1
  9355  1527  00DD               	movwf	??_PWM1_Set_duty
  9356  1528  0EDD               	swapf	??_PWM1_Set_duty,f
  9357  1529  0817               	movf	23,w	;volatile
  9358  152A  065D               	xorwf	??_PWM1_Set_duty,w
  9359  152B  39EF               	andlw	-17
  9360  152C  065D               	xorwf	??_PWM1_Set_duty,w
  9361  152D  0097               	movwf	23	;volatile
  9362                           
  9363                           ;pwm.h: 29: CCPR1L = duty>>0x02;
  9364  152E  085C               	movf	PWM1_Set_duty@duty+1,w
  9365  152F  00DE               	movwf	??_PWM1_Set_duty+1
  9366  1530  085B               	movf	PWM1_Set_duty@duty,w
  9367  1531  00DD               	movwf	??_PWM1_Set_duty
  9368  1532  1003               	clrc
  9369  1533  0CDE               	rrf	??_PWM1_Set_duty+1,f
  9370  1534  0CDD               	rrf	??_PWM1_Set_duty,f
  9371  1535  1003               	clrc
  9372  1536  0CDE               	rrf	??_PWM1_Set_duty+1,f
  9373  1537  0CDD               	rrf	??_PWM1_Set_duty,f
  9374  1538  085D               	movf	??_PWM1_Set_duty,w
  9375  1539  0095               	movwf	21	;volatile
  9376  153A  0008               	return
  9377  153B                     __end_of_PWM1_Set_duty:
  9378                           
  9379                           	psect	text40
  9380  1B1F                     __ptext40:	
  9381 ;; *************** function ___lwtoft *****************
  9382 ;; Defined at:
  9383 ;;		line 28 in file "D:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\lwtoft.c"
  9384 ;; Parameters:    Size  Location     Type
  9385 ;;  c               2    0[BANK0 ] unsigned int 
  9386 ;; Auto vars:     Size  Location     Type
  9387 ;;		None
  9388 ;; Return value:  Size  Location     Type
  9389 ;;                  3    0[BANK0 ] float 
  9390 ;; Registers used:
  9391 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  9392 ;; Tracked objects:
  9393 ;;		On entry : 300/0
  9394 ;;		On exit  : 300/0
  9395 ;;		Unchanged: 0/0
  9396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9397 ;;      Params:         0       3       0       0       0
  9398 ;;      Locals:         0       0       0       0       0
  9399 ;;      Temps:          0       0       0       0       0
  9400 ;;      Totals:         0       3       0       0       0
  9401 ;;Total ram usage:        3 bytes
  9402 ;; Hardware stack levels used:    1
  9403 ;; Hardware stack levels required when called:    2
  9404 ;; This function calls:
  9405 ;;		___ftpack
  9406 ;; This function is called by:
  9407 ;;		_PWM1_Set_duty
  9408 ;;		_main
  9409 ;; This function uses a non-reentrant model
  9410 ;;
  9411                           
  9412                           
  9413                           ;psect for function ___lwtoft
  9414  1B1F                     ___lwtoft:
  9415                           
  9416                           ;incstack = 0
  9417                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  9418  1B1F  0820               	movf	___lwtoft@c,w
  9419  1B20  00F2               	movwf	___ftpack@arg
  9420  1B21  0821               	movf	___lwtoft@c+1,w
  9421  1B22  00F3               	movwf	___ftpack@arg+1
  9422  1B23  01F4               	clrf	___ftpack@arg+2
  9423  1B24  308E               	movlw	142
  9424  1B25  00FF               	movwf	127
  9425  1B26  087F               	movf	127,w
  9426  1B27  00F5               	movwf	___ftpack@exp
  9427  1B28  01F6               	clrf	___ftpack@sign
  9428  1B29  160A  118A  2188   	fcall	___ftpack
  9429  1B2C  0872               	movf	?___ftpack,w
  9430  1B2D  00A0               	movwf	?___lwtoft
  9431  1B2E  0873               	movf	?___ftpack+1,w
  9432  1B2F  00A1               	movwf	?___lwtoft+1
  9433  1B30  0874               	movf	?___ftpack+2,w
  9434  1B31  00A2               	movwf	?___lwtoft+2
  9435  1B32  0008               	return
  9436  1B33                     __end_of___lwtoft:
  9437                           
  9438                           	psect	text41
  9439  11F4                     __ptext41:	
  9440 ;; *************** function ___fttol *****************
  9441 ;; Defined at:
  9442 ;;		line 44 in file "D:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\fttol.c"
  9443 ;; Parameters:    Size  Location     Type
  9444 ;;  f1              3   46[BANK0 ] float 
  9445 ;; Auto vars:     Size  Location     Type
  9446 ;;  lval            4   54[BANK0 ] unsigned long 
  9447 ;;  exp1            1   58[BANK0 ] unsigned char 
  9448 ;;  sign1           1   53[BANK0 ] unsigned char 
  9449 ;; Return value:  Size  Location     Type
  9450 ;;                  4   46[BANK0 ] long 
  9451 ;; Registers used:
  9452 ;;		wreg, status,2, status,0, btemp+1
  9453 ;; Tracked objects:
  9454 ;;		On entry : 300/0
  9455 ;;		On exit  : 300/0
  9456 ;;		Unchanged: 0/0
  9457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9458 ;;      Params:         0       4       0       0       0
  9459 ;;      Locals:         0       6       0       0       0
  9460 ;;      Temps:          0       3       0       0       0
  9461 ;;      Totals:         0      13       0       0       0
  9462 ;;Total ram usage:       13 bytes
  9463 ;; Hardware stack levels used:    1
  9464 ;; Hardware stack levels required when called:    1
  9465 ;; This function calls:
  9466 ;;		Nothing
  9467 ;; This function is called by:
  9468 ;;		_PWM1_Set_duty
  9469 ;;		_sprintf
  9470 ;; This function uses a non-reentrant model
  9471 ;;
  9472                           
  9473                           
  9474                           ;psect for function ___fttol
  9475  11F4                     ___fttol:
  9476                           
  9477                           ;incstack = 0
  9478                           ; Regs used in ___fttol: [wreg+status,2+status,0+btemp+1]
  9479  11F4  084E               	movf	___fttol@f1,w
  9480  11F5  00D2               	movwf	??___fttol
  9481  11F6  084F               	movf	___fttol@f1+1,w
  9482  11F7  00D3               	movwf	??___fttol+1
  9483  11F8  0850               	movf	___fttol@f1+2,w
  9484  11F9  00D4               	movwf	??___fttol+2
  9485  11FA  1003               	clrc
  9486  11FB  0D53               	rlf	??___fttol+1,w
  9487  11FC  0D54               	rlf	??___fttol+2,w
  9488  11FD  00FF               	movwf	127
  9489  11FE  087F               	movf	127,w
  9490  11FF  00DA               	movwf	___fttol@exp1
  9491  1200  085A               	movf	___fttol@exp1,w
  9492  1201  1D03               	btfss	3,2
  9493  1202  2A0C               	goto	l3785
  9494  1203                     l3781:
  9495  1203  3000               	movlw	0
  9496  1204  00D1               	movwf	?___fttol+3
  9497  1205  3000               	movlw	0
  9498  1206  00D0               	movwf	?___fttol+2
  9499  1207  3000               	movlw	0
  9500  1208  00CF               	movwf	?___fttol+1
  9501  1209  3000               	movlw	0
  9502  120A  00CE               	movwf	?___fttol
  9503  120B  0008               	return
  9504  120C                     l3785:
  9505  120C  084E               	movf	___fttol@f1,w
  9506  120D  00D2               	movwf	??___fttol
  9507  120E  084F               	movf	___fttol@f1+1,w
  9508  120F  00D3               	movwf	??___fttol+1
  9509  1210  0850               	movf	___fttol@f1+2,w
  9510  1211  00D4               	movwf	??___fttol+2
  9511  1212  3017               	movlw	23
  9512  1213                     u5095:
  9513  1213  1003               	clrc
  9514  1214  0CD4               	rrf	??___fttol+2,f
  9515  1215  0CD3               	rrf	??___fttol+1,f
  9516  1216  0CD2               	rrf	??___fttol,f
  9517  1217  3EFF               	addlw	-1
  9518  1218  1D03               	skipz
  9519  1219  2A13               	goto	u5095
  9520  121A  0852               	movf	??___fttol,w
  9521  121B  00FF               	movwf	127
  9522  121C  087F               	movf	127,w
  9523  121D  00D5               	movwf	___fttol@sign1
  9524  121E  17CF               	bsf	___fttol@f1+1,7
  9525  121F  30FF               	movlw	255
  9526  1220  05CE               	andwf	___fttol@f1,f
  9527  1221  30FF               	movlw	255
  9528  1222  05CF               	andwf	___fttol@f1+1,f
  9529  1223  3000               	movlw	0
  9530  1224  05D0               	andwf	___fttol@f1+2,f
  9531  1225  084E               	movf	___fttol@f1,w
  9532  1226  00D6               	movwf	___fttol@lval
  9533  1227  084F               	movf	___fttol@f1+1,w
  9534  1228  00D7               	movwf	___fttol@lval+1
  9535  1229  0850               	movf	___fttol@f1+2,w
  9536  122A  00D8               	movwf	___fttol@lval+2
  9537  122B  01D9               	clrf	___fttol@lval+3
  9538  122C  308E               	movlw	142
  9539  122D  02DA               	subwf	___fttol@exp1,f
  9540  122E  1FDA               	btfss	___fttol@exp1,7
  9541  122F  2A45               	goto	l3807
  9542  1230  085A               	movf	___fttol@exp1,w
  9543  1231  3A80               	xorlw	128
  9544  1232  3E8F               	addlw	143
  9545  1233  1C03               	btfss	3,0
  9546  1234  2A03               	goto	l3781
  9547  1235                     l3803:
  9548  1235  3001               	movlw	1
  9549  1236                     u5125:
  9550  1236  1003               	clrc
  9551  1237  0CD9               	rrf	___fttol@lval+3,f
  9552  1238  0CD8               	rrf	___fttol@lval+2,f
  9553  1239  0CD7               	rrf	___fttol@lval+1,f
  9554  123A  0CD6               	rrf	___fttol@lval,f
  9555  123B  3EFF               	addlw	-1
  9556  123C  1D03               	skipz
  9557  123D  2A36               	goto	u5125
  9558  123E  3001               	movlw	1
  9559  123F  00FF               	movwf	127
  9560  1240  087F               	movf	127,w
  9561  1241  07DA               	addwf	___fttol@exp1,f
  9562  1242  1903               	btfsc	3,2
  9563  1243  2A58               	goto	l3815
  9564  1244  2A35               	goto	l3803
  9565  1245                     l3807:
  9566  1245  3018               	movlw	24
  9567  1246  025A               	subwf	___fttol@exp1,w
  9568  1247  1803               	btfsc	3,0
  9569  1248  2A03               	goto	l3781
  9570  1249                     l948:
  9571  1249  085A               	movf	___fttol@exp1,w
  9572  124A  1903               	btfsc	3,2
  9573  124B  2A58               	goto	l3815
  9574  124C  3001               	movlw	1
  9575  124D  00D2               	movwf	??___fttol
  9576  124E                     u5155:
  9577  124E  1003               	clrc
  9578  124F  0DD6               	rlf	___fttol@lval,f
  9579  1250  0DD7               	rlf	___fttol@lval+1,f
  9580  1251  0DD8               	rlf	___fttol@lval+2,f
  9581  1252  0DD9               	rlf	___fttol@lval+3,f
  9582  1253  0BD2               	decfsz	??___fttol,f
  9583  1254  2A4E               	goto	u5155
  9584  1255  3001               	movlw	1
  9585  1256  02DA               	subwf	___fttol@exp1,f
  9586  1257  2A49               	goto	l948
  9587  1258                     l3815:
  9588  1258  0855               	movf	___fttol@sign1,w
  9589  1259  1903               	btfsc	3,2
  9590  125A  2A66               	goto	l3819
  9591  125B  09D6               	comf	___fttol@lval,f
  9592  125C  09D7               	comf	___fttol@lval+1,f
  9593  125D  09D8               	comf	___fttol@lval+2,f
  9594  125E  09D9               	comf	___fttol@lval+3,f
  9595  125F  0AD6               	incf	___fttol@lval,f
  9596  1260  1903               	skipnz
  9597  1261  0AD7               	incf	___fttol@lval+1,f
  9598  1262  1903               	skipnz
  9599  1263  0AD8               	incf	___fttol@lval+2,f
  9600  1264  1903               	skipnz
  9601  1265  0AD9               	incf	___fttol@lval+3,f
  9602  1266                     l3819:
  9603  1266  0859               	movf	___fttol@lval+3,w
  9604  1267  00D1               	movwf	?___fttol+3
  9605  1268  0858               	movf	___fttol@lval+2,w
  9606  1269  00D0               	movwf	?___fttol+2
  9607  126A  0857               	movf	___fttol@lval+1,w
  9608  126B  00CF               	movwf	?___fttol+1
  9609  126C  0856               	movf	___fttol@lval,w
  9610  126D  00CE               	movwf	?___fttol
  9611  126E  0008               	return
  9612  126F                     __end_of___fttol:
  9613                           
  9614                           	psect	text42
  9615  0822                     __ptext42:	
  9616 ;; *************** function ___ftmul *****************
  9617 ;; Defined at:
  9618 ;;		line 62 in file "D:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\ftmul.c"
  9619 ;; Parameters:    Size  Location     Type
  9620 ;;  f1              3   16[BANK0 ] float 
  9621 ;;  f2              3   19[BANK0 ] float 
  9622 ;; Auto vars:     Size  Location     Type
  9623 ;;  f3_as_produc    3   26[BANK0 ] unsigned um
  9624 ;;  sign            1   30[BANK0 ] unsigned char 
  9625 ;;  cntr            1   29[BANK0 ] unsigned char 
  9626 ;;  exp             1   25[BANK0 ] unsigned char 
  9627 ;; Return value:  Size  Location     Type
  9628 ;;                  3   16[BANK0 ] float 
  9629 ;; Registers used:
  9630 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  9631 ;; Tracked objects:
  9632 ;;		On entry : 300/0
  9633 ;;		On exit  : 300/0
  9634 ;;		Unchanged: 0/0
  9635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9636 ;;      Params:         0       6       0       0       0
  9637 ;;      Locals:         0       6       0       0       0
  9638 ;;      Temps:          0       3       0       0       0
  9639 ;;      Totals:         0      15       0       0       0
  9640 ;;Total ram usage:       15 bytes
  9641 ;; Hardware stack levels used:    1
  9642 ;; Hardware stack levels required when called:    2
  9643 ;; This function calls:
  9644 ;;		___ftpack
  9645 ;; This function is called by:
  9646 ;;		_PWM1_Set_duty
  9647 ;;		_main
  9648 ;;		_fround
  9649 ;;		_scale
  9650 ;;		_sprintf
  9651 ;; This function uses a non-reentrant model
  9652 ;;
  9653                           
  9654                           
  9655                           ;psect for function ___ftmul
  9656  0822                     ___ftmul:
  9657                           
  9658                           ;incstack = 0
  9659                           ; Regs used in ___ftmul: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  9660  0822  0830               	movf	___ftmul@f1,w
  9661  0823  00B6               	movwf	??___ftmul
  9662  0824  0831               	movf	___ftmul@f1+1,w
  9663  0825  00B7               	movwf	??___ftmul+1
  9664  0826  0832               	movf	___ftmul@f1+2,w
  9665  0827  00B8               	movwf	??___ftmul+2
  9666  0828  1003               	clrc
  9667  0829  0D37               	rlf	??___ftmul+1,w
  9668  082A  0D38               	rlf	??___ftmul+2,w
  9669  082B  00FF               	movwf	127
  9670  082C  087F               	movf	127,w
  9671  082D  00B9               	movwf	___ftmul@exp
  9672  082E  0839               	movf	___ftmul@exp,w
  9673  082F  1D03               	btfss	3,2
  9674  0830  2838               	goto	l4735
  9675  0831  3000               	movlw	0
  9676  0832  00B0               	movwf	?___ftmul
  9677  0833  3000               	movlw	0
  9678  0834  00B1               	movwf	?___ftmul+1
  9679  0835  3000               	movlw	0
  9680  0836  00B2               	movwf	?___ftmul+2
  9681  0837  0008               	return
  9682  0838                     l4735:
  9683  0838  0833               	movf	___ftmul@f2,w
  9684  0839  00B6               	movwf	??___ftmul
  9685  083A  0834               	movf	___ftmul@f2+1,w
  9686  083B  00B7               	movwf	??___ftmul+1
  9687  083C  0835               	movf	___ftmul@f2+2,w
  9688  083D  00B8               	movwf	??___ftmul+2
  9689  083E  1003               	clrc
  9690  083F  0D37               	rlf	??___ftmul+1,w
  9691  0840  0D38               	rlf	??___ftmul+2,w
  9692  0841  00FF               	movwf	127
  9693  0842  087F               	movf	127,w
  9694  0843  00BE               	movwf	___ftmul@sign
  9695  0844  083E               	movf	___ftmul@sign,w
  9696  0845  1D03               	btfss	3,2
  9697  0846  284E               	goto	l4741
  9698  0847  3000               	movlw	0
  9699  0848  00B0               	movwf	?___ftmul
  9700  0849  3000               	movlw	0
  9701  084A  00B1               	movwf	?___ftmul+1
  9702  084B  3000               	movlw	0
  9703  084C  00B2               	movwf	?___ftmul+2
  9704  084D  0008               	return
  9705  084E                     l4741:
  9706  084E  083E               	movf	___ftmul@sign,w
  9707  084F  3E7B               	addlw	123
  9708  0850  00FF               	movwf	127
  9709  0851  087F               	movf	127,w
  9710  0852  07B9               	addwf	___ftmul@exp,f
  9711  0853  0832               	movf	___ftmul@f1+2,w
  9712  0854  00FF               	movwf	127
  9713  0855  087F               	movf	127,w
  9714  0856  00BE               	movwf	___ftmul@sign
  9715  0857  0835               	movf	___ftmul@f2+2,w
  9716  0858  00FF               	movwf	127
  9717  0859  087F               	movf	127,w
  9718  085A  06BE               	xorwf	___ftmul@sign,f
  9719  085B  3080               	movlw	128
  9720  085C  00FF               	movwf	127
  9721  085D  087F               	movf	127,w
  9722  085E  05BE               	andwf	___ftmul@sign,f
  9723  085F  17B1               	bsf	___ftmul@f1+1,7
  9724  0860  17B4               	bsf	___ftmul@f2+1,7
  9725  0861  30FF               	movlw	255
  9726  0862  05B3               	andwf	___ftmul@f2,f
  9727  0863  30FF               	movlw	255
  9728  0864  05B4               	andwf	___ftmul@f2+1,f
  9729  0865  3000               	movlw	0
  9730  0866  05B5               	andwf	___ftmul@f2+2,f
  9731  0867  3000               	movlw	0
  9732  0868  00BA               	movwf	___ftmul@f3_as_product
  9733  0869  3000               	movlw	0
  9734  086A  00BB               	movwf	___ftmul@f3_as_product+1
  9735  086B  3000               	movlw	0
  9736  086C  00BC               	movwf	___ftmul@f3_as_product+2
  9737  086D  3007               	movlw	7
  9738  086E  00FF               	movwf	127
  9739  086F  087F               	movf	127,w
  9740  0870  00BD               	movwf	___ftmul@cntr
  9741  0871                     l4759:
  9742  0871  1C30               	btfss	___ftmul@f1,0
  9743  0872  2881               	goto	l4763
  9744  0873  0833               	movf	___ftmul@f2,w
  9745  0874  07BA               	addwf	___ftmul@f3_as_product,f
  9746  0875  0834               	movf	___ftmul@f2+1,w
  9747  0876  1103               	clrz
  9748  0877  1803               	skipnc
  9749  0878  0A34               	incf	___ftmul@f2+1,w
  9750  0879  1D03               	btfss	3,2
  9751  087A  07BB               	addwf	___ftmul@f3_as_product+1,f
  9752  087B  0835               	movf	___ftmul@f2+2,w
  9753  087C  1103               	clrz
  9754  087D  1803               	skipnc
  9755  087E  0A35               	incf	___ftmul@f2+2,w
  9756  087F  1D03               	btfss	3,2
  9757  0880  07BC               	addwf	___ftmul@f3_as_product+2,f
  9758  0881                     l4763:
  9759  0881  3001               	movlw	1
  9760  0882                     u6715:
  9761  0882  1003               	clrc
  9762  0883  0CB2               	rrf	___ftmul@f1+2,f
  9763  0884  0CB1               	rrf	___ftmul@f1+1,f
  9764  0885  0CB0               	rrf	___ftmul@f1,f
  9765  0886  3EFF               	addlw	-1
  9766  0887  1D03               	skipz
  9767  0888  2882               	goto	u6715
  9768  0889  3001               	movlw	1
  9769  088A                     u6725:
  9770  088A  1003               	clrc
  9771  088B  0DB3               	rlf	___ftmul@f2,f
  9772  088C  0DB4               	rlf	___ftmul@f2+1,f
  9773  088D  0DB5               	rlf	___ftmul@f2+2,f
  9774  088E  3EFF               	addlw	-1
  9775  088F  1D03               	skipz
  9776  0890  288A               	goto	u6725
  9777  0891  3001               	movlw	1
  9778  0892  02BD               	subwf	___ftmul@cntr,f
  9779  0893  1D03               	btfss	3,2
  9780  0894  2871               	goto	l4759
  9781  0895  3009               	movlw	9
  9782  0896  00FF               	movwf	127
  9783  0897  087F               	movf	127,w
  9784  0898  00BD               	movwf	___ftmul@cntr
  9785  0899                     l4771:
  9786  0899  1C30               	btfss	___ftmul@f1,0
  9787  089A  28A9               	goto	l4775
  9788  089B  0833               	movf	___ftmul@f2,w
  9789  089C  07BA               	addwf	___ftmul@f3_as_product,f
  9790  089D  0834               	movf	___ftmul@f2+1,w
  9791  089E  1103               	clrz
  9792  089F  1803               	skipnc
  9793  08A0  0A34               	incf	___ftmul@f2+1,w
  9794  08A1  1D03               	btfss	3,2
  9795  08A2  07BB               	addwf	___ftmul@f3_as_product+1,f
  9796  08A3  0835               	movf	___ftmul@f2+2,w
  9797  08A4  1103               	clrz
  9798  08A5  1803               	skipnc
  9799  08A6  0A35               	incf	___ftmul@f2+2,w
  9800  08A7  1D03               	btfss	3,2
  9801  08A8  07BC               	addwf	___ftmul@f3_as_product+2,f
  9802  08A9                     l4775:
  9803  08A9  3001               	movlw	1
  9804  08AA                     u6765:
  9805  08AA  1003               	clrc
  9806  08AB  0CB2               	rrf	___ftmul@f1+2,f
  9807  08AC  0CB1               	rrf	___ftmul@f1+1,f
  9808  08AD  0CB0               	rrf	___ftmul@f1,f
  9809  08AE  3EFF               	addlw	-1
  9810  08AF  1D03               	skipz
  9811  08B0  28AA               	goto	u6765
  9812  08B1  3001               	movlw	1
  9813  08B2                     u6775:
  9814  08B2  1003               	clrc
  9815  08B3  0CBC               	rrf	___ftmul@f3_as_product+2,f
  9816  08B4  0CBB               	rrf	___ftmul@f3_as_product+1,f
  9817  08B5  0CBA               	rrf	___ftmul@f3_as_product,f
  9818  08B6  3EFF               	addlw	-1
  9819  08B7  1D03               	skipz
  9820  08B8  28B2               	goto	u6775
  9821  08B9  3001               	movlw	1
  9822  08BA  02BD               	subwf	___ftmul@cntr,f
  9823  08BB  1D03               	btfss	3,2
  9824  08BC  2899               	goto	l4771
  9825  08BD  083A               	movf	___ftmul@f3_as_product,w
  9826  08BE  00F2               	movwf	___ftpack@arg
  9827  08BF  083B               	movf	___ftmul@f3_as_product+1,w
  9828  08C0  00F3               	movwf	___ftpack@arg+1
  9829  08C1  083C               	movf	___ftmul@f3_as_product+2,w
  9830  08C2  00F4               	movwf	___ftpack@arg+2
  9831  08C3  0839               	movf	___ftmul@exp,w
  9832  08C4  00FF               	movwf	127
  9833  08C5  087F               	movf	127,w
  9834  08C6  00F5               	movwf	___ftpack@exp
  9835  08C7  083E               	movf	___ftmul@sign,w
  9836  08C8  00FF               	movwf	127
  9837  08C9  087F               	movf	127,w
  9838  08CA  00F6               	movwf	___ftpack@sign
  9839  08CB  160A  118A  2188   	fcall	___ftpack
  9840  08CE  0872               	movf	?___ftpack,w
  9841  08CF  00B0               	movwf	?___ftmul
  9842  08D0  0873               	movf	?___ftpack+1,w
  9843  08D1  00B1               	movwf	?___ftmul+1
  9844  08D2  0874               	movf	?___ftpack+2,w
  9845  08D3  00B2               	movwf	?___ftmul+2
  9846  08D4  0008               	return
  9847  08D5                     __end_of___ftmul:
  9848                           
  9849                           	psect	text43
  9850  13FC                     __ptext43:	
  9851 ;; *************** function ___ftdiv *****************
  9852 ;; Defined at:
  9853 ;;		line 56 in file "D:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\ftdiv.c"
  9854 ;; Parameters:    Size  Location     Type
  9855 ;;  f2              3   31[BANK0 ] float 
  9856 ;;  f1              3   34[BANK0 ] float 
  9857 ;; Auto vars:     Size  Location     Type
  9858 ;;  f3              3   41[BANK0 ] float 
  9859 ;;  sign            1   45[BANK0 ] unsigned char 
  9860 ;;  exp             1   44[BANK0 ] unsigned char 
  9861 ;;  cntr            1   40[BANK0 ] unsigned char 
  9862 ;; Return value:  Size  Location     Type
  9863 ;;                  3   31[BANK0 ] float 
  9864 ;; Registers used:
  9865 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  9866 ;; Tracked objects:
  9867 ;;		On entry : 300/0
  9868 ;;		On exit  : 300/0
  9869 ;;		Unchanged: 0/0
  9870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9871 ;;      Params:         0       6       0       0       0
  9872 ;;      Locals:         0       6       0       0       0
  9873 ;;      Temps:          0       3       0       0       0
  9874 ;;      Totals:         0      15       0       0       0
  9875 ;;Total ram usage:       15 bytes
  9876 ;; Hardware stack levels used:    1
  9877 ;; Hardware stack levels required when called:    2
  9878 ;; This function calls:
  9879 ;;		___ftpack
  9880 ;; This function is called by:
  9881 ;;		_PWM1_Set_duty
  9882 ;;		_main
  9883 ;; This function uses a non-reentrant model
  9884 ;;
  9885                           
  9886                           
  9887                           ;psect for function ___ftdiv
  9888  13FC                     ___ftdiv:
  9889                           
  9890                           ;incstack = 0
  9891                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  9892  13FC  0842               	movf	___ftdiv@f1,w
  9893  13FD  00C5               	movwf	??___ftdiv
  9894  13FE  0843               	movf	___ftdiv@f1+1,w
  9895  13FF  00C6               	movwf	??___ftdiv+1
  9896  1400  0844               	movf	___ftdiv@f1+2,w
  9897  1401  00C7               	movwf	??___ftdiv+2
  9898  1402  1003               	clrc
  9899  1403  0D46               	rlf	??___ftdiv+1,w
  9900  1404  0D47               	rlf	??___ftdiv+2,w
  9901  1405  00FF               	movwf	127
  9902  1406  087F               	movf	127,w
  9903  1407  00CC               	movwf	___ftdiv@exp
  9904  1408  084C               	movf	___ftdiv@exp,w
  9905  1409  1D03               	btfss	3,2
  9906  140A  2C12               	goto	l4917
  9907  140B  3000               	movlw	0
  9908  140C  00BF               	movwf	?___ftdiv
  9909  140D  3000               	movlw	0
  9910  140E  00C0               	movwf	?___ftdiv+1
  9911  140F  3000               	movlw	0
  9912  1410  00C1               	movwf	?___ftdiv+2
  9913  1411  0008               	return
  9914  1412                     l4917:
  9915  1412  083F               	movf	___ftdiv@f2,w
  9916  1413  00C5               	movwf	??___ftdiv
  9917  1414  0840               	movf	___ftdiv@f2+1,w
  9918  1415  00C6               	movwf	??___ftdiv+1
  9919  1416  0841               	movf	___ftdiv@f2+2,w
  9920  1417  00C7               	movwf	??___ftdiv+2
  9921  1418  1003               	clrc
  9922  1419  0D46               	rlf	??___ftdiv+1,w
  9923  141A  0D47               	rlf	??___ftdiv+2,w
  9924  141B  00FF               	movwf	127
  9925  141C  087F               	movf	127,w
  9926  141D  00CD               	movwf	___ftdiv@sign
  9927  141E  084D               	movf	___ftdiv@sign,w
  9928  141F  1D03               	btfss	3,2
  9929  1420  2C28               	goto	l4923
  9930  1421  3000               	movlw	0
  9931  1422  00BF               	movwf	?___ftdiv
  9932  1423  3000               	movlw	0
  9933  1424  00C0               	movwf	?___ftdiv+1
  9934  1425  3000               	movlw	0
  9935  1426  00C1               	movwf	?___ftdiv+2
  9936  1427  0008               	return
  9937  1428                     l4923:
  9938  1428  3000               	movlw	0
  9939  1429  00C9               	movwf	___ftdiv@f3
  9940  142A  3000               	movlw	0
  9941  142B  00CA               	movwf	___ftdiv@f3+1
  9942  142C  3000               	movlw	0
  9943  142D  00CB               	movwf	___ftdiv@f3+2
  9944  142E  3089               	movlw	137
  9945  142F  074D               	addwf	___ftdiv@sign,w
  9946  1430  00C5               	movwf	??___ftdiv
  9947  1431  0845               	movf	??___ftdiv,w
  9948  1432  02CC               	subwf	___ftdiv@exp,f
  9949  1433  0844               	movf	___ftdiv@f1+2,w
  9950  1434  00FF               	movwf	127
  9951  1435  087F               	movf	127,w
  9952  1436  00CD               	movwf	___ftdiv@sign
  9953  1437  0841               	movf	___ftdiv@f2+2,w
  9954  1438  00FF               	movwf	127
  9955  1439  087F               	movf	127,w
  9956  143A  06CD               	xorwf	___ftdiv@sign,f
  9957  143B  3080               	movlw	128
  9958  143C  00FF               	movwf	127
  9959  143D  087F               	movf	127,w
  9960  143E  05CD               	andwf	___ftdiv@sign,f
  9961  143F  17C3               	bsf	___ftdiv@f1+1,7
  9962  1440  30FF               	movlw	255
  9963  1441  05C2               	andwf	___ftdiv@f1,f
  9964  1442  30FF               	movlw	255
  9965  1443  05C3               	andwf	___ftdiv@f1+1,f
  9966  1444  3000               	movlw	0
  9967  1445  05C4               	andwf	___ftdiv@f1+2,f
  9968  1446  17C0               	bsf	___ftdiv@f2+1,7
  9969  1447  30FF               	movlw	255
  9970  1448  05BF               	andwf	___ftdiv@f2,f
  9971  1449  30FF               	movlw	255
  9972  144A  05C0               	andwf	___ftdiv@f2+1,f
  9973  144B  3000               	movlw	0
  9974  144C  05C1               	andwf	___ftdiv@f2+2,f
  9975  144D  3018               	movlw	24
  9976  144E  00FF               	movwf	127
  9977  144F  087F               	movf	127,w
  9978  1450  00C8               	movwf	___ftdiv@cntr
  9979  1451                     l4939:
  9980  1451  3001               	movlw	1
  9981  1452                     u6945:
  9982  1452  1003               	clrc
  9983  1453  0DC9               	rlf	___ftdiv@f3,f
  9984  1454  0DCA               	rlf	___ftdiv@f3+1,f
  9985  1455  0DCB               	rlf	___ftdiv@f3+2,f
  9986  1456  3EFF               	addlw	-1
  9987  1457  1D03               	skipz
  9988  1458  2C52               	goto	u6945
  9989  1459  0841               	movf	___ftdiv@f2+2,w
  9990  145A  0244               	subwf	___ftdiv@f1+2,w
  9991  145B  1D03               	skipz
  9992  145C  2C63               	goto	u6955
  9993  145D  0840               	movf	___ftdiv@f2+1,w
  9994  145E  0243               	subwf	___ftdiv@f1+1,w
  9995  145F  1D03               	skipz
  9996  1460  2C63               	goto	u6955
  9997  1461  083F               	movf	___ftdiv@f2,w
  9998  1462  0242               	subwf	___ftdiv@f1,w
  9999  1463                     u6955:
 10000  1463  1C03               	skipc
 10001  1464  2C70               	goto	l4945
 10002  1465  083F               	movf	___ftdiv@f2,w
 10003  1466  02C2               	subwf	___ftdiv@f1,f
 10004  1467  0840               	movf	___ftdiv@f2+1,w
 10005  1468  1C03               	skipc
 10006  1469  0F40               	incfsz	___ftdiv@f2+1,w
 10007  146A  02C3               	subwf	___ftdiv@f1+1,f
 10008  146B  0841               	movf	___ftdiv@f2+2,w
 10009  146C  1C03               	skipc
 10010  146D  0A41               	incf	___ftdiv@f2+2,w
 10011  146E  02C4               	subwf	___ftdiv@f1+2,f
 10012  146F  1449               	bsf	___ftdiv@f3,0
 10013  1470                     l4945:
 10014  1470  3001               	movlw	1
 10015  1471                     u6965:
 10016  1471  1003               	clrc
 10017  1472  0DC2               	rlf	___ftdiv@f1,f
 10018  1473  0DC3               	rlf	___ftdiv@f1+1,f
 10019  1474  0DC4               	rlf	___ftdiv@f1+2,f
 10020  1475  3EFF               	addlw	-1
 10021  1476  1D03               	skipz
 10022  1477  2C71               	goto	u6965
 10023  1478  3001               	movlw	1
 10024  1479  02C8               	subwf	___ftdiv@cntr,f
 10025  147A  1D03               	btfss	3,2
 10026  147B  2C51               	goto	l4939
 10027  147C  0849               	movf	___ftdiv@f3,w
 10028  147D  00F2               	movwf	___ftpack@arg
 10029  147E  084A               	movf	___ftdiv@f3+1,w
 10030  147F  00F3               	movwf	___ftpack@arg+1
 10031  1480  084B               	movf	___ftdiv@f3+2,w
 10032  1481  00F4               	movwf	___ftpack@arg+2
 10033  1482  084C               	movf	___ftdiv@exp,w
 10034  1483  00FF               	movwf	127
 10035  1484  087F               	movf	127,w
 10036  1485  00F5               	movwf	___ftpack@exp
 10037  1486  084D               	movf	___ftdiv@sign,w
 10038  1487  00FF               	movwf	127
 10039  1488  087F               	movf	127,w
 10040  1489  00F6               	movwf	___ftpack@sign
 10041  148A  160A  118A  2188   	fcall	___ftpack
 10042  148D  0872               	movf	?___ftpack,w
 10043  148E  00BF               	movwf	?___ftdiv
 10044  148F  0873               	movf	?___ftpack+1,w
 10045  1490  00C0               	movwf	?___ftdiv+1
 10046  1491  0874               	movf	?___ftpack+2,w
 10047  1492  00C1               	movwf	?___ftdiv+2
 10048  1493  0008               	return
 10049  1494                     __end_of___ftdiv:
 10050                           
 10051                           	psect	text44
 10052  1B63                     __ptext44:	
 10053 ;; *************** function ___awtoft *****************
 10054 ;; Defined at:
 10055 ;;		line 32 in file "D:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\awtoft.c"
 10056 ;; Parameters:    Size  Location     Type
 10057 ;;  c               2   12[BANK0 ] int 
 10058 ;; Auto vars:     Size  Location     Type
 10059 ;;  sign            1   15[BANK0 ] unsigned char 
 10060 ;; Return value:  Size  Location     Type
 10061 ;;                  3   12[BANK0 ] float 
 10062 ;; Registers used:
 10063 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
 10064 ;; Tracked objects:
 10065 ;;		On entry : 300/0
 10066 ;;		On exit  : 300/0
 10067 ;;		Unchanged: 0/0
 10068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10069 ;;      Params:         0       3       0       0       0
 10070 ;;      Locals:         0       1       0       0       0
 10071 ;;      Temps:          0       0       0       0       0
 10072 ;;      Totals:         0       4       0       0       0
 10073 ;;Total ram usage:        4 bytes
 10074 ;; Hardware stack levels used:    1
 10075 ;; Hardware stack levels required when called:    2
 10076 ;; This function calls:
 10077 ;;		___ftpack
 10078 ;; This function is called by:
 10079 ;;		_PWM1_Set_duty
 10080 ;; This function uses a non-reentrant model
 10081 ;;
 10082                           
 10083                           
 10084                           ;psect for function ___awtoft
 10085  1B63                     ___awtoft:
 10086                           
 10087                           ;incstack = 0
 10088                           ; Regs used in ___awtoft: [wreg+status,2+status,0+btemp+1+pclath+cstack]
 10089  1B63  01AF               	clrf	___awtoft@sign
 10090  1B64  1FAD               	btfss	___awtoft@c+1,7
 10091  1B65  2B6D               	goto	l4907
 10092  1B66  09AC               	comf	___awtoft@c,f
 10093  1B67  09AD               	comf	___awtoft@c+1,f
 10094  1B68  0AAC               	incf	___awtoft@c,f
 10095  1B69  1903               	skipnz
 10096  1B6A  0AAD               	incf	___awtoft@c+1,f
 10097  1B6B  01AF               	clrf	___awtoft@sign
 10098  1B6C  0AAF               	incf	___awtoft@sign,f
 10099  1B6D                     l4907:
 10100  1B6D  082C               	movf	___awtoft@c,w
 10101  1B6E  00F2               	movwf	___ftpack@arg
 10102  1B6F  082D               	movf	___awtoft@c+1,w
 10103  1B70  00F3               	movwf	___ftpack@arg+1
 10104  1B71  01F4               	clrf	___ftpack@arg+2
 10105  1B72  308E               	movlw	142
 10106  1B73  00FF               	movwf	127
 10107  1B74  087F               	movf	127,w
 10108  1B75  00F5               	movwf	___ftpack@exp
 10109  1B76  082F               	movf	___awtoft@sign,w
 10110  1B77  00FF               	movwf	127
 10111  1B78  087F               	movf	127,w
 10112  1B79  00F6               	movwf	___ftpack@sign
 10113  1B7A  160A  118A  2188   	fcall	___ftpack
 10114  1B7D  0872               	movf	?___ftpack,w
 10115  1B7E  00AC               	movwf	?___awtoft
 10116  1B7F  0873               	movf	?___ftpack+1,w
 10117  1B80  00AD               	movwf	?___awtoft+1
 10118  1B81  0874               	movf	?___ftpack+2,w
 10119  1B82  00AE               	movwf	?___awtoft+2
 10120  1B83  0008               	return
 10121  1B84                     __end_of___awtoft:
 10122                           
 10123                           	psect	text45
 10124  1188                     __ptext45:	
 10125 ;; *************** function ___ftpack *****************
 10126 ;; Defined at:
 10127 ;;		line 62 in file "D:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\float.c"
 10128 ;; Parameters:    Size  Location     Type
 10129 ;;  arg             3    2[COMMON] unsigned um
 10130 ;;  exp             1    5[COMMON] unsigned char 
 10131 ;;  sign            1    6[COMMON] unsigned char 
 10132 ;; Auto vars:     Size  Location     Type
 10133 ;;		None
 10134 ;; Return value:  Size  Location     Type
 10135 ;;                  3    2[COMMON] float 
 10136 ;; Registers used:
 10137 ;;		wreg, status,2, status,0, btemp+1
 10138 ;; Tracked objects:
 10139 ;;		On entry : 300/0
 10140 ;;		On exit  : 300/0
 10141 ;;		Unchanged: 300/0
 10142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10143 ;;      Params:         5       0       0       0       0
 10144 ;;      Locals:         0       0       0       0       0
 10145 ;;      Temps:          3       0       0       0       0
 10146 ;;      Totals:         8       0       0       0       0
 10147 ;;Total ram usage:        8 bytes
 10148 ;; Hardware stack levels used:    1
 10149 ;; Hardware stack levels required when called:    1
 10150 ;; This function calls:
 10151 ;;		Nothing
 10152 ;; This function is called by:
 10153 ;;		___awtoft
 10154 ;;		___ftadd
 10155 ;;		___ftdiv
 10156 ;;		___ftmul
 10157 ;;		___lltoft
 10158 ;;		___lwtoft
 10159 ;; This function uses a non-reentrant model
 10160 ;;
 10161                           
 10162                           
 10163                           ;psect for function ___ftpack
 10164  1188                     ___ftpack:
 10165                           
 10166                           ;incstack = 0
 10167                           ; Regs used in ___ftpack: [wreg+status,2+status,0+btemp+1]
 10168  1188  0875               	movf	___ftpack@exp,w
 10169  1189  1903               	btfsc	3,2
 10170  118A  2990               	goto	l4411
 10171  118B  0874               	movf	___ftpack@arg+2,w
 10172  118C  0473               	iorwf	___ftpack@arg+1,w
 10173  118D  0472               	iorwf	___ftpack@arg,w
 10174  118E  1D03               	skipz
 10175  118F  29A3               	goto	l4419
 10176  1190                     l4411:
 10177  1190  3000               	movlw	0
 10178  1191  00F2               	movwf	?___ftpack
 10179  1192  3000               	movlw	0
 10180  1193  00F3               	movwf	?___ftpack+1
 10181  1194  3000               	movlw	0
 10182  1195  00F4               	movwf	?___ftpack+2
 10183  1196  0008               	return
 10184  1197                     l4415:
 10185  1197  3001               	movlw	1
 10186  1198  00FF               	movwf	127
 10187  1199  087F               	movf	127,w
 10188  119A  07F5               	addwf	___ftpack@exp,f
 10189  119B  3001               	movlw	1
 10190  119C                     u6025:
 10191  119C  1003               	clrc
 10192  119D  0CF4               	rrf	___ftpack@arg+2,f
 10193  119E  0CF3               	rrf	___ftpack@arg+1,f
 10194  119F  0CF2               	rrf	___ftpack@arg,f
 10195  11A0  3EFF               	addlw	-1
 10196  11A1  1D03               	skipz
 10197  11A2  299C               	goto	u6025
 10198  11A3                     l4419:
 10199  11A3  30FE               	movlw	254
 10200  11A4  0574               	andwf	___ftpack@arg+2,w
 10201  11A5  1903               	btfsc	3,2
 10202  11A6  29BE               	goto	l4427
 10203  11A7  2997               	goto	l4415
 10204  11A8                     l4421:
 10205  11A8  3001               	movlw	1
 10206  11A9  00FF               	movwf	127
 10207  11AA  087F               	movf	127,w
 10208  11AB  07F5               	addwf	___ftpack@exp,f
 10209  11AC  3001               	movlw	1
 10210  11AD  07F2               	addwf	___ftpack@arg,f
 10211  11AE  3000               	movlw	0
 10212  11AF  1803               	skipnc
 10213  11B0  3001               	movlw	1
 10214  11B1  07F3               	addwf	___ftpack@arg+1,f
 10215  11B2  3000               	movlw	0
 10216  11B3  1803               	skipnc
 10217  11B4  3001               	movlw	1
 10218  11B5  07F4               	addwf	___ftpack@arg+2,f
 10219  11B6  3001               	movlw	1
 10220  11B7                     u6045:
 10221  11B7  1003               	clrc
 10222  11B8  0CF4               	rrf	___ftpack@arg+2,f
 10223  11B9  0CF3               	rrf	___ftpack@arg+1,f
 10224  11BA  0CF2               	rrf	___ftpack@arg,f
 10225  11BB  3EFF               	addlw	-1
 10226  11BC  1D03               	skipz
 10227  11BD  29B7               	goto	u6045
 10228  11BE                     l4427:
 10229  11BE  30FF               	movlw	255
 10230  11BF  0574               	andwf	___ftpack@arg+2,w
 10231  11C0  1903               	btfsc	3,2
 10232  11C1  29D1               	goto	l4431
 10233  11C2  29A8               	goto	l4421
 10234  11C3                     l4433:
 10235  11C3  3002               	movlw	2
 10236  11C4  0275               	subwf	___ftpack@exp,w
 10237  11C5  1C03               	btfss	3,0
 10238  11C6  29D3               	goto	l847
 10239  11C7  3001               	movlw	1
 10240  11C8  02F5               	subwf	___ftpack@exp,f
 10241  11C9  3001               	movlw	1
 10242  11CA                     u6065:
 10243  11CA  1003               	clrc
 10244  11CB  0DF2               	rlf	___ftpack@arg,f
 10245  11CC  0DF3               	rlf	___ftpack@arg+1,f
 10246  11CD  0DF4               	rlf	___ftpack@arg+2,f
 10247  11CE  3EFF               	addlw	-1
 10248  11CF  1D03               	skipz
 10249  11D0  29CA               	goto	u6065
 10250  11D1                     l4431:
 10251  11D1  1FF3               	btfss	___ftpack@arg+1,7
 10252  11D2  29C3               	goto	l4433
 10253  11D3                     l847:
 10254  11D3  1875               	btfsc	___ftpack@exp,0
 10255  11D4  29DB               	goto	l848
 10256  11D5  30FF               	movlw	255
 10257  11D6  05F2               	andwf	___ftpack@arg,f
 10258  11D7  307F               	movlw	127
 10259  11D8  05F3               	andwf	___ftpack@arg+1,f
 10260  11D9  30FF               	movlw	255
 10261  11DA  05F4               	andwf	___ftpack@arg+2,f
 10262  11DB                     l848:
 10263  11DB  1003               	clrc
 10264  11DC  0CF5               	rrf	___ftpack@exp,f
 10265  11DD  0875               	movf	___ftpack@exp,w
 10266  11DE  00F7               	movwf	??___ftpack
 10267  11DF  01F8               	clrf	??___ftpack+1
 10268  11E0  01F9               	clrf	??___ftpack+2
 10269  11E1  3010               	movlw	16
 10270  11E2                     u6105:
 10271  11E2  1003               	clrc
 10272  11E3  0DF7               	rlf	??___ftpack,f
 10273  11E4  0DF8               	rlf	??___ftpack+1,f
 10274  11E5  0DF9               	rlf	??___ftpack+2,f
 10275  11E6  3EFF               	addlw	-1
 10276  11E7  1D03               	skipz
 10277  11E8  29E2               	goto	u6105
 10278  11E9  0877               	movf	??___ftpack,w
 10279  11EA  04F2               	iorwf	___ftpack@arg,f
 10280  11EB  0878               	movf	??___ftpack+1,w
 10281  11EC  04F3               	iorwf	___ftpack@arg+1,f
 10282  11ED  0879               	movf	??___ftpack+2,w
 10283  11EE  04F4               	iorwf	___ftpack@arg+2,f
 10284  11EF  0876               	movf	___ftpack@sign,w
 10285  11F0  1903               	btfsc	3,2
 10286  11F1  0008               	return
 10287  11F2  17F4               	bsf	___ftpack@arg+2,7
 10288  11F3  0008               	return
 10289  11F4                     __end_of___ftpack:
 10290                           
 10291                           	psect	text46
 10292  1C93                     __ptext46:	
 10293 ;; *************** function _PWM_Max_Duty *****************
 10294 ;; Defined at:
 10295 ;;		line 4 in file "pwm.h"
 10296 ;; Parameters:    Size  Location     Type
 10297 ;;		None
 10298 ;; Auto vars:     Size  Location     Type
 10299 ;;		None
 10300 ;; Return value:  Size  Location     Type
 10301 ;;                  2    6[BANK0 ] int 
 10302 ;; Registers used:
 10303 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
 10304 ;; Tracked objects:
 10305 ;;		On entry : 300/0
 10306 ;;		On exit  : 300/0
 10307 ;;		Unchanged: 0/0
 10308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10309 ;;      Params:         0       2       0       0       0
 10310 ;;      Locals:         0       0       0       0       0
 10311 ;;      Temps:          0       4       0       0       0
 10312 ;;      Totals:         0       6       0       0       0
 10313 ;;Total ram usage:        6 bytes
 10314 ;; Hardware stack levels used:    1
 10315 ;; Hardware stack levels required when called:    2
 10316 ;; This function calls:
 10317 ;;		___aldiv
 10318 ;; This function is called by:
 10319 ;;		_PWM1_Set_duty
 10320 ;; This function uses a non-reentrant model
 10321 ;;
 10322                           
 10323                           
 10324                           ;psect for function _PWM_Max_Duty
 10325  1C93                     _PWM_Max_Duty:
 10326                           
 10327                           ;pwm.h: 6: return(20000000/(frequency*4));
 10328                           
 10329                           ;incstack = 0
 10330                           ; Regs used in _PWM_Max_Duty: [wreg+status,2+status,0+btemp+1+pclath+cstack]
 10331  1C93  1683               	bsf	3,5	;RP0=1, select bank1
 10332  1C94  0839               	movf	_frequency^(0+128),w
 10333  1C95  1283               	bcf	3,5	;RP0=0, select bank0
 10334  1C96  00A8               	movwf	??_PWM_Max_Duty
 10335  1C97  1683               	bsf	3,5	;RP0=1, select bank1
 10336  1C98  083A               	movf	(_frequency+1)^(0+128),w
 10337  1C99  1283               	bcf	3,5	;RP0=0, select bank0
 10338  1C9A  00A9               	movwf	??_PWM_Max_Duty+1
 10339  1C9B  1683               	bsf	3,5	;RP0=1, select bank1
 10340  1C9C  083B               	movf	(_frequency+2)^(0+128),w
 10341  1C9D  1283               	bcf	3,5	;RP0=0, select bank0
 10342  1C9E  00AA               	movwf	??_PWM_Max_Duty+2
 10343  1C9F  1683               	bsf	3,5	;RP0=1, select bank1
 10344  1CA0  083C               	movf	(_frequency+3)^(0+128),w
 10345  1CA1  1283               	bcf	3,5	;RP0=0, select bank0
 10346  1CA2  00AB               	movwf	??_PWM_Max_Duty+3
 10347  1CA3  3002               	movlw	2
 10348  1CA4                     u4535:
 10349  1CA4  1003               	clrc
 10350  1CA5  0DA8               	rlf	??_PWM_Max_Duty,f
 10351  1CA6  0DA9               	rlf	??_PWM_Max_Duty+1,f
 10352  1CA7  0DAA               	rlf	??_PWM_Max_Duty+2,f
 10353  1CA8  0DAB               	rlf	??_PWM_Max_Duty+3,f
 10354  1CA9  3EFF               	addlw	-1
 10355  1CAA  1D03               	skipz
 10356  1CAB  2CA4               	goto	u4535
 10357  1CAC  082B               	movf	??_PWM_Max_Duty+3,w
 10358  1CAD  00F5               	movwf	___aldiv@divisor+3
 10359  1CAE  082A               	movf	??_PWM_Max_Duty+2,w
 10360  1CAF  00F4               	movwf	___aldiv@divisor+2
 10361  1CB0  0829               	movf	??_PWM_Max_Duty+1,w
 10362  1CB1  00F3               	movwf	___aldiv@divisor+1
 10363  1CB2  0828               	movf	??_PWM_Max_Duty,w
 10364  1CB3  00F2               	movwf	___aldiv@divisor
 10365  1CB4  3001               	movlw	1
 10366  1CB5  00F9               	movwf	___aldiv@dividend+3
 10367  1CB6  3031               	movlw	49
 10368  1CB7  00F8               	movwf	___aldiv@dividend+2
 10369  1CB8  302D               	movlw	45
 10370  1CB9  00F7               	movwf	___aldiv@dividend+1
 10371  1CBA  3000               	movlw	0
 10372  1CBB  00F6               	movwf	___aldiv@dividend
 10373  1CBC  160A  118A  236F   	fcall	___aldiv
 10374  1CBF  0873               	movf	?___aldiv+1,w
 10375  1CC0  00A7               	movwf	?_PWM_Max_Duty+1
 10376  1CC1  0872               	movf	?___aldiv,w
 10377  1CC2  00A6               	movwf	?_PWM_Max_Duty
 10378  1CC3  0008               	return
 10379  1CC4                     __end_of_PWM_Max_Duty:
 10380                           
 10381                           	psect	text47
 10382  136F                     __ptext47:	
 10383 ;; *************** function ___aldiv *****************
 10384 ;; Defined at:
 10385 ;;		line 5 in file "D:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\aldiv.c"
 10386 ;; Parameters:    Size  Location     Type
 10387 ;;  divisor         4    2[COMMON] long 
 10388 ;;  dividend        4    6[COMMON] long 
 10389 ;; Auto vars:     Size  Location     Type
 10390 ;;  quotient        4    2[BANK0 ] long 
 10391 ;;  sign            1    1[BANK0 ] unsigned char 
 10392 ;;  counter         1    0[BANK0 ] unsigned char 
 10393 ;; Return value:  Size  Location     Type
 10394 ;;                  4    2[COMMON] long 
 10395 ;; Registers used:
 10396 ;;		wreg, status,2, status,0, btemp+1
 10397 ;; Tracked objects:
 10398 ;;		On entry : 300/0
 10399 ;;		On exit  : 300/0
 10400 ;;		Unchanged: 0/0
 10401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10402 ;;      Params:         8       0       0       0       0
 10403 ;;      Locals:         0       6       0       0       0
 10404 ;;      Temps:          1       0       0       0       0
 10405 ;;      Totals:         9       6       0       0       0
 10406 ;;Total ram usage:       15 bytes
 10407 ;; Hardware stack levels used:    1
 10408 ;; Hardware stack levels required when called:    1
 10409 ;; This function calls:
 10410 ;;		Nothing
 10411 ;; This function is called by:
 10412 ;;		_PWM_Max_Duty
 10413 ;;		_PWM1_init
 10414 ;; This function uses a non-reentrant model
 10415 ;;
 10416                           
 10417                           
 10418                           ;psect for function ___aldiv
 10419  136F                     ___aldiv:
 10420                           
 10421                           ;incstack = 0
 10422                           ; Regs used in ___aldiv: [wreg+status,2+status,0+btemp+1]
 10423  136F  01A1               	clrf	___aldiv@sign
 10424  1370  1FF5               	btfss	___aldiv@divisor+3,7
 10425  1371  2B7F               	goto	l682
 10426  1372  09F2               	comf	___aldiv@divisor,f
 10427  1373  09F3               	comf	___aldiv@divisor+1,f
 10428  1374  09F4               	comf	___aldiv@divisor+2,f
 10429  1375  09F5               	comf	___aldiv@divisor+3,f
 10430  1376  0AF2               	incf	___aldiv@divisor,f
 10431  1377  1903               	skipnz
 10432  1378  0AF3               	incf	___aldiv@divisor+1,f
 10433  1379  1903               	skipnz
 10434  137A  0AF4               	incf	___aldiv@divisor+2,f
 10435  137B  1903               	skipnz
 10436  137C  0AF5               	incf	___aldiv@divisor+3,f
 10437  137D  01A1               	clrf	___aldiv@sign
 10438  137E  0AA1               	incf	___aldiv@sign,f
 10439  137F                     l682:
 10440  137F  1FF9               	btfss	___aldiv@dividend+3,7
 10441  1380  2B90               	goto	l3153
 10442  1381  09F6               	comf	___aldiv@dividend,f
 10443  1382  09F7               	comf	___aldiv@dividend+1,f
 10444  1383  09F8               	comf	___aldiv@dividend+2,f
 10445  1384  09F9               	comf	___aldiv@dividend+3,f
 10446  1385  0AF6               	incf	___aldiv@dividend,f
 10447  1386  1903               	skipnz
 10448  1387  0AF7               	incf	___aldiv@dividend+1,f
 10449  1388  1903               	skipnz
 10450  1389  0AF8               	incf	___aldiv@dividend+2,f
 10451  138A  1903               	skipnz
 10452  138B  0AF9               	incf	___aldiv@dividend+3,f
 10453  138C  3001               	movlw	1
 10454  138D  00FF               	movwf	127
 10455  138E  087F               	movf	127,w
 10456  138F  06A1               	xorwf	___aldiv@sign,f
 10457  1390                     l3153:
 10458  1390  3000               	movlw	0
 10459  1391  00A5               	movwf	___aldiv@quotient+3
 10460  1392  3000               	movlw	0
 10461  1393  00A4               	movwf	___aldiv@quotient+2
 10462  1394  3000               	movlw	0
 10463  1395  00A3               	movwf	___aldiv@quotient+1
 10464  1396  3000               	movlw	0
 10465  1397  00A2               	movwf	___aldiv@quotient
 10466  1398  0875               	movf	___aldiv@divisor+3,w
 10467  1399  0474               	iorwf	___aldiv@divisor+2,w
 10468  139A  0473               	iorwf	___aldiv@divisor+1,w
 10469  139B  0472               	iorwf	___aldiv@divisor,w
 10470  139C  1903               	skipnz
 10471  139D  2BE5               	goto	l3177
 10472  139E  01A0               	clrf	___aldiv@counter
 10473  139F  0AA0               	incf	___aldiv@counter,f
 10474  13A0                     l3163:
 10475  13A0  1BF5               	btfsc	___aldiv@divisor+3,7
 10476  13A1  2BB0               	goto	l3165
 10477  13A2  3001               	movlw	1
 10478  13A3  00FA               	movwf	??___aldiv
 10479  13A4                     u3835:
 10480  13A4  1003               	clrc
 10481  13A5  0DF2               	rlf	___aldiv@divisor,f
 10482  13A6  0DF3               	rlf	___aldiv@divisor+1,f
 10483  13A7  0DF4               	rlf	___aldiv@divisor+2,f
 10484  13A8  0DF5               	rlf	___aldiv@divisor+3,f
 10485  13A9  0BFA               	decfsz	??___aldiv,f
 10486  13AA  2BA4               	goto	u3835
 10487  13AB  3001               	movlw	1
 10488  13AC  00FF               	movwf	127
 10489  13AD  087F               	movf	127,w
 10490  13AE  07A0               	addwf	___aldiv@counter,f
 10491  13AF  2BA0               	goto	l3163
 10492  13B0                     l3165:
 10493  13B0  3001               	movlw	1
 10494  13B1  00FA               	movwf	??___aldiv
 10495  13B2                     u3855:
 10496  13B2  1003               	clrc
 10497  13B3  0DA2               	rlf	___aldiv@quotient,f
 10498  13B4  0DA3               	rlf	___aldiv@quotient+1,f
 10499  13B5  0DA4               	rlf	___aldiv@quotient+2,f
 10500  13B6  0DA5               	rlf	___aldiv@quotient+3,f
 10501  13B7  0BFA               	decfsz	??___aldiv,f
 10502  13B8  2BB2               	goto	u3855
 10503  13B9  0875               	movf	___aldiv@divisor+3,w
 10504  13BA  0279               	subwf	___aldiv@dividend+3,w
 10505  13BB  1D03               	skipz
 10506  13BC  2BC7               	goto	u3865
 10507  13BD  0874               	movf	___aldiv@divisor+2,w
 10508  13BE  0278               	subwf	___aldiv@dividend+2,w
 10509  13BF  1D03               	skipz
 10510  13C0  2BC7               	goto	u3865
 10511  13C1  0873               	movf	___aldiv@divisor+1,w
 10512  13C2  0277               	subwf	___aldiv@dividend+1,w
 10513  13C3  1D03               	skipz
 10514  13C4  2BC7               	goto	u3865
 10515  13C5  0872               	movf	___aldiv@divisor,w
 10516  13C6  0276               	subwf	___aldiv@dividend,w
 10517  13C7                     u3865:
 10518  13C7  1C03               	skipc
 10519  13C8  2BD8               	goto	l3173
 10520  13C9  0872               	movf	___aldiv@divisor,w
 10521  13CA  02F6               	subwf	___aldiv@dividend,f
 10522  13CB  0873               	movf	___aldiv@divisor+1,w
 10523  13CC  1C03               	skipc
 10524  13CD  0F73               	incfsz	___aldiv@divisor+1,w
 10525  13CE  02F7               	subwf	___aldiv@dividend+1,f
 10526  13CF  0874               	movf	___aldiv@divisor+2,w
 10527  13D0  1C03               	skipc
 10528  13D1  0F74               	incfsz	___aldiv@divisor+2,w
 10529  13D2  02F8               	subwf	___aldiv@dividend+2,f
 10530  13D3  0875               	movf	___aldiv@divisor+3,w
 10531  13D4  1C03               	skipc
 10532  13D5  0F75               	incfsz	___aldiv@divisor+3,w
 10533  13D6  02F9               	subwf	___aldiv@dividend+3,f
 10534  13D7  1422               	bsf	___aldiv@quotient,0
 10535  13D8                     l3173:
 10536  13D8  3001               	movlw	1
 10537  13D9                     u3875:
 10538  13D9  1003               	clrc
 10539  13DA  0CF5               	rrf	___aldiv@divisor+3,f
 10540  13DB  0CF4               	rrf	___aldiv@divisor+2,f
 10541  13DC  0CF3               	rrf	___aldiv@divisor+1,f
 10542  13DD  0CF2               	rrf	___aldiv@divisor,f
 10543  13DE  3EFF               	addlw	-1
 10544  13DF  1D03               	skipz
 10545  13E0  2BD9               	goto	u3875
 10546  13E1  3001               	movlw	1
 10547  13E2  02A0               	subwf	___aldiv@counter,f
 10548  13E3  1D03               	btfss	3,2
 10549  13E4  2BB0               	goto	l3165
 10550  13E5                     l3177:
 10551  13E5  0821               	movf	___aldiv@sign,w
 10552  13E6  1903               	btfsc	3,2
 10553  13E7  2BF3               	goto	l3181
 10554  13E8  09A2               	comf	___aldiv@quotient,f
 10555  13E9  09A3               	comf	___aldiv@quotient+1,f
 10556  13EA  09A4               	comf	___aldiv@quotient+2,f
 10557  13EB  09A5               	comf	___aldiv@quotient+3,f
 10558  13EC  0AA2               	incf	___aldiv@quotient,f
 10559  13ED  1903               	skipnz
 10560  13EE  0AA3               	incf	___aldiv@quotient+1,f
 10561  13EF  1903               	skipnz
 10562  13F0  0AA4               	incf	___aldiv@quotient+2,f
 10563  13F1  1903               	skipnz
 10564  13F2  0AA5               	incf	___aldiv@quotient+3,f
 10565  13F3                     l3181:
 10566  13F3  0825               	movf	___aldiv@quotient+3,w
 10567  13F4  00F5               	movwf	?___aldiv+3
 10568  13F5  0824               	movf	___aldiv@quotient+2,w
 10569  13F6  00F4               	movwf	?___aldiv+2
 10570  13F7  0823               	movf	___aldiv@quotient+1,w
 10571  13F8  00F3               	movwf	?___aldiv+1
 10572  13F9  0822               	movf	___aldiv@quotient,w
 10573  13FA  00F2               	movwf	?___aldiv
 10574  13FB  0008               	return
 10575  13FC                     __end_of___aldiv:
 10576                           
 10577                           	psect	text48
 10578  1F45                     __ptext48:	
 10579 ;; *************** function _Lcd_Init *****************
 10580 ;; Defined at:
 10581 ;;		line 60 in file "lcd.h"
 10582 ;; Parameters:    Size  Location     Type
 10583 ;;		None
 10584 ;; Auto vars:     Size  Location     Type
 10585 ;;		None
 10586 ;; Return value:  Size  Location     Type
 10587 ;;                  1    wreg      void 
 10588 ;; Registers used:
 10589 ;;		wreg, status,2, status,0, pclath, cstack
 10590 ;; Tracked objects:
 10591 ;;		On entry : 300/100
 10592 ;;		On exit  : 300/0
 10593 ;;		Unchanged: 0/0
 10594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10595 ;;      Params:         0       0       0       0       0
 10596 ;;      Locals:         0       0       0       0       0
 10597 ;;      Temps:          2       0       0       0       0
 10598 ;;      Totals:         2       0       0       0       0
 10599 ;;Total ram usage:        2 bytes
 10600 ;; Hardware stack levels used:    1
 10601 ;; Hardware stack levels required when called:    3
 10602 ;; This function calls:
 10603 ;;		_Lcd_Cmd
 10604 ;;		_Lcd_Port
 10605 ;; This function is called by:
 10606 ;;		_main
 10607 ;; This function uses a non-reentrant model
 10608 ;;
 10609                           
 10610                           
 10611                           ;psect for function _Lcd_Init
 10612  1F45                     _Lcd_Init:
 10613                           
 10614                           ;lcd.h: 62: Lcd_Port(0x00);
 10615                           
 10616                           ;incstack = 0
 10617                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
 10618  1F45  3000               	movlw	0
 10619  1F46  160A  158A  2333  160A  158A  	fcall	_Lcd_Port
 10620                           
 10621                           ;lcd.h: 63: _delay((unsigned long)((20)*(20000000/4000.0)));
 10622  1F4B  3082               	movlw	130
 10623  1F4C  00F7               	movwf	??_Lcd_Init+1
 10624  1F4D  30DD               	movlw	221
 10625  1F4E  00F6               	movwf	??_Lcd_Init
 10626  1F4F                     u7897:
 10627  1F4F  0BF6               	decfsz	??_Lcd_Init,f
 10628  1F50  2F4F               	goto	u7897
 10629  1F51  0BF7               	decfsz	??_Lcd_Init+1,f
 10630  1F52  2F4F               	goto	u7897
 10631  1F53  2F54               	nop2
 10632                           
 10633                           ;lcd.h: 64: Lcd_Cmd(0x03);
 10634  1F54  3003               	movlw	3
 10635  1F55  160A  158A  234B  160A  158A  	fcall	_Lcd_Cmd
 10636                           
 10637                           ;lcd.h: 65: _delay((unsigned long)((5)*(20000000/4000.0)));
 10638  1F5A  3021               	movlw	33
 10639  1F5B  00F7               	movwf	??_Lcd_Init+1
 10640  1F5C  3076               	movlw	118
 10641  1F5D  00F6               	movwf	??_Lcd_Init
 10642  1F5E                     u7907:
 10643  1F5E  0BF6               	decfsz	??_Lcd_Init,f
 10644  1F5F  2F5E               	goto	u7907
 10645  1F60  0BF7               	decfsz	??_Lcd_Init+1,f
 10646  1F61  2F5E               	goto	u7907
 10647  1F62  0000               	nop
 10648                           
 10649                           ;lcd.h: 66: Lcd_Cmd(0x03);
 10650  1F63  3003               	movlw	3
 10651  1F64  160A  158A  234B  160A  158A  	fcall	_Lcd_Cmd
 10652                           
 10653                           ;lcd.h: 67: _delay((unsigned long)((11)*(20000000/4000.0)));
 10654  1F69  3048               	movlw	72
 10655  1F6A  00F7               	movwf	??_Lcd_Init+1
 10656  1F6B  306C               	movlw	108
 10657  1F6C  00F6               	movwf	??_Lcd_Init
 10658  1F6D                     u7917:
 10659  1F6D  0BF6               	decfsz	??_Lcd_Init,f
 10660  1F6E  2F6D               	goto	u7917
 10661  1F6F  0BF7               	decfsz	??_Lcd_Init+1,f
 10662  1F70  2F6D               	goto	u7917
 10663  1F71  0000               	nop
 10664                           
 10665                           ;lcd.h: 68: Lcd_Cmd(0x03);
 10666  1F72  3003               	movlw	3
 10667  1F73  160A  158A  234B  160A  158A  	fcall	_Lcd_Cmd
 10668                           
 10669                           ;lcd.h: 70: Lcd_Cmd(0x02);
 10670  1F78  3002               	movlw	2
 10671  1F79  160A  158A  234B  160A  158A  	fcall	_Lcd_Cmd
 10672                           
 10673                           ;lcd.h: 71: Lcd_Cmd(0x02);
 10674  1F7E  3002               	movlw	2
 10675  1F7F  160A  158A  234B  160A  158A  	fcall	_Lcd_Cmd
 10676                           
 10677                           ;lcd.h: 72: Lcd_Cmd(0x08);
 10678  1F84  3008               	movlw	8
 10679  1F85  160A  158A  234B  160A  158A  	fcall	_Lcd_Cmd
 10680                           
 10681                           ;lcd.h: 73: Lcd_Cmd(0x00);
 10682  1F8A  3000               	movlw	0
 10683  1F8B  160A  158A  234B  160A  158A  	fcall	_Lcd_Cmd
 10684                           
 10685                           ;lcd.h: 74: Lcd_Cmd(0x0C);
 10686  1F90  300C               	movlw	12
 10687  1F91  160A  158A  234B  160A  158A  	fcall	_Lcd_Cmd
 10688                           
 10689                           ;lcd.h: 75: Lcd_Cmd(0x00);
 10690  1F96  3000               	movlw	0
 10691  1F97  160A  158A  234B  160A  158A  	fcall	_Lcd_Cmd
 10692                           
 10693                           ;lcd.h: 76: Lcd_Cmd(0x06);
 10694  1F9C  3006               	movlw	6
 10695  1F9D  160A  158A  234B   	fcall	_Lcd_Cmd
 10696  1FA0  0008               	return
 10697  1FA1                     __end_of_Lcd_Init:
 10698                           
 10699                           	psect	text49
 10700  1B4B                     __ptext49:	
 10701 ;; *************** function _Lcd_Cmd *****************
 10702 ;; Defined at:
 10703 ;;		line 23 in file "lcd.h"
 10704 ;; Parameters:    Size  Location     Type
 10705 ;;  a               1    wreg     unsigned char 
 10706 ;; Auto vars:     Size  Location     Type
 10707 ;;  a               1    5[COMMON] unsigned char 
 10708 ;; Return value:  Size  Location     Type
 10709 ;;                  1    wreg      void 
 10710 ;; Registers used:
 10711 ;;		wreg, status,2, status,0, pclath, cstack
 10712 ;; Tracked objects:
 10713 ;;		On entry : 0/0
 10714 ;;		On exit  : 300/0
 10715 ;;		Unchanged: 0/0
 10716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10717 ;;      Params:         0       0       0       0       0
 10718 ;;      Locals:         1       0       0       0       0
 10719 ;;      Temps:          2       0       0       0       0
 10720 ;;      Totals:         3       0       0       0       0
 10721 ;;Total ram usage:        3 bytes
 10722 ;; Hardware stack levels used:    1
 10723 ;; Hardware stack levels required when called:    2
 10724 ;; This function calls:
 10725 ;;		_Lcd_Port
 10726 ;; This function is called by:
 10727 ;;		_Lcd_Clear
 10728 ;;		_Lcd_Set_Cursor
 10729 ;;		_Lcd_Init
 10730 ;; This function uses a non-reentrant model
 10731 ;;
 10732                           
 10733                           
 10734                           ;psect for function _Lcd_Cmd
 10735  1B4B                     _Lcd_Cmd:
 10736                           
 10737                           ;incstack = 0
 10738                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
 10739                           ;Lcd_Cmd@a stored from wreg
 10740  1B4B  00F5               	movwf	Lcd_Cmd@a
 10741                           
 10742                           ;lcd.h: 25: RD2 = 0;
 10743  1B4C  1283               	bcf	3,5	;RP0=0, select bank0
 10744  1B4D  1303               	bcf	3,6	;RP1=0, select bank0
 10745  1B4E  1108               	bcf	8,2	;volatile
 10746                           
 10747                           ;lcd.h: 27: Lcd_Port(a);
 10748  1B4F  0875               	movf	Lcd_Cmd@a,w
 10749  1B50  160A  158A  2333  160A  158A  	fcall	_Lcd_Port
 10750                           
 10751                           ;lcd.h: 28: RD3 = 1;
 10752  1B55  1588               	bsf	8,3	;volatile
 10753                           
 10754                           ;lcd.h: 29: _delay((unsigned long)((4)*(20000000/4000.0)));
 10755  1B56  301A               	movlw	26
 10756  1B57  00F4               	movwf	??_Lcd_Cmd+1
 10757  1B58  30F8               	movlw	248
 10758  1B59  00F3               	movwf	??_Lcd_Cmd
 10759  1B5A                     u7927:
 10760  1B5A  0BF3               	decfsz	??_Lcd_Cmd,f
 10761  1B5B  2B5A               	goto	u7927
 10762  1B5C  0BF4               	decfsz	??_Lcd_Cmd+1,f
 10763  1B5D  2B5A               	goto	u7927
 10764  1B5E  0000               	nop
 10765                           
 10766                           ;lcd.h: 30: RD3 = 0;
 10767  1B5F  1283               	bcf	3,5	;RP0=0, select bank0
 10768  1B60  1303               	bcf	3,6	;RP1=0, select bank0
 10769  1B61  1188               	bcf	8,3	;volatile
 10770  1B62  0008               	return
 10771  1B63                     __end_of_Lcd_Cmd:
 10772                           
 10773                           	psect	text50
 10774  1B33                     __ptext50:	
 10775 ;; *************** function _Lcd_Port *****************
 10776 ;; Defined at:
 10777 ;;		line 1 in file "lcd.h"
 10778 ;; Parameters:    Size  Location     Type
 10779 ;;  a               1    wreg     unsigned char 
 10780 ;; Auto vars:     Size  Location     Type
 10781 ;;  a               1    2[COMMON] unsigned char 
 10782 ;; Return value:  Size  Location     Type
 10783 ;;                  1    wreg      void 
 10784 ;; Registers used:
 10785 ;;		wreg
 10786 ;; Tracked objects:
 10787 ;;		On entry : 200/0
 10788 ;;		On exit  : 300/0
 10789 ;;		Unchanged: 0/0
 10790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10791 ;;      Params:         0       0       0       0       0
 10792 ;;      Locals:         1       0       0       0       0
 10793 ;;      Temps:          0       0       0       0       0
 10794 ;;      Totals:         1       0       0       0       0
 10795 ;;Total ram usage:        1 bytes
 10796 ;; Hardware stack levels used:    1
 10797 ;; Hardware stack levels required when called:    1
 10798 ;; This function calls:
 10799 ;;		Nothing
 10800 ;; This function is called by:
 10801 ;;		_Lcd_Cmd
 10802 ;;		_Lcd_Init
 10803 ;;		_Lcd_Write_Char
 10804 ;; This function uses a non-reentrant model
 10805 ;;
 10806                           
 10807                           
 10808                           ;psect for function _Lcd_Port
 10809  1B33                     _Lcd_Port:
 10810                           
 10811                           ;incstack = 0
 10812                           ; Regs used in _Lcd_Port: [wreg]
 10813                           ;Lcd_Port@a stored from wreg
 10814  1B33  00F2               	movwf	Lcd_Port@a
 10815                           
 10816                           ;lcd.h: 3: if(a & 1)
 10817  1B34  1C72               	btfss	Lcd_Port@a,0
 10818  1B35  2B39               	goto	l272
 10819                           
 10820                           ;lcd.h: 4: RD4 = 1;
 10821  1B36  1283               	bcf	3,5	;RP0=0, select bank0
 10822  1B37  1608               	bsf	8,4	;volatile
 10823  1B38  2B3B               	goto	l273
 10824  1B39                     l272:
 10825                           
 10826                           ;lcd.h: 5: else;lcd.h: 6: RD4 = 0;
 10827  1B39  1283               	bcf	3,5	;RP0=0, select bank0
 10828  1B3A  1208               	bcf	8,4	;volatile
 10829  1B3B                     l273:
 10830                           
 10831                           ;lcd.h: 8: if(a & 2)
 10832  1B3B  1CF2               	btfss	Lcd_Port@a,1
 10833  1B3C  2B3F               	goto	l274
 10834                           
 10835                           ;lcd.h: 9: RD5 = 1;
 10836  1B3D  1688               	bsf	8,5	;volatile
 10837  1B3E  2B40               	goto	l275
 10838  1B3F                     l274:
 10839                           
 10840                           ;lcd.h: 10: else;lcd.h: 11: RD5 = 0;
 10841  1B3F  1288               	bcf	8,5	;volatile
 10842  1B40                     l275:
 10843                           
 10844                           ;lcd.h: 13: if(a & 4)
 10845  1B40  1D72               	btfss	Lcd_Port@a,2
 10846  1B41  2B44               	goto	l276
 10847                           
 10848                           ;lcd.h: 14: RD6 = 1;
 10849  1B42  1708               	bsf	8,6	;volatile
 10850  1B43  2B45               	goto	l277
 10851  1B44                     l276:
 10852                           
 10853                           ;lcd.h: 15: else;lcd.h: 16: RD6 = 0;
 10854  1B44  1308               	bcf	8,6	;volatile
 10855  1B45                     l277:
 10856                           
 10857                           ;lcd.h: 18: if(a & 8)
 10858  1B45  1DF2               	btfss	Lcd_Port@a,3
 10859  1B46  2B49               	goto	l278
 10860                           
 10861                           ;lcd.h: 19: RD7 = 1;
 10862  1B47  1788               	bsf	8,7	;volatile
 10863  1B48  0008               	return
 10864  1B49                     l278:
 10865                           
 10866                           ;lcd.h: 20: else;lcd.h: 21: RD7 = 0;
 10867  1B49  1388               	bcf	8,7	;volatile
 10868  1B4A  0008               	return
 10869  1B4B                     __end_of_Lcd_Port:
 10870                           
 10871                           	psect	text51
 10872  1BE9                     __ptext51:	
 10873 ;; *************** function _Keypad_init *****************
 10874 ;; Defined at:
 10875 ;;		line 1 in file "keypad.h"
 10876 ;; Parameters:    Size  Location     Type
 10877 ;;		None
 10878 ;; Auto vars:     Size  Location     Type
 10879 ;;		None
 10880 ;; Return value:  Size  Location     Type
 10881 ;;                  1    wreg      void 
 10882 ;; Registers used:
 10883 ;;		wreg, status,2, status,0, btemp+1
 10884 ;; Tracked objects:
 10885 ;;		On entry : B00/0
 10886 ;;		On exit  : 300/100
 10887 ;;		Unchanged: 0/0
 10888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10889 ;;      Params:         0       0       0       0       0
 10890 ;;      Locals:         0       0       0       0       0
 10891 ;;      Temps:          0       0       0       0       0
 10892 ;;      Totals:         0       0       0       0       0
 10893 ;;Total ram usage:        0 bytes
 10894 ;; Hardware stack levels used:    1
 10895 ;; Hardware stack levels required when called:    1
 10896 ;; This function calls:
 10897 ;;		Nothing
 10898 ;; This function is called by:
 10899 ;;		_main
 10900 ;; This function uses a non-reentrant model
 10901 ;;
 10902                           
 10903                           
 10904                           ;psect for function _Keypad_init
 10905  1BE9                     _Keypad_init:
 10906                           
 10907                           ;keypad.h: 3: PORTB = 0x00;
 10908                           
 10909                           ;incstack = 0
 10910                           ; Regs used in _Keypad_init: [wreg+status,2+status,0+btemp+1]
 10911  1BE9  0186               	clrf	6	;volatile
 10912                           
 10913                           ;keypad.h: 4: TRISB1 = TRISB2 = TRISB3 = 0;
 10914  1BEA  1683               	bsf	3,5	;RP0=1, select bank1
 10915  1BEB  1186               	bcf	6,3	;volatile
 10916  1BEC  1106               	bcf	6,2	;volatile
 10917  1BED  1086               	bcf	6,1	;volatile
 10918                           
 10919                           ;keypad.h: 5: TRISC3 = 0;
 10920  1BEE  1187               	bcf	7,3	;volatile
 10921                           
 10922                           ;keypad.h: 6: TRISB4 = TRISB5 = TRISB6 = TRISB7 = 1;
 10923  1BEF  1786               	bsf	6,7	;volatile
 10924  1BF0  1F86               	btfss	6,7	;volatile
 10925  1BF1  2BF6               	goto	u5290
 10926  1BF2  1683               	bsf	3,5	;RP0=1, select bank1
 10927  1BF3  1303               	bcf	3,6	;RP1=0, select bank1
 10928  1BF4  1706               	bsf	6,6	;volatile
 10929  1BF5  2BF9               	goto	u5304
 10930  1BF6                     u5290:
 10931  1BF6  1683               	bsf	3,5	;RP0=1, select bank1
 10932  1BF7  1303               	bcf	3,6	;RP1=0, select bank1
 10933  1BF8  1306               	bcf	6,6	;volatile
 10934  1BF9                     u5304:
 10935  1BF9  1F06               	btfss	6,6	;volatile
 10936  1BFA  2BFF               	goto	u5300
 10937  1BFB  1683               	bsf	3,5	;RP0=1, select bank1
 10938  1BFC  1303               	bcf	3,6	;RP1=0, select bank1
 10939  1BFD  1686               	bsf	6,5	;volatile
 10940  1BFE  2C02               	goto	u5314
 10941  1BFF                     u5300:
 10942  1BFF  1683               	bsf	3,5	;RP0=1, select bank1
 10943  1C00  1303               	bcf	3,6	;RP1=0, select bank1
 10944  1C01  1286               	bcf	6,5	;volatile
 10945  1C02                     u5314:
 10946  1C02  1E86               	btfss	6,5	;volatile
 10947  1C03  2C08               	goto	u5310
 10948  1C04  1683               	bsf	3,5	;RP0=1, select bank1
 10949  1C05  1303               	bcf	3,6	;RP1=0, select bank1
 10950  1C06  1606               	bsf	6,4	;volatile
 10951  1C07  2C0B               	goto	l3905
 10952  1C08                     u5310:
 10953  1C08  1683               	bsf	3,5	;RP0=1, select bank1
 10954  1C09  1303               	bcf	3,6	;RP1=0, select bank1
 10955  1C0A  1206               	bcf	6,4	;volatile
 10956  1C0B                     l3905:
 10957                           
 10958                           ;keypad.h: 7: OPTION_REG &= 0x7F;
 10959  1C0B  307F               	movlw	127
 10960  1C0C  00FF               	movwf	127
 10961  1C0D  087F               	movf	127,w
 10962  1C0E  0581               	andwf	1,f	;volatile
 10963  1C0F  0008               	return
 10964  1C10                     __end_of_Keypad_init:
 10965                           
 10966                           	psect	text52
 10967  1C10                     __ptext52:	
 10968 ;; *************** function _NGAT *****************
 10969 ;; Defined at:
 10970 ;;		line 99 in file "main.c"
 10971 ;; Parameters:    Size  Location     Type
 10972 ;;		None
 10973 ;; Auto vars:     Size  Location     Type
 10974 ;;		None
 10975 ;; Return value:  Size  Location     Type
 10976 ;;                  1    wreg      void 
 10977 ;; Registers used:
 10978 ;;		wreg, status,2, status,0
 10979 ;; Tracked objects:
 10980 ;;		On entry : 0/0
 10981 ;;		On exit  : 300/0
 10982 ;;		Unchanged: 0/0
 10983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10984 ;;      Params:         0       0       0       0       0
 10985 ;;      Locals:         0       0       0       0       0
 10986 ;;      Temps:          2       0       0       0       0
 10987 ;;      Totals:         2       0       0       0       0
 10988 ;;Total ram usage:        2 bytes
 10989 ;; Hardware stack levels used:    1
 10990 ;; This function calls:
 10991 ;;		Nothing
 10992 ;; This function is called by:
 10993 ;;		Interrupt level 1
 10994 ;; This function uses a non-reentrant model
 10995 ;;
 10996                           
 10997                           
 10998                           ;psect for function _NGAT
 10999  1C10                     _NGAT:
 11000                           
 11001                           ;main.c: 101: if(INTCONbits.INTF==1)
 11002  1C10  1C8B               	btfss	11,1	;volatile
 11003  1C11  2C1D               	goto	i1l4291
 11004                           
 11005                           ;main.c: 102: {;main.c: 103: xungdem=xungdem+1;
 11006  1C12  1283               	bcf	3,5	;RP0=0, select bank0
 11007  1C13  1303               	bcf	3,6	;RP1=0, select bank0
 11008  1C14  086C               	movf	_xungdem,w
 11009  1C15  3E01               	addlw	1
 11010  1C16  00EC               	movwf	_xungdem
 11011  1C17  086D               	movf	_xungdem+1,w
 11012  1C18  1803               	skipnc
 11013  1C19  3E01               	addlw	1
 11014  1C1A  3E00               	addlw	0
 11015  1C1B  00ED               	movwf	_xungdem+1
 11016                           
 11017                           ;main.c: 104: INTCONbits.INTF=0;
 11018  1C1C  108B               	bcf	11,1	;volatile
 11019  1C1D                     i1l4291:
 11020                           
 11021                           ;main.c: 105: };main.c: 106: if(PIR1bits.TMR1IF==1)
 11022  1C1D  1283               	bcf	3,5	;RP0=0, select bank0
 11023  1C1E  1303               	bcf	3,6	;RP1=0, select bank0
 11024  1C1F  1C0C               	btfss	12,0	;volatile
 11025  1C20  2C34               	goto	i1l349
 11026                           
 11027                           ;main.c: 107: {;main.c: 108: xungdo = xungdem;
 11028  1C21  086D               	movf	_xungdem+1,w
 11029  1C22  00EF               	movwf	_xungdo+1
 11030  1C23  086C               	movf	_xungdem,w
 11031  1C24  00EE               	movwf	_xungdo
 11032                           
 11033                           ;main.c: 109: PIE1bits.TMR1IE = 0;
 11034  1C25  1683               	bsf	3,5	;RP0=1, select bank1
 11035  1C26  100C               	bcf	12,0	;volatile
 11036                           
 11037                           ;main.c: 110: INTCONbits.INTE = 0;
 11038  1C27  120B               	bcf	11,4	;volatile
 11039                           
 11040                           ;main.c: 112: xungdem=0;
 11041  1C28  1283               	bcf	3,5	;RP0=0, select bank0
 11042  1C29  01EC               	clrf	_xungdem
 11043  1C2A  01ED               	clrf	_xungdem+1
 11044                           
 11045                           ;main.c: 114: INTCONbits.INTE = 1;
 11046  1C2B  160B               	bsf	11,4	;volatile
 11047                           
 11048                           ;main.c: 115: PIE1bits.TMR1IE = 1;
 11049  1C2C  1683               	bsf	3,5	;RP0=1, select bank1
 11050  1C2D  140C               	bsf	12,0	;volatile
 11051                           
 11052                           ;main.c: 116: TMR1L=34286&0X00FF;
 11053  1C2E  30EE               	movlw	238
 11054  1C2F  1283               	bcf	3,5	;RP0=0, select bank0
 11055  1C30  008E               	movwf	14	;volatile
 11056                           
 11057                           ;main.c: 117: TMR1H=34286>>8;
 11058  1C31  3085               	movlw	133
 11059  1C32  008F               	movwf	15	;volatile
 11060                           
 11061                           ;main.c: 118: PIR1bits.TMR1IF = 0;
 11062  1C33  100C               	bcf	12,0	;volatile
 11063  1C34                     i1l349:
 11064  1C34  0871               	movf	??_NGAT+1,w
 11065  1C35  008A               	movwf	10
 11066  1C36  0E70               	swapf	??_NGAT^(0+4294967168),w
 11067  1C37  0083               	movwf	3
 11068  1C38  0EFE               	swapf	126,f
 11069  1C39  0E7E               	swapf	126,w
 11070  1C3A  0009               	retfie
 11071  1C3B                     __end_of_NGAT:
 11072  007E                     btemp	set	126	;btemp
 11073  007E                     wtemp0	set	126
 11074                           
 11075                           	psect	intentry
 11076  0004                     __pintentry:	
 11077                           ;incstack = 0
 11078                           ; Regs used in _NGAT: [wreg+status,2+status,0]
 11079                           
 11080  0004                     interrupt_function:
 11081  007E                     saved_w	set	btemp
 11082  0004  00FE               	movwf	btemp
 11083  0005  0E03               	swapf	3,w
 11084  0006  00F0               	movwf	??_NGAT
 11085  0007  080A               	movf	10,w
 11086  0008  00F1               	movwf	??_NGAT+1
 11087  0009  160A  158A  2C10   	ljmp	_NGAT
 11088                           
 11089                           	psect	config
 11090                           
 11091                           ;Config register CONFIG @ 0x2007
 11092                           ;	Oscillator Selection bits
 11093                           ;	FOSC = HS, HS oscillator
 11094                           ;	Watchdog Timer Enable bit
 11095                           ;	WDTE = OFF, WDT disabled
 11096                           ;	Power-up Timer Enable bit
 11097                           ;	PWRTE = OFF, PWRT disabled
 11098                           ;	Brown-out Reset Enable bit
 11099                           ;	BOREN = OFF, BOR disabled
 11100                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
 11101                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
 11102                           ;	Data EEPROM Memory Code Protection bit
 11103                           ;	CPD = OFF, Data EEPROM code protection off
 11104                           ;	Flash Program Memory Write Enable bits
 11105                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
 11106                           ;	In-Circuit Debugger Mode bit
 11107                           ;	DEBUG = 0x1, unprogrammed default
 11108                           ;	Flash Program Memory Code Protection bit
 11109                           ;	CP = OFF, Code protection off
 11110  2007                     	org	8199
 11111  2007  3F3A               	dw	16186

Data Sizes:
    Strings     224
    Constant    118
    Data        1
    BSS         35
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      12
    BANK0            80     74      80
    BANK1            80     25      54
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_11(CODE[21]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 20
		 -> str(BANK1[20]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 20
		 -> STR_13(CODE[13]), STR_9(CODE[14]), STR_8(CODE[12]), str(BANK1[20]), 
		 -> STR_6(CODE[12]), STR_4(CODE[14]), STR_3(CODE[14]), STR_2(CODE[8]), 
		 -> STR_1(CODE[17]), 

    UART_send_string@st_pt	PTR unsigned char  size(2) Largest target is 68
		 -> STR_12(CODE[68]), STR_10(CODE[68]), STR_7(CODE[18]), str(BANK1[20]), 
		 -> STR_5(CODE[13]), 


Critical Paths under _main in COMMON

    _main->_Lcd_Write_String
    _sprintf->___lldiv
    _sprintf->___llmod
    _sprintf->___lltoft
    _sprintf->__tdiv_to_l_
    _scale->___bmul
    ___awdiv->___awmod
    _fround->___bmul
    ___lbdiv->___lbmod
    ___bmul->___lbdiv
    ___lltoft->___ftpack
    ___ftsub->___lltoft
    _SwitchMode->_Lcd_Write_String
    _UART_send_string->_UART_send_char
    _Speed->_Lcd_Write_String
    _switch_press_scan->_keypad_scanner
    _convert->___lmul
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _PWM1_init->___aldiv
    ___lwtoft->___ftpack
    ___ftmul->___bmul
    _PWM_Max_Duty->___aldiv
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _NGAT in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___bmul->___awdiv
    ___ftsub->___ftadd
    ___ftadd->_fround
    _SwitchMode->_Speed
    _Speed->_inputValue
    _inputValue->___wmul
    _convert->___lmul
    ___wmul->_convert
    _PWM1_init->___aldiv
    _PWM1_Set_duty->___fttol
    ___fttol->___ftdiv
    ___ftmul->___awtoft
    ___ftdiv->___ftmul
    ___awtoft->_PWM_Max_Duty
    _PWM_Max_Duty->___aldiv

Critical Paths under _NGAT in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_sprintf

Critical Paths under _NGAT in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _NGAT in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _NGAT in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0  101055
                                             71 BANK0      3     3      0
                        _Keypad_init
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                      _PWM1_Set_duty
                          _PWM1_init
                         _PWM1_start
                              _Speed
                         _SwitchMode
                          _UART_init
                   _UART_send_string
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
                          _ngat_init
                            _sprintf
                        _timer0_init
                             _timer1
 ---------------------------------------------------------------------------------
 (1) _timer1                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             41    36      5   48132
                                             60 BANK0     11     6      5
                                              0 BANK1     25    25      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                                8     4      4   10248
                                             31 BANK0      8     4      4
                            ___awdiv
                            ___awmod
                             ___bmul
                            ___ftmul
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1064
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1523
                                              0 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      68
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              11     7      4    8205
                                             31 BANK0     11     7      4
                             ___bmul
                            ___ftmul
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              6     5      1     351
                                              2 COMMON     6     5      1
 ---------------------------------------------------------------------------------
 (3) ___lbdiv                                              4     3      1     472
                                              8 COMMON     1     0      1
                                              0 BANK0      3     3      0
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               3     2      1     766
                                              9 COMMON     2     2      0
                                              8 BANK0      1     0      1
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lbdiv (ARG)
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     431
                                              2 COMMON     9     3      6
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          20    14      6     574
                                              2 COMMON     6     0      6
                                              0 BANK0     14    14      0
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             5     1      4    3105
                                             10 COMMON     1     1      0
                                              0 BANK0      4     0      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                             10     2      8     694
                                              2 COMMON     9     1      8
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     418
                                              2 COMMON     9     1      8
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    4709
                                             54 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    4459
                                             42 BANK0     12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     109
                                              2 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               6     0      6     648
                                              2 COMMON     6     0      6
 ---------------------------------------------------------------------------------
 (1) _ngat_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UART_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SwitchMode                                           0     0      0    9955
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                              _Speed
                   _UART_send_string
                  _switch_press_scan
 ---------------------------------------------------------------------------------
 (1) _UART_send_string                                     2     0      2     387
                                              3 COMMON     2     0      2
                     _UART_send_char
 ---------------------------------------------------------------------------------
 (2) _Speed                                                3     3      0    7052
                                             56 BANK0      3     3      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                         _inputValue
 ---------------------------------------------------------------------------------
 (3) _inputValue                                          32    30      2    4582
                                             24 BANK0     32    30      2
                     _Lcd_Write_Char
                     _UART_send_char
                             ___wmul
                            _convert
                  _switch_press_scan
 ---------------------------------------------------------------------------------
 (2) _switch_press_scan                                    1     1      0      46
                                              5 COMMON     1     1      0
                     _keypad_scanner
 ---------------------------------------------------------------------------------
 (3) _keypad_scanner                                       3     3      0       0
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (4) _convert                                             14    10      4     376
                                              4 BANK0     14    10      4
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              13     5      8     220
                                              2 COMMON     9     1      8
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1972
                                             18 BANK0      6     2      4
                            _convert (ARG)
 ---------------------------------------------------------------------------------
 (2) _UART_send_char                                       1     1      0      22
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_String                                     7     5      2    1231
                                              7 COMMON     4     2      2
                                              0 BANK0      3     3      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (4) _Lcd_Write_Char                                       4     4      0     254
                                              3 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Set_Cursor                                       6     5      1    1084
                                              6 COMMON     2     1      1
                                              0 BANK0      4     4      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Clear                                            0     0      0     155
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _PWM1_start                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM1_init                                            8     4      4     766
                                              6 BANK0      8     4      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (1) _PWM1_Set_duty                                        4     2      2   18404
                                             59 BANK0      4     2      2
                       _PWM_Max_Duty
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             3     0      3    3302
                                              0 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             13     9      4     674
                                             46 BANK0     13     9      4
                       _PWM_Max_Duty (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    6266
                                             16 BANK0     15     9      6
                       _PWM_Max_Duty (ARG)
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                             ___bmul (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                            ___lbdiv (ARG)
                            ___lbmod (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    4042
                                             31 BANK0     15     9      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    3193
                                             12 BANK0      4     1      3
                       _PWM_Max_Duty (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2926
                                              2 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (2) _PWM_Max_Duty                                         6     4      2     658
                                              6 BANK0      6     4      2
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     658
                                              2 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     279
                                              6 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Cmd                                              3     3      0     155
                                              3 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (5) _Lcd_Port                                             1     1      0     124
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Keypad_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _NGAT                                                 2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Keypad_init
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _PWM1_Set_duty
     _PWM_Max_Duty
       ___aldiv
     ___awtoft
       _PWM_Max_Duty (ARG)
         ___aldiv
       ___ftpack (ARG)
     ___ftdiv
       ___ftmul (ARG)
         _PWM_Max_Duty (ARG)
           ___aldiv
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           _PWM_Max_Duty (ARG)
             ___aldiv
           ___ftpack (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       _PWM_Max_Duty (ARG)
         ___aldiv
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         _PWM_Max_Duty (ARG)
           ___aldiv
         ___ftpack (ARG)
       ___bmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lbdiv (ARG)
         ___lbmod (ARG)
       ___lbmod (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       _PWM_Max_Duty (ARG)
         ___aldiv
       ___awtoft (ARG)
         _PWM_Max_Duty (ARG)
           ___aldiv
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___ftmul (ARG)
           _PWM_Max_Duty (ARG)
             ___aldiv
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             _PWM_Max_Duty (ARG)
               ___aldiv
             ___ftpack (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         _PWM_Max_Duty (ARG)
           ___aldiv
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           _PWM_Max_Duty (ARG)
             ___aldiv
           ___ftpack (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___bmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftmul
           _PWM_Max_Duty (ARG)
             ___aldiv
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             _PWM_Max_Duty (ARG)
               ___aldiv
             ___ftpack (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
     ___lwtoft
       ___ftpack
   _PWM1_init
     ___aldiv
   _PWM1_start
   _Speed
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     _inputValue
       _Lcd_Write_Char
         _Lcd_Port
       _UART_send_char
       ___wmul
         _convert (ARG)
           ___lmul
       _convert
         ___lmul
       _switch_press_scan
         _keypad_scanner
   _SwitchMode
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     _Speed
       _Lcd_Clear
         _Lcd_Cmd
           _Lcd_Port
       _Lcd_Set_Cursor
         _Lcd_Cmd
           _Lcd_Port
       _Lcd_Write_String
         _Lcd_Write_Char
           _Lcd_Port
       _inputValue
         _Lcd_Write_Char
           _Lcd_Port
         _UART_send_char
         ___wmul
           _convert (ARG)
             ___lmul
         _convert
           ___lmul
         _switch_press_scan
           _keypad_scanner
     _UART_send_string
       _UART_send_char
     _switch_press_scan
       _keypad_scanner
   _UART_init
   _UART_send_string
     _UART_send_char
   ___ftdiv
     ___ftmul (ARG)
       _PWM_Max_Duty (ARG)
         ___aldiv
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         _PWM_Max_Duty (ARG)
           ___aldiv
         ___ftpack (ARG)
       ___bmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lbdiv (ARG)
         ___lbmod (ARG)
       ___lbmod (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
   ___ftmul
     _PWM_Max_Duty (ARG)
       ___aldiv
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___awtoft (ARG)
       _PWM_Max_Duty (ARG)
         ___aldiv
       ___ftpack (ARG)
     ___bmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lbdiv (ARG)
         ___lbmod (ARG)
       ___lbmod (ARG)
     ___ftpack (ARG)
     ___ftpack (ARG)
     ___lbdiv (ARG)
       ___lbmod (ARG)
     ___lbmod (ARG)
     ___lwtoft (ARG)
       ___ftpack
   ___lwtoft
     ___ftpack
   _ngat_init
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___bmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftmul
           _PWM_Max_Duty (ARG)
             ___aldiv
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             _PWM_Max_Duty (ARG)
               ___aldiv
             ___ftpack (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lbdiv
           ___lbmod (ARG)
         ___lbmod
     ___ftge
     ___ftmul
       _PWM_Max_Duty (ARG)
         ___aldiv
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         _PWM_Max_Duty (ARG)
           ___aldiv
         ___ftpack (ARG)
       ___bmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lbdiv (ARG)
         ___lbmod (ARG)
       ___lbmod (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___bmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftmul
             _PWM_Max_Duty (ARG)
               ___aldiv
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               _PWM_Max_Duty (ARG)
                 ___aldiv
               ___ftpack (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lbdiv
             ___lbmod (ARG)
           ___lbmod
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       _PWM_Max_Duty (ARG)
         ___aldiv
       ___awtoft (ARG)
         _PWM_Max_Duty (ARG)
           ___aldiv
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___ftmul (ARG)
           _PWM_Max_Duty (ARG)
             ___aldiv
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             _PWM_Max_Duty (ARG)
               ___aldiv
             ___ftpack (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         _PWM_Max_Duty (ARG)
           ___aldiv
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           _PWM_Max_Duty (ARG)
             ___aldiv
           ___ftpack (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___bmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftmul
           _PWM_Max_Duty (ARG)
             ___aldiv
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             _PWM_Max_Duty (ARG)
               ___aldiv
             ___ftpack (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
     ___wmul
       _convert (ARG)
         ___lmul
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___bmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
       ___ftmul
         _PWM_Max_Duty (ARG)
           ___aldiv
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           _PWM_Max_Duty (ARG)
             ___aldiv
           ___ftpack (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lbdiv
         ___lbmod (ARG)
       ___lbmod
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___bmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
       ___ftmul
         _PWM_Max_Duty (ARG)
           ___aldiv
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           _PWM_Max_Duty (ARG)
             ___aldiv
           ___ftpack (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
   _timer0_init
   _timer1

 _NGAT (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     19      36       7       67.5%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     4A      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      B       C       1       85.7%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      92      12        0.0%
ABS                  0      0      92       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Tue Jul 05 17:13:06 2022

                         _k 007B                           pc 0002              ___bmul@product 0079  
              ___awdiv@sign 0025                          fsr 0004         ___wmul@multiplicand 0034  
              ___ftadd@exp1 0055                ___ftadd@exp2 0054                ___ftadd@sign 0053  
                       l200 08E8                         l220 095B                         l212 092D  
                       l204 0903                         l221 0955                         l213 0927  
                       l205 08FD                         l240 09C8                         l232 099E  
                       l224 0970                         l216 0946                         l208 0918  
                       l241 09C2                         l233 0998                         l225 096A  
                       l217 0940                         l209 0912                         l146 1AA3  
                       l252 0A0B                         l244 09DD                         l236 09B3  
                       l228 0985                         l261 0A2F                         l253 0A05  
                       l245 09D7                         l237 09AD                         l229 097F  
                       l272 1B39                         l256 0A20                         l248 09F6  
                       l273 1B3B                         l257 0A1A                         l249 09F0  
                       l274 1B3F                         l275 1B40                         l611 1B8E  
                       l276 1B44                         l277 1B45                         l278 1B49  
                       l534 0129                         l199 08EE                         l519 004F  
                       l820 17BC                         l682 137F                         l586 0631  
                       l907 15CB                         l828 17E8                         l847 11D3  
                       l871 1689                         l848 11DB                         l948 1249  
                       l965 1BE3                         _GIE 005F                         _RB1 0031  
                       _RB2 0032                         _RC0 0038                         _RB3 0033  
                       _RB4 0034                         _RC3 003B                         _RB5 0035  
                       _RB6 0036                         _RD2 0042                         _RC4 003C  
                       _RB7 0037                         _RD3 0043                         _RC5 003D  
                       _RD4 0044                         _RD5 0045                         _RD6 0046  
                       _RD7 0047                         _PR2 0092                         _RX9 00C6  
                       _TX9 04C6                         fsr0 0004                         _str 00A5  
                       indf 0000                ___awmod@sign 0077                ___ftdiv@cntr 0048  
              ___ftdiv@sign 004D                        l3153 1390                        l3241 1E11  
                      l3163 13A0                        l3251 1E25                        l3181 13F3  
                      l3173 13D8                        l3165 13B0                        l3237 1E0A  
                      l3263 1E46                        l3255 1E33                        l3177 13E5  
                      l3249 1E17                        l4411 1190                        l5051 12D3  
                      l3611 1700                        l3259 1E3E                        l5123 0159  
                      l5115 012B                        l5107 00DA                        l4421 11A8  
                      l5037 12A5                        l3605 15DA                        l3429 1BCC  
                      l5213 03FB                        l5205 03C8                        l5133 0190  
                      l5117 0145                        l5109 0124                        l4431 11D1  
                      l4415 1197                        l3447 1BA5                        l3631 1766  
                      l3615 1709                        l5303 0641                        l4433 11C3  
                      l2921 1EA2                        l2841 0A35                        l5057 12E1  
                      l5321 068C                        l5313 066D                        l5209 03F1  
                      l5161 026B                        l5081 0066                        l5073 004A  
                      l4427 11BE                        l4419 11A3                        l3803 1235  
                      l2923 1EE3                        l4507 0C13                        l3651 17E4  
                      l3555 154B                        l5307 065D                        l5251 04C2  
                      l5227 040C                        l5235 043E                        l2861 1D53  
                      l4517 0C34                        l3549 1ADA                        l5325 06A5  
                      l5229 042B                        l5173 02D6                        l5165 02A0  
                      l5157 0252                        l5149 0200                        l5085 0079  
                      l5093 00C2                        l3815 1258                        l3807 1245  
                      l4455 1DDB                        l4471 1CF9                        l4527 0C55  
                      l3751 1C84                        l4711 169B                        l4703 1679  
                      l3671 1FB2                        l3647 17D4                        l3583 15A4  
                      l3575 1584                        l3559 1554                        l4623 1F01  
                      l5351 06E9                        l5335 06BA                        l5343 06D0  
                      l5327 06A9                        l5319 0688                        l5263 04F3  
                      l5191 037E                        l5079 0058                        l3905 1C0B  
                      l2929 1B86                        l2857 1D3D                        l4537 0C76  
                      l3681 1FEA                        l3673 1FC2                        l3593 15B7  
                      l4641 1F2D                        l4633 1F09                        l4617 1EF6  
                      l5345 06D4                        l5273 0514                        l5257 04D5  
                      l5249 045A                        l5177 02ED                        l5409 07C4  
                      l3819 1266                        l4547 0C97                        l4475 0BAA  
                      l3747 1C75                        l4715 16AD                        l4707 1685  
                      l3659 17F7                        l4635 1F17                        l5187 0325  
                      l4741 084E                        l3781 1203                        l4557 0CB8  
                      l4725 16D0                        l4661 160A                        l3685 1FF7  
                      l3597 15C7                        l4645 1F38                        l5293 061B  
                      l5197 0380                        l5357 002C                        l4735 0838  
                      l2879 1AEA                        l4567 0CD9                        l4487 0BD1  
                      l4671 1620                        l4807 0820                        l5287 060A  
                      l5295 0620                        l5359 06F9                        l3785 120C  
                      l4577 0CFA                        l4497 0BF2                        l4665 1611  
                      l4649 1F40                        l4907 1B6D                        l4923 1428  
                      l4771 0899                        l4763 0881                        l4587 0D0A  
                      l4683 163A                        l4595 1AFE                        l5395 0756  
                      l4917 1412                        l4589 0D53                        l4829 134A  
                      l4693 165B                        l4775 08A9                        l4759 0871  
                      l4695 1660                        l4599 1B04                        l4855 0B74  
                      l4847 0AF9                        l4871 0E1F                        l4945 1470  
                      l4697 1664                        l4689 164F                        l4881 0EB0  
                      l4939 1451                        l4971 1E64                        l4795 0808  
                      l4957 1172                        l4797 0811                        l4877 0E8F  
                      l4975 1E82                        l4991 1C51                        l4895 0FDF  
                      l4969 1E54                        l4889 0F6F                        l4979 1E8F  
                      l4989 1C3F                        STR_1 10F3                        STR_2 1160  
                      STR_3 1104                        STR_4 1112                        STR_5 112E  
                      STR_6 1154                        STR_7 10E1                        STR_8 1148  
                      STR_9 1120                        _BRGH 04C2                        _CREN 00C4  
                      u4035 1E1A                        u3423 1EBD                        u4055 1E2B  
                      u4065 1E34                        _NGAT 1C10                        u5300 1BFF  
                      u5125 1236                        u3445 1B8F                        u3365 1D55  
                      u5310 1C08                        u3455 1B96                        u3375 1D5D  
                      u5304 1BF9                        u6105 11E2                        u6025 119C  
                      u5314 1C02                        u5155 124E                        _PEIE 005E  
                      u6045 11B7                        u7005 1E58                        _INTE 005C  
                      u4535 1CA4                        u5095 1213                        u6135 1DC2  
                      u6065 11CA                        u5265 1D7D                        u6305 0D14  
                      u7025 1E72                        u5290 1BF6                        u3835 13A4  
                      u5275 1D86                        u6155 1DE7                        u7035 1E83  
                      u4805 1797                        u4725 15B8                        u6405 1F2E  
                      u3855 13B2                        u7055 1C44                        u4495 1BCF  
                      u7215 01A7                        u3865 13C7                        u4905 1FB6  
                      u4665 1586                _PWM_Max_Duty 1C93                        u3875 13D9  
                      u4755 15D0                        u4675 1597                        u7315 0384  
                      u6525 163B                        u4925 1FC4                        u4845 17D5  
                      u4685 15A5                        u6365 1F0C                        u7325 03BE  
                      u6615 167A                        u4935 1FD9                        u7415 0465  
                      u7255 0274                        u4945 1FEB                        u6385 1F18  
                      u7265 02AB                        u6715 0882                        u6555 1650  
                      u4875 17ED                        u4795 1768                        u6395 1F24  
                      u7435 04DE                        u6725 088A                        u7525 0638  
                      u7445 04EB                        u7535 064E                        u7295 02D4  
                      u6585 1665                        u7465 0564                        u7385 0415  
                      u7707 1368                        u6835 1320                        u7475 05CE  
                      u7395 0447                        u6765 08AA                        u7717 08E1  
                      u6775 08B2                        u7807 09A6                        u7727 08F6  
                      u7575 067D                        u6945 1452                        u7817 09BB  
                      u7737 090B                        u7585 0693                        u7907 1F5E  
                      u6955 1463                        u5995 1CD3                        u7827 09D0  
                      u7747 0920                        u7917 1F6D                        u6965 1471  
                      u7837 09E9                        u7757 0939                        u7927 1B5A  
                      u7847 09FE                        u7767 094E                        u7687 07F1  
                      u7857 0A13                        u7777 0963                        u7697 1340  
                      u7867 0A28                        u7787 0978                        u7877 1CE1  
                      u7797 0991                        u7887 1CF0                        u7897 1F4F  
                      _SPEN 00C7                        _TXEN 04C5                        _TXIF 0064  
                      _SYNC 04C4           ?_Lcd_Write_String 0077                        _main 06FE  
              ___ftpack@arg 0072                ___ftpack@exp 0075                        btemp 007E  
                      start 000C          ??_Lcd_Write_String 0020                _sprintf$1157 00BD  
           __end_of_Lcd_Cmd 1B63           ___bmul@multiplier 007A                ___ftmul@cntr 003D  
              ___ftmul@sign 003E                ___fttol@exp1 005A   __size_of_UART_send_string 0021  
              ___fttol@lval 0056                       ?_NGAT 0070             __end_of___aldiv 13FC  
                     ?_main 0070             __end_of___awdiv 1F45             __end_of___lbdiv 0822  
           __end_of___ftadd 16E8                       STR_10 1088                       STR_11 10CC  
                     STR_12 1088                       STR_13 113B             __end_of___awmod 1E4B  
           __end_of___lbmod 1BE9             __end_of___ftdiv 1494             __end_of___ftneg 1AC3  
           __end_of___lldiv 2000             __end_of___ftmul 08D5             ___awdiv@divisor 0020  
           __end_of___llmod 1E98             __end_of___ftsub 1188             __end_of___fttol 126F  
                     i1l349 1C34             ___awdiv@counter 0024                       _TMR1H 000F  
                     _TMR1L 000E                       _SPBRG 0099                       _PORTB 0006  
                     _PORTC 0007     __size_of_Lcd_Set_Cursor 004A                       _TRISC 0087  
                     _TRISD 0088                       _TXREG 0019               ??_Keypad_init 0072  
       ___lmul@multiplicand 0076                ___lltoft@exp 007A                       _Speed 12EC  
          ??_keypad_scanner 0072             __end_of_convert 1EEC               ___awtoft@sign 002F  
        __size_of_UART_init 0012             __end_of_dpowers 1088                       _enter 00A3  
        __size_of_PWM1_init 0042                       _scale 0D5A             __end_of_isdigit 1ADC  
                     _input 006A               ___ftpack@sign 0076                       _tocdo 00A0  
               ?_PWM1_start 0070                       pclath 000A                       status 0003  
                     wtemp0 007E             __end_of_sprintf 06FE             ___lbdiv@divisor 0078  
           ___lbdiv@counter 0021            __end_of_Lcd_Init 1FA1                __end_of_NGAT 1C3B  
          __end_of_Lcd_Port 1B4B             __initialization 000F                __end_of_main 07F8  
                    ??_NGAT 0070           PWM1_Set_duty@duty 005B                      ??_main 0067  
             ___fttol@sign1 0055          __size_of_Lcd_Clear 000B        __size_of__tdiv_to_l_ 00A8  
                    ?_Speed 0070            ___llmod@dividend 0076                      ?_scale 003F  
                    _CCPR1L 0015            ___awdiv@dividend 0022            __end_of___awtoft 1B84  
          __end_of___ftpack 11F4            __end_of___lltoft 1C66                      i1l4291 1C1D  
                    _INTEDG 040E         __end_of_Keypad_init 1C10            __end_of___lwtoft 1B33  
                 ??_Lcd_Cmd 0073     __size_of_Lcd_Write_Char 0033                      _TRISB0 0430  
                    _TRISB1 0431                      _TRISB2 0432                      _TRISB3 0433  
                    _TRISC2 043A                      _TRISB4 0434                      _TRISC3 043B  
                    _TRISB5 0435                      _TRISB6 0436                      _TRISB7 0437  
                    _TRISC5 043D                      _TRISC6 043E                      _TRISC7 043F  
          __end_of__powers_ 1039                      ___bmul 1AFC                      ___ftge 1C66  
                    ___lmul 1D35                   ??___aldiv 007A                      ___wmul 1B84  
         __end_of_UART_init 1B1F                   ??___awdiv 0078                   ??___lbdiv 0079  
                 ??___ftadd 0050                   ??___awmod 0076                   ??___lbmod 0073  
                 ??___ftdiv 0045                   ??___ftneg 0075           __end_of_PWM1_init 1DB6  
                 ??___lldiv 007A                   ??___ftmul 0036                ?_timer0_init 0070  
                 ??___llmod 007A                   ??___ftsub 007B                   ??___fttol 0052  
                    _fround 0A37            ___awdiv@quotient 0026               inputValue@dem 0055  
       __size_of_PWM1_start 0007               inputValue@arr 003D             ___awmod@divisor 0072  
                    _timer1 1AEC             ___awmod@counter 0076       ___ftmul@f3_as_product 003A  
                 ??_convert 0028                      _xungdo 006E                __pdataCOMMON 007B  
                 ??_isdigit 0072                      saved_w 007E                   ??_sprintf 0061  
          ___lbdiv@dividend 0020             Lcd_Set_Cursor@a 0020             Lcd_Set_Cursor@b 0076  
           Lcd_Set_Cursor@y 0022             Lcd_Set_Cursor@z 0021             ___lbmod@divisor 0072  
   __end_of__initialization 0022             ___lbmod@counter 0076                  ___ftadd@f1 004A  
                ___ftadd@f2 004D                  ___ftge@ff1 0072                  ___ftge@ff2 0075  
         __end_of_Lcd_Clear 1ACE                  ___ftdiv@f1 0042                  ___ftdiv@f2 003F  
                ___ftdiv@f3 0049                  ___ftneg@f1 0072                  ___awtoft@c 002C  
                _SwitchMode 126F         ___bmul@multiplicand 0028                  ___ftmul@f1 0030  
                ___ftmul@f2 0033                  ___ftsub@f1 0059                  ___ftsub@f2 0056  
                ___fttol@f1 004E              __pcstackCOMMON 0070               __end_of_Speed 136F  
     __end_of_PWM1_Set_duty 153B                  ___lltoft@c 0020            _UART_send_string 1BA5  
             __end_of_scale 1000            ___lbdiv@quotient 0022                  ___lwtoft@c 0020  
            _Lcd_Set_Cursor 1DB6                  __div_to_l_ 16E8              _OPTION_REGbits 0081  
               _Keypad_init 1BE9                     ??_Speed 0058                   ?_Lcd_Init 0070  
               inputValue@i 0053                 inputValue@k 0057                   ?_Lcd_Port 0070  
           __div_to_l_@exp1 002D             __div_to_l_@cntr 002C                     ??_scale 007B  
           __div_to_l_@quot 0028                sprintf@width 00CD                  __pbssBANK0 006A  
                __pbssBANK1 00A0          __size_of_ngat_init 0006               __div_to_l_@f1 0072  
             __div_to_l_@f2 0075                  __pmaintext 06FE                     ?___bmul 0028  
                   ?___ftge 0072                     ?___lmul 0072                     ?___wmul 0032  
                __pintentry 0004                     ?_fround 003F              ___lmul@product 0020  
 __size_of_Lcd_Write_String 003E                   ?___awtoft 002C                   ?___ftpack 0072  
    __end_of_Lcd_Set_Cursor 1E00                     ?_timer1 0070                   ?___lltoft 0020  
                 ?___lwtoft 0020     __size_of_UART_send_char 0006                  ??_Lcd_Init 0076  
                ??_Lcd_Port 0072                ??_PWM1_start 0072                  __stringtab 1000  
            _Lcd_Write_Char 1CC4                     _Lcd_Cmd 1B4B                 ?_SwitchMode 0070  
         __end_of__npowers_ 1060                  _scale$1156 0043                     ___aldiv 136F  
           __size_of___bmul 0011             __size_of___ftge 002D                     ___awdiv 1EEC  
                   ___lbdiv 0801             __size_of___lmul 003F                     ___ftadd 15E3  
                   ___awmod 1E00                     ___lbmod 1BC6                     ___ftdiv 13FC  
                   ___ftneg 1ABB                     ___lldiv 1FA1             __size_of___wmul 0021  
                   ___ftmul 0822                     ___llmod 1E4B                     ___ftsub 116B  
                   ___fttol 11F4                  ??___awtoft 007B                  ??___ftpack 0077  
           __size_of_fround 016F             ?_Lcd_Set_Cursor 0076        __size_of_timer0_init 0006  
                ??___lltoft 007A                     __ptext1 1AEC                     __ptext2 1AAE  
                   __ptext3 0026          __end_of_PWM1_start 1ABB                     __ptext4 0D5A  
                   __ptext5 1E00                     __ptext6 1EEC                     __ptext7 1ACE  
                   __ptext8 0A37                     __ptext9 1BC6             __size_of_timer1 0010  
                ??___lwtoft 007A                     _convert 1E98                   _T1CONbits 0010  
               ?__div_to_l_ 0072                     _dpowers 1060           __end_of_ngat_init 1AAE  
                 _T2CONbits 0012                     _isdigit 1ACE            ___awmod@dividend 0074  
          ___aldiv@dividend 0076                  _inputValue 0BA6                     _sprintf 0026  
                   clrloop0 07F9      __end_of_Lcd_Write_Char 1CF7        end_of_initialization 0022  
                   _xungdem 006C             ___lldiv@divisor 0072             ___lldiv@counter 0024  
          ___aldiv@quotient 0022                   Lcd_Port@a 0072                __pstringtext 1000  
            __tdiv_to_l_@f1 0072              __tdiv_to_l_@f2 0075               ??__tdiv_to_l_ 0078  
                 _UART_init 1B0D                   _PWM1_init 1D74            ___lbmod@dividend 0075  
       __size_of_SwitchMode 007D        switch_press_scan@key 0075    __end_of_UART_send_string 1BC6  
           ?_Lcd_Write_Char 0070           Lcd_Write_String@a 0077           Lcd_Write_String@i 0079  
               ___lbmod@rem 0077                 _CCP1CONbits 0017                 ___ftdiv@exp 004C  
   __size_of_keypad_scanner 0162         __size_of__div_to_l_ 0118                 ___ftmul@exp 0039  
                 _Lcd_Clear 1AC3              __end_of___bmul 1B0D              __end_of___ftge 1C93  
            __end_of___lmul 1D74              __end_of___wmul 1BA5            _Lcd_Write_String 1CF7  
             __pidataCOMMON 0003                  ?_UART_init 0070                  ?_PWM1_init 0026  
            __end_of_fround 0BA6              __end_of_timer1 1AFC         start_initialization 000F  
              ?_Keypad_init 0070              _UART_send_char 1AA2                 ?_inputValue 0038  
       __end_of__tdiv_to_l_ 15E3               ?_PWM_Max_Duty 0026           __size_of_Lcd_Init 005C  
         __size_of_Lcd_Port 0018             ___llmod@divisor 0072             ___llmod@counter 0020  
                ?_Lcd_Clear 0070                    ??___bmul 0079                    ??___ftge 0078  
                  ??___lmul 007A                    ??___wmul 007B             Lcd_Write_Char@a 0076  
           Lcd_Write_Char@y 0075                    ??_fround 007B                    ??_timer1 0072  
             sprintf@tmpval 00C5      __end_of_UART_send_char 1AA8                  fround@prec 0049  
         __size_of___awtoft 0021           __size_of___ftpack 006C           __size_of___lltoft 002B  
                 ___latbits 0002           __size_of___lwtoft 0014               __pcstackBANK0 0020  
             __pcstackBANK1 00BD              ??_PWM_Max_Duty 0028      __size_of_PWM1_Set_duty 00A7  
                  ?_Lcd_Cmd 0070                 sprintf@flag 00CB                 sprintf@eexp 00C9  
               sprintf@fval 00CF                 sprintf@prec 00D2                ??_SwitchMode 007B  
          ??_Lcd_Set_Cursor 0077                    ?___aldiv 0072         __size_of_inputValue 01B4  
                  ?___awdiv 0020                    ?___lbdiv 0078                    ?___ftadd 004A  
                  ?___awmod 0072                    ?___lbmod 0072                    ?___ftdiv 003F  
                  ?___ftneg 0072                    ?___lldiv 0072                    ?___ftmul 0030  
                  ?___llmod 0072                    ?___ftsub 0056                   __npowers_ 1039  
                  ?___fttol 004E            UART_send_char@bt 0072                 __tdiv_to_l_ 153B  
               ??_UART_init 0072                 ??_PWM1_init 002A                ??__div_to_l_ 0020  
                  ?_convert 0024             ?_UART_send_char 0070                    ?_isdigit 0070  
            __size_of_Speed 0083                   _frequency 00B9          __end_of_SwitchMode 12EC  
                 _ngat_init 1AA8                    ?_sprintf 005C              __size_of_scale 02A6  
           ___aldiv@divisor 0072           interrupt_function 0004             ___aldiv@counter 0020  
            ___wmul@product 0036                   clear_ram0 07F8              _keypad_scanner 08D5  
                  _PIE1bits 008C                    Lcd_Cmd@a 0075                    _PIR1bits 000C  
        __end_of__div_to_l_ 1800                 ??_Lcd_Clear 0076               ??_timer0_init 0072  
             _PWM1_Set_duty 1494           _switch_press_scan 1ADC                 __stringbase 1012  
         ___wmul@multiplier 0032          ?_switch_press_scan 0070       UART_send_string@st_pt 0073  
          ??_Lcd_Write_Char 0073                    _Lcd_Init 1F45         ??_switch_press_scan 0075  
                  _Lcd_Port 1B33                  ?_ngat_init 0070        __size_of_Keypad_init 0027  
         ___lmul@multiplier 0072           ?_UART_send_string 0073    __end_of_Lcd_Write_String 1D35  
    __end_of_keypad_scanner 0A37          ??_UART_send_string 0075            __size_of_Lcd_Cmd 0018  
 __end_of_switch_press_scan 1AEC              ?_PWM1_Set_duty 005B            __size_of___aldiv 008D  
      __end_of_PWM_Max_Duty 1CC4            __size_of___awdiv 0059            __size_of___lbdiv 0021  
          __size_of___ftadd 0105            __size_of___awmod 004B            __size_of___lbmod 0023  
          __size_of___ftdiv 0098            __size_of___ftneg 0008            __size_of___lldiv 005F  
          __size_of___ftmul 00B3            __size_of___llmod 004D            __size_of___ftsub 001D  
          __size_of___fttol 007B                    ___awtoft 1B63                    ___ftpack 1188  
               _fround$1154 0046                 _fround$1155 0043          __end_of__stringtab 1012  
                  ___lltoft 1C3B                 _isdigit$895 0072                    ___lwtoft 1B1F  
       __end_of_timer0_init 1AB4                  sprintf@val 00C1            __size_of_convert 0054  
          __size_of_isdigit 000E                ??_inputValue 003A                    __ptext10 0801  
                  __ptext11 1AFC                    __ptext20 1C66                    __ptext12 153B  
                  __ptext21 1AA8                    __ptext13 16E8                    __ptext30 1D35  
                  __ptext22 1B0D                    __ptext14 1C3B                    __ptext31 1B84  
                  __ptext23 126F                    __ptext15 1E4B                    __ptext40 1B1F  
                  __ptext32 1AA2                    __ptext24 1BA5                    __ptext16 1FA1  
                  __ptext41 11F4                    __ptext33 1CF7                    __ptext25 12EC  
                  __ptext17 116B                    __ptext50 1B33                    __ptext42 0822  
                  __ptext34 1CC4                    __ptext26 0BA6                    __ptext18 15E3  
                  __ptext51 1BE9                    __ptext43 13FC                    __ptext35 1DB6  
                  __ptext27 1ADC                    __ptext19 1ABB                    __ptext52 1C10  
                  __ptext44 1B63                    __ptext36 1AC3                    __ptext28 08D5  
                  __ptext45 1188                    __ptext37 1AB4                    __ptext29 1E98  
                  __ptext46 1C93                    __ptext38 1D74                    __ptext47 136F  
                  __ptext39 1494                    __ptext48 1F45                    __ptext49 1B4B  
                  __powers_ 1012            __size_of_sprintf 06D8               __size_of_NGAT 002B  
           ?_keypad_scanner 0070               __size_of_main 00FA               PWM1_init@freq 0026  
        __end_of_inputValue 0D5A                    convert@a 002E                    convert@b 0024  
                  convert@i 002C                  _INTCONbits 000B                    isdigit@c 0073  
               ??_ngat_init 0072                    scale@scl 0046          Lcd_Write_Char@temp 0074  
                  intlevel1 0000                   sprintf@ap 00C0            __tdiv_to_l_@exp1 0025  
          __tdiv_to_l_@cntr 0024                   sprintf@sp 00D4            __tdiv_to_l_@quot 0020  
        inputValue@inputInt 0051            ___lldiv@dividend 0076                   stringcode 100A  
           ??_PWM1_Set_duty 005D  __size_of_switch_press_scan 0010                 _timer0_init 1AAE  
          ??_UART_send_char 0072          Lcd_Set_Cursor@temp 0023                ?__tdiv_to_l_ 0072  
                _OPTION_REG 0081                    sprintf@c 00D5                    sprintf@f 005C  
          ___lldiv@quotient 0020                    stringtab 1000                ___aldiv@sign 0021  
                _PWM1_start 1AB4       __size_of_PWM_Max_Duty 0031  
